
// code qui marche bien mais prend toute la sortie du plan

// src/apis/plan-to-markdown.js - Convertit DIRECTEMENT plan JSON ‚Üí Markdown Slidev

// const express = require('express');
// const axios = require('axios');
// const { v4: uuidv4 } = require('uuid');

// const router = express.Router();

// // Fonction Groq
// async function callGroq(prompt, options = {}) {
//     try {
//         const response = await axios.post('https://api.groq.com/openai/v1/chat/completions', {
//             model: process.env.GROQ_MODEL || 'llama-3.3-70b-versatile',
//             messages: [
//                 {
//                     role: 'system',
//                     content: 'Tu es un expert Slidev. Tu convertis des plans JSON en Markdown Slidev parfait. R√©ponds UNIQUEMENT avec du Markdown Slidev valide.'
//                 },
//                 {
//                     role: 'user',
//                     content: prompt
//                 }
//             ],
//             temperature: options.temperature || 0.6,
//             max_tokens: options.max_tokens || 3500
//         }, {
//             headers: {
//                 'Authorization': `Bearer ${process.env.GROQ_API_KEY}`,
//                 'Content-Type': 'application/json'
//             }
//         });

//         return response.data.choices[0].message.content;
//     } catch (error) {
//         console.error('‚ùå Erreur Groq plan-to-markdown:', error.message);
//         throw new Error('Erreur g√©n√©ration markdown IA');
//     }
// }

// // API POST /ai/plan-to-markdown - Prend le JSON de groq-plan et g√©n√®re le markdown
// router.post('/plan-to-markdown', async (req, res) => {
//     const startTime = Date.now();

//     try {
//         // Validation simple - on accepte tout le JSON de groq-plan
//         if (!req.body.plan_sections || !req.body.topic) {
//             return res.status(400).json({
//                 error: 'Format invalide',
//                 required: ['plan_sections', 'topic'],
//                 format: 'Copiez-collez TOUT le r√©sultat de POST /ai/groq-plan',
//                 example_usage: 'R√©sultat groq-plan ‚Üí Input plan-to-markdown'
//             });
//         }

//         const groqPlanData = req.body; // Tout le JSON de groq-plan
//         console.log(`üìÑ Conversion plan ‚Üí markdown: ${groqPlanData.topic}`);

//         // Cr√©er le prompt
//         const prompt = createMarkdownPrompt(groqPlanData);

//         // G√©n√©rer avec Groq
//         const markdownResponse = await callGroq(prompt);

//         // Nettoyer le markdown
//         let slideMarkdown = cleanMarkdown(markdownResponse);

//         // Fallback si probl√®me
//         if (!slideMarkdown.includes('---\ntheme:')) {
//             slideMarkdown = createFallbackMarkdown(groqPlanData);
//         }

//         const slidesId = uuidv4();
//         const totalTime = Date.now() - startTime;
//         const slideCount = (slideMarkdown.match(/^---$/gm) || []).length;

//         const result = {
//             slides_id: slidesId,

//             // R√âSULTAT PRINCIPAL
//             markdown: slideMarkdown,

//             // Infos
//             slides_count: slideCount,
//             topic: groqPlanData.topic,
//             source_plan_id: groqPlanData.plan_id,

//             // Fichier
//             filename: `slides_${slidesId}.md`,
//             file_size_kb: Math.round(slideMarkdown.length / 1024),

//             // Commandes Slidev
//             slidev_commands: {
//                 preview: `slidev slides_${slidesId}.md`,
//                 export_pdf: `slidev export slides_${slidesId}.md --format pdf`,
//                 export_html: `slidev export slides_${slidesId}.md --format html`
//             },

//             // M√©tadonn√©es
//             generation_time_ms: totalTime,
//             generated_at: new Date().toISOString(),
//             status: 'completed',
//             ready_for_slidev: true
//         };

//         console.log(`‚úÖ Markdown g√©n√©r√©: ${slideCount} slides en ${totalTime}ms`);
//         res.json(result);

//     } catch (error) {
//         const totalTime = Date.now() - startTime;
//         console.error('‚ùå Erreur plan-to-markdown:', error);
//         res.status(500).json({
//             error: 'Erreur g√©n√©ration markdown',
//             generation_time_ms: totalTime,
//             details: error.message
//         });
//     }
// });

// // Fonction pour cr√©er le prompt
// function createMarkdownPrompt(planData) {
//     const { topic, plan_sections, settings } = planData;
//     const { level = 'beginner', duration = 5, style = 'practical' } = settings || {};

//     return `Convertis ce plan en Markdown Slidev parfait:

// PLAN √Ä CONVERTIR:
// Sujet: ${topic}
// Niveau: ${level}
// Dur√©e: ${duration} minutes
// Style: ${style}

// SECTIONS:
// ${plan_sections.map((section, i) =>
//         `${i + 1}. ${section.title} (${section.duration_seconds}s)
//    Type: ${section.type}
//    Points: ${section.what_to_cover ? section.what_to_cover.join(', ') : '√Ä d√©velopper'}
//    R√©sum√©: ${section.content_summary || 'Contenu de la section'}`
//     ).join('\n\n')}

// G√âN√àRE ce Markdown Slidev EXACT:

// ---
// theme: academic
// background: linear-gradient(45deg, #1e3c72, #2a5298)
// class: text-center
// highlighter: shiki
// lineNumbers: false
// info: |
//   ## ${topic}
//   Formation ${duration} minutes - Niveau ${level}
// drawings:
//   persist: false
// transition: slide-left
// title: ${topic}
// ---

// # ${topic}
// ## Formation ${duration} minutes

// <div class="pt-12">
//   <span @click="$slidev.nav.next" class="px-4 py-2 rounded-lg cursor-pointer bg-white/20 hover:bg-white/30 backdrop-blur-sm border border-white/30 text-white font-semibold transition-all">
//     üöÄ Commencer <carbon:arrow-right class="inline ml-2"/>
//   </span>
// </div>

// ${plan_sections.map((section, index) => {
//         if (section.type === 'introduction') {
//             return `
// ---
// layout: intro
// class: text-left
// ---

// # ${section.title}

// ${section.what_to_cover ? section.what_to_cover.map(point => `- ${point}`).join('\n') : '- Introduction au sujet\n- Objectifs de la formation'}

// <div class="mt-8 flex gap-3">
//   <div class="px-3 py-1 rounded-full bg-blue-100 text-blue-800 text-sm">
//     ‚è±Ô∏è ${section.duration_seconds}s
//   </div>
//   <div class="px-3 py-1 rounded-full bg-green-100 text-green-800 text-sm">
//     üìö Introduction
//   </div>
// </div>`;
//         } else if (section.type === 'development') {
//             return `
// ---
// layout: default
// ---

// # ${section.title}

// ${section.what_to_cover ? section.what_to_cover.map((point, i) => `
// ## ${i + 1}. ${point}

// <div class="text-gray-600 text-sm mb-4">Point essentiel √† retenir</div>
// `).join('') : '## Contenu principal\n\n<div class="text-gray-600">Points √† d√©velopper</div>'}

// <div class="mt-8 p-4 bg-blue-50 rounded-lg">
//   <div class="text-blue-800">
//     üí° <strong>R√©sum√©:</strong> ${section.content_summary || 'Points cl√©s de cette section'}
//   </div>
// </div>`;
//         } else if (section.type === 'conclusion') {
//             return `
// ---
// layout: center
// class: text-center
// ---

// # ${section.title}

// ${section.what_to_cover ? section.what_to_cover.map(point => `‚úÖ ${point}`).join('\n\n') : '‚úÖ R√©capitulatif\n\n‚úÖ Prochaines √©tapes'}

// <div class="pt-8">
//   <span class="px-6 py-3 rounded-lg bg-gradient-to-r from-green-400 to-blue-500 text-white font-bold text-lg">
//     üéØ √Ä vous de jouer !
//   </span>
// </div>`;
//         }
//         return '';
//     }).join('')}

// ---
// layout: end
// ---

// # Merci !

// <div class="text-center">
//   <div class="text-6xl mb-4">üéâ</div>
//   <div class="text-2xl">Formation termin√©e</div>
//   <div class="text-lg text-gray-600 mt-2">Dur√©e: ${duration} minutes</div>
// </div>

// G√©n√®re UNIQUEMENT ce Markdown, rien d'autre.`;
// }

// // Nettoyer le markdown re√ßu
// function cleanMarkdown(markdown) {
//     return markdown
//         .replace(/```markdown\n/g, '')
//         .replace(/\n```/g, '')
//         .replace(/```/g, '')
//         .trim();
// }

// // Fallback simple
// function createFallbackMarkdown(planData) {
//     const { topic, plan_sections, settings } = planData;
//     const { level = 'beginner', duration = 5 } = settings || {};

//     return `---
// theme: academic
// background: linear-gradient(45deg, #1e3c72, #2a5298)
// class: text-center
// highlighter: shiki
// title: ${topic}
// ---

// # ${topic}
// ## Formation ${duration} minutes

// <div class="pt-12">
//   <span @click="$slidev.nav.next" class="px-4 py-2 rounded cursor-pointer bg-blue-600 text-white">
//     üöÄ Commencer
//   </span>
// </div>

// ${plan_sections.map(section => `
// ---
// layout: default
// ---

// # ${section.title}

// ${section.what_to_cover ? section.what_to_cover.map(point => `- ${point}`).join('\n') : '- Contenu √† d√©velopper'}

// <div class="mt-4 text-sm text-gray-600">
// ‚è±Ô∏è ${section.duration_seconds}s ‚Ä¢ ${section.type}
// </div>
// `).join('')}

// ---
// layout: end
// ---

// # Merci !

// Formation ${topic} termin√©e üéâ`;
// }

// // Route pour sauvegarder directement
// router.post('/save-markdown-file', async (req, res) => {
//     try {
//         const { markdown, filename } = req.body;

//         if (!markdown) {
//             return res.status(400).json({
//                 error: 'Le champ "markdown" est requis'
//             });
//         }

//         const fs = require('fs').promises;
//         const path = require('path');

//         const slidesDir = path.join(__dirname, '..', '..', 'generated-slides');
//         await fs.mkdir(slidesDir, { recursive: true });

//         const finalFilename = filename || `slides_${Date.now()}.md`;
//         const filepath = path.join(slidesDir, finalFilename);

//         await fs.writeFile(filepath, markdown, 'utf8');

//         res.json({
//             message: 'Fichier sauv√© avec succ√®s',
//             filename: finalFilename,
//             filepath,
//             slidev_command: `cd generated-slides && slidev ${finalFilename}`,
//             next_steps: [
//                 'cd generated-slides',
//                 `slidev ${finalFilename}`,
//                 'Ouvrir http://localhost:3030'
//             ]
//         });

//     } catch (error) {
//         res.status(500).json({
//             error: 'Erreur sauvegarde',
//             details: error.message
//         });
//     }
// });

// // Route d'info
// router.get('/plan-to-markdown/info', (req, res) => {
//     res.json({
//         endpoint: 'POST /ai/plan-to-markdown',
//         description: 'Convertit le JSON de groq-plan en Markdown Slidev',
//         usage: [
//             '1. POST /ai/groq-plan ‚Üí Copier tout le JSON',
//             '2. POST /ai/plan-to-markdown ‚Üí Coller le JSON',
//             '3. R√©cup√©rer le markdown ‚Üí Pr√™t pour Slidev'
//         ],
//         input: 'Tout le JSON retourn√© par /ai/groq-plan',
//         output: {
//             markdown: 'Markdown Slidev complet et fonctionnel',
//             slidev_commands: 'Commandes pour utiliser avec Slidev'
//         },
//         independence: 'APIs compl√®tement ind√©pendantes'
//     });
// });

// module.exports = router;













// // code optimiser qui prend juste l'ia du plan
// // src/apis/plan-to-markdown.js - Convertit DIRECTEMENT plan JSON ‚Üí Markdown Slidev
// const express = require('express');
// const axios = require('axios');
// const { v4: uuidv4 } = require('uuid');

// const router = express.Router();

// // Fonction Groq
// async function callGroq(prompt, options = {}) {
//     try {
//         const response = await axios.post('https://api.groq.com/openai/v1/chat/completions', {
//             model: process.env.GROQ_MODEL || 'llama-3.3-70b-versatile',
//             messages: [
//                 {
//                     role: 'system',
//                     content: 'Tu es un expert Slidev. Tu convertis des plans JSON en Markdown Slidev parfait. R√©ponds UNIQUEMENT avec du Markdown Slidev valide.'
//                 },
//                 {
//                     role: 'user',
//                     content: prompt
//                 }
//             ],
//             temperature: options.temperature || 0.6,
//             max_tokens: options.max_tokens || 3500
//         }, {
//             headers: {
//                 'Authorization': `Bearer ${process.env.GROQ_API_KEY}`,
//                 'Content-Type': 'application/json'
//             }
//         });

//         return response.data.choices[0].message.content;
//     } catch (error) {
//         console.error('‚ùå Erreur Groq plan-to-markdown:', error.message);
//         throw new Error('Erreur g√©n√©ration markdown IA');
//     }
// }

// // API POST /ai/plan-to-markdown - Prend le JSON de groq-plan et g√©n√®re le markdown
// router.post('/plan-to-markdown', async (req, res) => {
//     const startTime = Date.now();

//     try {
//         let groqPlanData;

//         // Option 1: Si juste plan_id est fourni
//         if (req.body.plan_id && !req.body.plan_sections) {
//             console.log(`üîç Recherche du plan avec ID: ${req.body.plan_id}`);

//             // Pour l'instant, utilisons le plan que vous avez fourni comme exemple
//             // TODO: Remplacer par votre vraie logique de r√©cup√©ration
//             if (req.body.plan_id === "b4244725-309d-4454-89b8-f8bb911125ba") {
//                 groqPlanData = {
//                     "plan_id": "b4244725-309d-4454-89b8-f8bb911125ba",
//                     "topic": "Les 3 erreurs Excel √† √©viter",
//                     "capsule_type": "demonstrative",
//                     "settings": {
//                         "level": "beginner",
//                         "duration": 5,
//                         "style": "practical"
//                     },
//                     "plan_sections": [
//                         {
//                             "section_number": 1,
//                             "title": "Introduction",
//                             "type": "introduction",
//                             "duration_seconds": 20,
//                             "what_to_cover": [
//                                 "Pr√©sentation du sujet et de son importance",
//                                 "Accroche pour capter l'attention du public"
//                             ],
//                             "content_summary": "Introduction au sujet des erreurs Excel √† √©viter"
//                         },
//                         {
//                             "section_number": 2,
//                             "title": "D√©veloppement - Partie 1 : Erreur de formule",
//                             "type": "development",
//                             "duration_seconds": 87,
//                             "what_to_cover": [
//                                 "D√©finition d'une formule Excel",
//                                 "Exemple d'erreur de formule et comment la corriger",
//                                 "Conseil pour √©viter les erreurs de formule"
//                             ],
//                             "content_summary": "Explication de l'erreur de formule et comment l'√©viter"
//                         },
//                         {
//                             "section_number": 3,
//                             "title": "D√©veloppement - Partie 2 : Erreur de r√©f√©rence",
//                             "type": "development",
//                             "duration_seconds": 87,
//                             "what_to_cover": [
//                                 "D√©finition d'une r√©f√©rence Excel",
//                                 "Exemple d'erreur de r√©f√©rence et comment la corriger",
//                                 "Conseil pour √©viter les erreurs de r√©f√©rence"
//                             ],
//                             "content_summary": "Explication de l'erreur de r√©f√©rence et comment l'√©viter"
//                         },
//                         {
//                             "section_number": 4,
//                             "title": "D√©veloppement - Partie 3 : Erreur de formatage",
//                             "type": "development",
//                             "duration_seconds": 86,
//                             "what_to_cover": [
//                                 "D√©finition du formatage Excel",
//                                 "Exemple d'erreur de formatage et comment la corriger",
//                                 "Conseil pour √©viter les erreurs de formatage"
//                             ],
//                             "content_summary": "Explication de l'erreur de formatage et comment l'√©viter"
//                         },
//                         {
//                             "section_number": 5,
//                             "title": "Conclusion",
//                             "type": "conclusion",
//                             "duration_seconds": 20,
//                             "what_to_cover": [
//                                 "R√©capitulation des 3 erreurs Excel √† √©viter",
//                                 "Appel √† l'action pour mettre en pratique les conseils"
//                             ],
//                             "content_summary": "Conclusion et appel √† l'action pour les spectateurs"
//                         }
//                     ]
//                 };
//             } else {
//                 return res.status(404).json({
//                     error: 'Plan non trouv√©',
//                     plan_id: req.body.plan_id,
//                     message: 'Ce plan_id n\'existe pas encore (pour test, utilisez: b4244725-309d-4454-89b8-f8bb911125ba)'
//                 });
//             }
//         }
//         // Option 2: Si plan complet fourni (comportement original)
//         else if (req.body.plan_sections && req.body.topic) {
//             groqPlanData = req.body;
//         }
//         // Option 3: Erreur de validation
//         else {
//             return res.status(400).json({
//                 error: 'Param√®tres requis manquants',
//                 options: {
//                     option1: {
//                         description: 'Utiliser plan_id uniquement (recommand√©)',
//                         required: ['plan_id'],
//                         example: { plan_id: 'b4244725-309d-4454-89b8-f8bb911125ba' }
//                     },
//                     option2: {
//                         description: 'Utiliser le plan complet (comportement original)',
//                         required: ['plan_sections', 'topic'],
//                         example: 'Copiez-collez TOUT le r√©sultat de POST /ai/groq-plan'
//                     }
//                 }
//             });
//         }

//         console.log(`üìÑ Conversion plan ‚Üí markdown: ${groqPlanData.topic}`);

//         // Cr√©er le prompt
//         const prompt = createMarkdownPrompt(groqPlanData);

//         // G√©n√©rer avec Groq
//         const markdownResponse = await callGroq(prompt);

//         // Nettoyer le markdown
//         let slideMarkdown = cleanMarkdown(markdownResponse);

//         // Fallback si probl√®me
//         if (!slideMarkdown.includes('---\ntheme:')) {
//             slideMarkdown = createFallbackMarkdown(groqPlanData);
//         }

//         const slidesId = uuidv4();
//         const totalTime = Date.now() - startTime;
//         const slideCount = (slideMarkdown.match(/^---$/gm) || []).length;

//         const result = {
//             slides_id: slidesId,

//             // R√âSULTAT PRINCIPAL
//             markdown: slideMarkdown,

//             // Infos
//             slides_count: slideCount,
//             topic: groqPlanData.topic,
//             source_plan_id: groqPlanData.plan_id,

//             // Fichier
//             filename: `slides_${slidesId}.md`,
//             file_size_kb: Math.round(slideMarkdown.length / 1024),

//             // Commandes Slidev
//             slidev_commands: {
//                 preview: `slidev slides_${slidesId}.md`,
//                 export_pdf: `slidev export slides_${slidesId}.md --format pdf`,
//                 export_html: `slidev export slides_${slidesId}.md --format html`
//             },

//             // M√©tadonn√©es
//             generation_time_ms: totalTime,
//             generated_at: new Date().toISOString(),
//             status: 'completed',
//             ready_for_slidev: true
//         };

//         console.log(`‚úÖ Markdown g√©n√©r√©: ${slideCount} slides en ${totalTime}ms`);
//         res.json(result);

//     } catch (error) {
//         const totalTime = Date.now() - startTime;
//         console.error('‚ùå Erreur plan-to-markdown:', error);
//         res.status(500).json({
//             error: 'Erreur g√©n√©ration markdown',
//             generation_time_ms: totalTime,
//             details: error.message
//         });
//     }
// });

// // Fonction pour cr√©er le prompt
// function createMarkdownPrompt(planData) {
//     const { topic, plan_sections, settings } = planData;
//     const { level = 'beginner', duration = 5, style = 'practical' } = settings || {};

//     return `Convertis ce plan en Markdown Slidev parfait:

// PLAN √Ä CONVERTIR:
// Sujet: ${topic}
// Niveau: ${level}
// Dur√©e: ${duration} minutes
// Style: ${style}

// SECTIONS:
// ${plan_sections.map((section, i) =>
//         `${i + 1}. ${section.title} (${section.duration_seconds}s)
//    Type: ${section.type}
//    Points: ${section.what_to_cover ? section.what_to_cover.join(', ') : '√Ä d√©velopper'}
//    R√©sum√©: ${section.content_summary || 'Contenu de la section'}`
//     ).join('\n\n')}

// G√âN√àRE ce Markdown Slidev EXACT:

// ---
// theme: academic
// background: linear-gradient(45deg, #1e3c72, #2a5298)
// class: text-center
// highlighter: shiki
// lineNumbers: false
// info: |
//   ## ${topic}
//   Formation ${duration} minutes - Niveau ${level}
// drawings:
//   persist: false
// transition: slide-left
// title: ${topic}
// ---

// # ${topic}
// ## Formation ${duration} minutes

// <div class="pt-12">
//   <span @click="$slidev.nav.next" class="px-4 py-2 rounded-lg cursor-pointer bg-white/20 hover:bg-white/30 backdrop-blur-sm border border-white/30 text-white font-semibold transition-all">
//     üöÄ Commencer <carbon:arrow-right class="inline ml-2"/>
//   </span>
// </div>

// ${plan_sections.map((section, index) => {
//         if (section.type === 'introduction') {
//             return `
// ---
// layout: intro
// class: text-left
// ---

// # ${section.title}

// ${section.what_to_cover ? section.what_to_cover.map(point => `- ${point}`).join('\n') : '- Introduction au sujet\n- Objectifs de la formation'}

// <div class="mt-8 flex gap-3">
//   <div class="px-3 py-1 rounded-full bg-blue-100 text-blue-800 text-sm">
//     ‚è±Ô∏è ${section.duration_seconds}s
//   </div>
//   <div class="px-3 py-1 rounded-full bg-green-100 text-green-800 text-sm">
//     üìö Introduction
//   </div>
// </div>`;
//         } else if (section.type === 'development') {
//             return `
// ---
// layout: default
// ---

// # ${section.title}

// ${section.what_to_cover ? section.what_to_cover.map((point, i) => `
// ## ${i + 1}. ${point}

// <div class="text-gray-600 text-sm mb-4">Point essentiel √† retenir</div>
// `).join('') : '## Contenu principal\n\n<div class="text-gray-600">Points √† d√©velopper</div>'}

// <div class="mt-8 p-4 bg-blue-50 rounded-lg">
//   <div class="text-blue-800">
//     üí° <strong>R√©sum√©:</strong> ${section.content_summary || 'Points cl√©s de cette section'}
//   </div>
// </div>`;
//         } else if (section.type === 'conclusion') {
//             return `
// ---
// layout: center
// class: text-center
// ---

// # ${section.title}

// ${section.what_to_cover ? section.what_to_cover.map(point => `‚úÖ ${point}`).join('\n\n') : '‚úÖ R√©capitulatif\n\n‚úÖ Prochaines √©tapes'}

// <div class="pt-8">
//   <span class="px-6 py-3 rounded-lg bg-gradient-to-r from-green-400 to-blue-500 text-white font-bold text-lg">
//     üéØ √Ä vous de jouer !
//   </span>
// </div>`;
//         }
//         return '';
//     }).join('')}

// ---
// layout: end
// ---

// # Merci !

// <div class="text-center">
//   <div class="text-6xl mb-4">üéâ</div>
//   <div class="text-2xl">Formation termin√©e</div>
//   <div class="text-lg text-gray-600 mt-2">Dur√©e: ${duration} minutes</div>
// </div>

// G√©n√®re UNIQUEMENT ce Markdown, rien d'autre.`;
// }

// // Nettoyer le markdown re√ßu
// function cleanMarkdown(markdown) {
//     return markdown
//         .replace(/```markdown\n/g, '')
//         .replace(/\n```/g, '')
//         .replace(/```/g, '')
//         .trim();
// }

// // Fallback simple
// function createFallbackMarkdown(planData) {
//     const { topic, plan_sections, settings } = planData;
//     const { level = 'beginner', duration = 5 } = settings || {};

//     return `---
// theme: academic
// background: linear-gradient(45deg, #1e3c72, #2a5298)
// class: text-center
// highlighter: shiki
// title: ${topic}
// ---

// # ${topic}
// ## Formation ${duration} minutes

// <div class="pt-12">
//   <span @click="$slidev.nav.next" class="px-4 py-2 rounded cursor-pointer bg-blue-600 text-white">
//     üöÄ Commencer
//   </span>
// </div>

// ${plan_sections.map(section => `
// ---
// layout: default
// ---

// # ${section.title}

// ${section.what_to_cover ? section.what_to_cover.map(point => `- ${point}`).join('\n') : '- Contenu √† d√©velopper'}

// <div class="mt-4 text-sm text-gray-600">
// ‚è±Ô∏è ${section.duration_seconds}s ‚Ä¢ ${section.type}
// </div>
// `).join('')}

// ---
// layout: end
// ---

// # Merci !

// Formation ${topic} termin√©e üéâ`;
// }

// // Route pour sauvegarder directement
// router.post('/save-markdown-file', async (req, res) => {
//     try {
//         const { markdown, filename } = req.body;

//         if (!markdown) {
//             return res.status(400).json({
//                 error: 'Le champ "markdown" est requis'
//             });
//         }

//         const fs = require('fs').promises;
//         const path = require('path');

//         const slidesDir = path.join(__dirname, '..', '..', 'generated-slides');
//         await fs.mkdir(slidesDir, { recursive: true });

//         const finalFilename = filename || `slides_${Date.now()}.md`;
//         const filepath = path.join(slidesDir, finalFilename);

//         await fs.writeFile(filepath, markdown, 'utf8');

//         res.json({
//             message: 'Fichier sauv√© avec succ√®s',
//             filename: finalFilename,
//             filepath,
//             slidev_command: `cd generated-slides && slidev ${finalFilename}`,
//             next_steps: [
//                 'cd generated-slides',
//                 `slidev ${finalFilename}`,
//                 'Ouvrir http://localhost:3030'
//             ]
//         });

//     } catch (error) {
//         res.status(500).json({
//             error: 'Erreur sauvegarde',
//             details: error.message
//         });
//     }
// });

// // Route d'info mise √† jour
// router.get('/plan-to-markdown/info', (req, res) => {
//     res.json({
//         endpoint: 'POST /ai/plan-to-markdown',
//         description: 'Convertit un plan en Markdown Slidev',
//         usage_options: {
//             option1: {
//                 description: 'Utiliser plan_id uniquement (recommand√©)',
//                 steps: [
//                     '1. POST /ai/groq-plan ‚Üí Noter le plan_id',
//                     '2. POST /ai/plan-to-markdown avec { "plan_id": "..." }',
//                     '3. R√©cup√©rer le markdown ‚Üí Pr√™t pour Slidev'
//                 ],
//                 input: { plan_id: 'b4244725-309d-4454-89b8-f8bb911125ba' },
//                 advantages: ['Plus simple', 'Moins de donn√©es', 'Plus rapide']
//             },
//             option2: {
//                 description: 'Utiliser le plan complet (comportement original)',
//                 steps: [
//                     '1. POST /ai/groq-plan ‚Üí Copier tout le JSON',
//                     '2. POST /ai/plan-to-markdown ‚Üí Coller le JSON',
//                     '3. R√©cup√©rer le markdown ‚Üí Pr√™t pour Slidev'
//                 ],
//                 input: 'Tout le JSON retourn√© par /ai/groq-plan'
//             }
//         },
//         output: {
//             markdown: 'Markdown Slidev complet et fonctionnel',
//             slidev_commands: 'Commandes pour utiliser avec Slidev'
//         },
//         independence: 'APIs compl√®tement ind√©pendantes'
//     });
// });

// module.exports = router;












// code qui marche meme que le precedent avec script de narration super top sans l'ajout des doc attachments
// src/apis/plan-to-markdown.js - Convertit plan JSON ‚Üí Markdown Slidev + Script de Narration
// const express = require('express');
// const axios = require('axios');
// const { v4: uuidv4 } = require('uuid');

// const router = express.Router();

// // Fonction Groq
// async function callGroq(prompt, options = {}) {
//     try {
//         const response = await axios.post('https://api.groq.com/openai/v1/chat/completions', {
//             model: process.env.GROQ_MODEL || 'llama-3.3-70b-versatile',
//             messages: [
//                 {
//                     role: 'system',
//                     content: options.system_content || 'Tu es un expert Slidev. Tu convertis des plans JSON en Markdown Slidev parfait. R√©ponds UNIQUEMENT avec du Markdown Slidev valide.'
//                 },
//                 {
//                     role: 'user',
//                     content: prompt
//                 }
//             ],
//             temperature: options.temperature || 0.6,
//             max_tokens: options.max_tokens || 3500
//         }, {
//             headers: {
//                 'Authorization': `Bearer ${process.env.GROQ_API_KEY}`,
//                 'Content-Type': 'application/json'
//             }
//         });

//         return response.data.choices[0].message.content;
//     } catch (error) {
//         console.error('‚ùå Erreur Groq:', error.message);
//         throw new Error('Erreur g√©n√©ration IA');
//     }
// }

// // API POST /ai/plan-to-markdown - G√©n√®re Markdown + Script de Narration
// router.post('/plan-to-markdown', async (req, res) => {
//     const startTime = Date.now();

//     try {
//         // Validation
//         if (!req.body.plan_sections || !req.body.topic) {
//             return res.status(400).json({
//                 error: 'Format invalide',
//                 required: ['plan_sections', 'topic'],
//                 format: 'Copiez-collez TOUT le r√©sultat de POST /ai/groq-plan',
//                 example_usage: 'R√©sultat groq-plan ‚Üí Input plan-to-markdown'
//             });
//         }

//         const groqPlanData = req.body;
//         console.log(`üìÑ G√©n√©ration Markdown + Script: ${groqPlanData.topic}`);

//         // 1. G√©n√©rer le Markdown Slidev
//         console.log('üé® G√©n√©ration du Markdown Slidev...');
//         const markdownPrompt = createMarkdownPrompt(groqPlanData);
//         const markdownResponse = await callGroq(markdownPrompt);
//         let slideMarkdown = cleanMarkdown(markdownResponse);

//         // Fallback Markdown si n√©cessaire
//         if (!slideMarkdown.includes('---\ntheme:')) {
//             slideMarkdown = createFallbackMarkdown(groqPlanData);
//         }

//         // 2. G√©n√©rer le Script de Narration
//         console.log('üé¨ G√©n√©ration du script de narration...');
//         const narrationPrompt = createNarrationPrompt(groqPlanData);
//         const narrationResponse = await callGroq(narrationPrompt, {
//             system_content: 'Tu es un expert en narration vid√©o. Tu cr√©es des scripts naturels et engageants pour des capsules vid√©o √©ducatives. R√©ponds UNIQUEMENT avec du JSON valide.',
//             max_tokens: 4000
//         });

//         let narrationScript;
//         try {
//             // Nettoyer et parser le JSON de narration
//             const cleanedNarration = narrationResponse
//                 .replace(/```json\n/g, '')
//                 .replace(/\n```/g, '')
//                 .replace(/```/g, '')
//                 .trim();

//             narrationScript = JSON.parse(cleanedNarration);
//         } catch (parseError) {
//             console.warn('‚ö†Ô∏è Erreur parsing narration, g√©n√©ration fallback...');
//             narrationScript = createFallbackNarration(groqPlanData);
//         }

//         // 3. Pr√©parer la r√©ponse compl√®te
//         const slidesId = uuidv4();
//         const totalTime = Date.now() - startTime;
//         const slideCount = (slideMarkdown.match(/^---$/gm) || []).length;

//         const result = {
//             slides_id: slidesId,

//             // R√âSULTATS PRINCIPAUX
//             markdown: slideMarkdown,
//             narration_script: narrationScript,

//             // Infos g√©n√©rales
//             slides_count: slideCount,
//             topic: groqPlanData.topic,
//             source_plan_id: groqPlanData.plan_id,

//             // Fichiers
//             files: {
//                 markdown: `slides_${slidesId}.md`,
//                 narration: `narration_${slidesId}.json`,
//                 script_txt: `script_${slidesId}.txt`
//             },

//             file_sizes: {
//                 markdown_kb: Math.round(slideMarkdown.length / 1024),
//                 narration_kb: Math.round(JSON.stringify(narrationScript).length / 1024)
//             },

//             // Commandes Slidev
//             slidev_commands: {
//                 preview: `slidev slides_${slidesId}.md`,
//                 export_pdf: `slidev export slides_${slidesId}.md --format pdf`,
//                 export_html: `slidev export slides_${slidesId}.md --format html`
//             },

//             // Utilisation vid√©o
//             video_production: {
//                 total_duration_seconds: groqPlanData.plan_sections.reduce((sum, section) => sum + section.duration_seconds, 0),
//                 slides_with_timing: Object.keys(narrationScript).length,
//                 ready_for_recording: true
//             },

//             // M√©tadonn√©es
//             generation_time_ms: totalTime,
//             generated_at: new Date().toISOString(),
//             status: 'completed',
//             ready_for_production: true
//         };

//         console.log(`‚úÖ G√©n√©ration compl√®te: ${slideCount} slides + script en ${totalTime}ms`);
//         res.json(result);

//     } catch (error) {
//         const totalTime = Date.now() - startTime;
//         console.error('‚ùå Erreur plan-to-markdown:', error);
//         res.status(500).json({
//             error: 'Erreur g√©n√©ration compl√®te',
//             generation_time_ms: totalTime,
//             details: error.message
//         });
//     }
// });

// // Fonction pour cr√©er le prompt Markdown (inchang√©e)
// function createMarkdownPrompt(planData) {
//     const { topic, plan_sections, settings } = planData;
//     const { level = 'beginner', duration = 5, style = 'practical' } = settings || {};

//     return `Convertis ce plan en Markdown Slidev parfait:

// PLAN √Ä CONVERTIR:
// Sujet: ${topic}
// Niveau: ${level}
// Dur√©e: ${duration} minutes
// Style: ${style}

// SECTIONS:
// ${plan_sections.map((section, i) =>
//         `${i + 1}. ${section.title} (${section.duration_seconds}s)
//    Type: ${section.type}
//    Points: ${section.what_to_cover ? section.what_to_cover.join(', ') : '√Ä d√©velopper'}
//    R√©sum√©: ${section.content_summary || 'Contenu de la section'}`
//     ).join('\n\n')}

// G√âN√àRE ce Markdown Slidev EXACT:

// ---
// theme: academic
// background: linear-gradient(45deg, #1e3c72, #2a5298)
// class: text-center
// highlighter: shiki
// lineNumbers: false
// info: |
//   ## ${topic}
//   Formation ${duration} minutes - Niveau ${level}
// drawings:
//   persist: false
// transition: slide-left
// title: ${topic}
// ---

// # ${topic}
// ## Formation ${duration} minutes

// <div class="pt-12">
//   <span @click="$slidev.nav.next" class="px-4 py-2 rounded-lg cursor-pointer bg-white/20 hover:bg-white/30 backdrop-blur-sm border border-white/30 text-white font-semibold transition-all">
//     üöÄ Commencer <carbon:arrow-right class="inline ml-2"/>
//   </span>
// </div>

// ${plan_sections.map((section, index) => {
//         if (section.type === 'introduction') {
//             return `
// ---
// layout: intro
// class: text-left
// ---

// # ${section.title}

// ${section.what_to_cover ? section.what_to_cover.map(point => `- ${point}`).join('\n') : '- Introduction au sujet\n- Objectifs de la formation'}

// <div class="mt-8 flex gap-3">
//   <div class="px-3 py-1 rounded-full bg-blue-100 text-blue-800 text-sm">
//     ‚è±Ô∏è ${section.duration_seconds}s
//   </div>
//   <div class="px-3 py-1 rounded-full bg-green-100 text-green-800 text-sm">
//     üìö Introduction
//   </div>
// </div>`;
//         } else if (section.type === 'development') {
//             return `
// ---
// layout: default
// ---

// # ${section.title}

// ${section.what_to_cover ? section.what_to_cover.map((point, i) => `
// ## ${i + 1}. ${point}

// <div class="text-gray-600 text-sm mb-4">Point essentiel √† retenir</div>
// `).join('') : '## Contenu principal\n\n<div class="text-gray-600">Points √† d√©velopper</div>'}

// <div class="mt-8 p-4 bg-blue-50 rounded-lg">
//   <div class="text-blue-800">
//     üí° <strong>R√©sum√©:</strong> ${section.content_summary || 'Points cl√©s de cette section'}
//   </div>
// </div>`;
//         } else if (section.type === 'conclusion') {
//             return `
// ---
// layout: center
// class: text-center
// ---

// # ${section.title}

// ${section.what_to_cover ? section.what_to_cover.map(point => `‚úÖ ${point}`).join('\n\n') : '‚úÖ R√©capitulatif\n\n‚úÖ Prochaines √©tapes'}

// <div class="pt-8">
//   <span class="px-6 py-3 rounded-lg bg-gradient-to-r from-green-400 to-blue-500 text-white font-bold text-lg">
//     üéØ √Ä vous de jouer !
//   </span>
// </div>`;
//         }
//         return '';
//     }).join('')}

// ---
// layout: end
// ---

// # Merci !

// <div class="text-center">
//   <div class="text-6xl mb-4">üéâ</div>
//   <div class="text-2xl">Formation termin√©e</div>
//   <div class="text-lg text-gray-600 mt-2">Dur√©e: ${duration} minutes</div>
// </div>

// G√©n√®re UNIQUEMENT ce Markdown, rien d'autre.`;
// }

// // NOUVELLE FONCTION pour cr√©er le prompt de narration
// function createNarrationPrompt(planData) {
//     const { topic, plan_sections, settings } = planData;
//     const { level = 'beginner', duration = 5, style = 'practical' } = settings || {};

//     return `Cr√©e un script de narration pour cette capsule vid√©o:

// INFORMATIONS:
// Sujet: ${topic}
// Niveau: ${level}
// Dur√©e totale: ${duration} minutes
// Style: ${style}

// SECTIONS √Ä NARRER:
// ${plan_sections.map((section, i) =>
//         `Slide ${i + 1}: ${section.title}
//    - Dur√©e: ${section.duration_seconds} secondes
//    - Type: ${section.type}
//    - Points √† couvrir: ${section.what_to_cover ? section.what_to_cover.join(', ') : 'Contenu g√©n√©ral'}
//    - R√©sum√©: ${section.content_summary || 'Section importante'}`
//     ).join('\n\n')}

// G√âN√àRE ce JSON de narration EXACT:

// {
//   "slide_1": {
//     "title": "${plan_sections[0]?.title || 'Introduction'}",
//     "duration_seconds": ${plan_sections[0]?.duration_seconds || 20},
//     "script": "Script naturel et engageant pour l'introduction. Ton accueillant et motivant.",
//     "tone": "accueillant",
//     "key_phrases": ["phrase importante 1", "phrase importante 2"],
//     "transitions": "Transition vers la slide suivante"
//   },
// ${plan_sections.slice(1).map((section, index) => `  "slide_${index + 2}": {
//     "title": "${section.title}",
//     "duration_seconds": ${section.duration_seconds},
//     "script": "Script naturel pour ${section.title}. Explique ${section.what_to_cover ? section.what_to_cover[0] : 'le contenu'} de mani√®re claire et p√©dagogique.",
//     "tone": "${section.type === 'introduction' ? 'accueillant' : section.type === 'conclusion' ? 'motivant' : 'p√©dagogique'}",
//     "key_phrases": ["point cl√© 1", "point cl√© 2"],
//     "transitions": "Encha√Ænement naturel vers la suite"
//   }`).join(',\n')}
// }

// R√àGLES pour le script:
// - Ton naturel et conversationnel
// - Phrases courtes et claires
// - √âviter le jargon technique excessif
// - Inclure des transitions fluides
// - Adapter le rythme √† la dur√©e
// - Garder l'attention du spectateur

// G√©n√®re UNIQUEMENT ce JSON, rien d'autre.`;
// }

// // Fonction de nettoyage markdown (inchang√©e)
// function cleanMarkdown(markdown) {
//     return markdown
//         .replace(/```markdown\n/g, '')
//         .replace(/\n```/g, '')
//         .replace(/```/g, '')
//         .trim();
// }

// // Fallback markdown (inchang√©)
// function createFallbackMarkdown(planData) {
//     const { topic, plan_sections, settings } = planData;
//     const { level = 'beginner', duration = 5 } = settings || {};

//     return `---
// theme: academic
// background: linear-gradient(45deg, #1e3c72, #2a5298)
// class: text-center
// highlighter: shiki
// title: ${topic}
// ---

// # ${topic}
// ## Formation ${duration} minutes

// <div class="pt-12">
//   <span @click="$slidev.nav.next" class="px-4 py-2 rounded cursor-pointer bg-blue-600 text-white">
//     üöÄ Commencer
//   </span>
// </div>

// ${plan_sections.map(section => `
// ---
// layout: default
// ---

// # ${section.title}

// ${section.what_to_cover ? section.what_to_cover.map(point => `- ${point}`).join('\n') : '- Contenu √† d√©velopper'}

// <div class="mt-4 text-sm text-gray-600">
// ‚è±Ô∏è ${section.duration_seconds}s ‚Ä¢ ${section.type}
// </div>
// `).join('')}

// ---
// layout: end
// ---

// # Merci !

// Formation ${topic} termin√©e üéâ`;
// }

// // NOUVELLE FONCTION de fallback pour la narration
// function createFallbackNarration(planData) {
//     const { plan_sections } = planData;
//     const narration = {};

//     plan_sections.forEach((section, index) => {
//         const slideKey = `slide_${index + 1}`;
//         let tone = 'p√©dagogique';
//         let defaultScript = `Nous allons maintenant aborder ${section.title}.`;

//         if (section.type === 'introduction') {
//             tone = 'accueillant';
//             defaultScript = `Bonjour et bienvenue dans cette formation sur ${section.title}.`;
//         } else if (section.type === 'conclusion') {
//             tone = 'motivant';
//             defaultScript = `Pour conclure, retenez bien les points que nous venons de voir.`;
//         }

//         narration[slideKey] = {
//             title: section.title,
//             duration_seconds: section.duration_seconds,
//             script: defaultScript,
//             tone: tone,
//             key_phrases: section.what_to_cover ? section.what_to_cover.slice(0, 2) : ["Point important"],
//             transitions: "Passons maintenant √† la suite."
//         };
//     });

//     return narration;
// }

// // Route pour sauvegarder les fichiers (mise √† jour)
// router.post('/save-files', async (req, res) => {
//     try {
//         const { markdown, narration_script, slides_id } = req.body;

//         if (!markdown) {
//             return res.status(400).json({
//                 error: 'Le champ "markdown" est requis'
//             });
//         }

//         const fs = require('fs').promises;
//         const path = require('path');

//         const slidesDir = path.join(__dirname, '..', '..', 'generated-slides');
//         await fs.mkdir(slidesDir, { recursive: true });

//         const baseFilename = slides_id || `slides_${Date.now()}`;

//         // Sauvegarder le markdown
//         const markdownFile = `${baseFilename}.md`;
//         const markdownPath = path.join(slidesDir, markdownFile);
//         await fs.writeFile(markdownPath, markdown, 'utf8');

//         const savedFiles = [markdownFile];

//         // Sauvegarder le script de narration si fourni
//         if (narration_script) {
//             const narrationFile = `narration_${baseFilename}.json`;
//             const narrationPath = path.join(slidesDir, narrationFile);
//             await fs.writeFile(narrationPath, JSON.stringify(narration_script, null, 2), 'utf8');
//             savedFiles.push(narrationFile);

//             // Cr√©er aussi un fichier texte simple du script
//             const scriptText = Object.entries(narration_script)
//                 .map(([slide, data]) => `=== ${data.title} (${data.duration_seconds}s) ===\n${data.script}\n`)
//                 .join('\n');

//             const scriptFile = `script_${baseFilename}.txt`;
//             const scriptPath = path.join(slidesDir, scriptFile);
//             await fs.writeFile(scriptPath, scriptText, 'utf8');
//             savedFiles.push(scriptFile);
//         }

//         res.json({
//             message: 'Fichiers sauv√©s avec succ√®s',
//             saved_files: savedFiles,
//             directory: slidesDir,
//             slidev_command: `cd generated-slides && slidev ${markdownFile}`,
//             next_steps: [
//                 'cd generated-slides',
//                 `slidev ${markdownFile}`,
//                 'Ouvrir http://localhost:3030',
//                 'Utiliser le script de narration pour l\'enregistrement'
//             ]
//         });

//     } catch (error) {
//         res.status(500).json({
//             error: 'Erreur sauvegarde',
//             details: error.message
//         });
//     }
// });

// // Route d'info mise √† jour
// router.get('/plan-to-markdown/info', (req, res) => {
//     res.json({
//         endpoint: 'POST /ai/plan-to-markdown',
//         description: 'Convertit le JSON de groq-plan en Markdown Slidev + Script de Narration',
//         new_features: [
//             '‚ú® G√©n√©ration automatique du script de narration',
//             'üé¨ Script synchronis√© avec chaque slide',
//             '‚è±Ô∏è Timing pr√©cis pour la production vid√©o',
//             'üìù Export en plusieurs formats (JSON, TXT)'
//         ],
//         usage: [
//             '1. POST /ai/groq-plan ‚Üí Copier tout le JSON',
//             '2. POST /ai/plan-to-markdown ‚Üí Coller le JSON',
//             '3. R√©cup√©rer markdown + script ‚Üí Pr√™t pour production vid√©o'
//         ],
//         input: 'Tout le JSON retourn√© par /ai/groq-plan',
//         output: {
//             markdown: 'Markdown Slidev complet et fonctionnel',
//             narration_script: 'Script de narration par slide avec timing',
//             files: 'Noms des fichiers g√©n√©r√©s',
//             video_production: 'Informations pour la production vid√©o'
//         },
//         video_workflow: [
//             '1. Utiliser le markdown pour cr√©er les slides',
//             '2. Lire le script de narration slide par slide',
//             '3. Respecter les timings indiqu√©s',
//             '4. Enregistrer la capsule vid√©o compl√®te'
//         ]
//     });
// });

// module.exports = router;















// avec doc attachments
// groq-fast-plan.js - VERSION COMPL√àTE CORRIG√âE avec un petit soucis avec nombre de slides et nombre de sections dans script de narration
// R√©sout tous les probl√®mes d'upload de fichiers et d'ajout de ressources
// plan-to-markdown.js - VERSION PROPRE ET COMPL√àTE
// Utilise intelligemment les ressources des fichiers pour enrichir le markdown

// const express = require('express');
// const axios = require('axios');
// const { v4: uuidv4 } = require('uuid');
// const fs = require('fs').promises;
// const path = require('path');

// const router = express.Router();

// // ü§ñ Fonction Groq pour g√©n√©ration intelligente
// async function callGroq(prompt, options = {}) {
//     try {
//         const response = await axios.post('https://api.groq.com/openai/v1/chat/completions', {
//             model: process.env.GROQ_MODEL || 'llama-3.3-70b-versatile',
//             messages: [
//                 {
//                     role: 'system',
//                     content: options.system_content || 'Tu es un expert Slidev qui cr√©e du Markdown sophistiqu√© en utilisant intelligemment les ressources fournies. R√©ponds UNIQUEMENT avec du Markdown Slidev valide.'
//                 },
//                 {
//                     role: 'user',
//                     content: prompt
//                 }
//             ],
//             temperature: options.temperature || 0.7,
//             max_tokens: options.max_tokens || 5000
//         }, {
//             headers: {
//                 'Authorization': `Bearer ${process.env.GROQ_API_KEY}`,
//                 'Content-Type': 'application/json'
//             }
//         });

//         return response.data.choices[0].message.content;
//     } catch (error) {
//         console.error('‚ùå Erreur Groq:', error.message);
//         throw new Error('Erreur g√©n√©ration IA: ' + error.message);
//     }
// }

// // üéØ API PRINCIPALE - POST /ai/plan-to-markdown
// router.post('/plan-to-markdown', async (req, res) => {
//     const startTime = Date.now();

//     try {
//         // Validation de base
//         if (!req.body.plan_sections || !req.body.topic) {
//             return res.status(400).json({
//                 error: 'Format invalide',
//                 required: ['plan_sections', 'topic'],
//                 format: 'Utilisez TOUT le r√©sultat de POST /ai/groq-plan'
//             });
//         }

//         const groqPlanData = req.body;
//         console.log(`üìÑ G√©n√©ration Markdown enrichi: ${groqPlanData.topic}`);

//         // üîç ANALYSE DES RESSOURCES DISPONIBLES
//         const resourcesAnalysis = analyzeAvailableResources(groqPlanData);
//         console.log(`üìö Ressources d√©tect√©es: ${resourcesAnalysis.total_files} fichiers, vocabulaire: ${resourcesAnalysis.vocabulary_adapted}`);

//         // üé® G√âN√âRATION MARKDOWN ENRICHI
//         console.log('üé® G√©n√©ration Markdown Slidev enrichi...');
//         const markdownPrompt = createEnhancedMarkdownPrompt(groqPlanData, resourcesAnalysis);
//         const markdownResponse = await callGroq(markdownPrompt, {
//             temperature: 0.7,
//             max_tokens: 6000
//         });

//         let slideMarkdown = cleanMarkdown(markdownResponse);

//         // Fallback si n√©cessaire
//         if (!slideMarkdown.includes('---\ntheme:')) {
//             console.log('üîÑ G√©n√©ration fallback...');
//             slideMarkdown = createFallbackMarkdown(groqPlanData, resourcesAnalysis);
//         }

//         // üé¨ G√âN√âRATION SCRIPT DE NARRATION
//         console.log('üé¨ G√©n√©ration script narration...');
//         const narrationPrompt = createNarrationPrompt(groqPlanData, resourcesAnalysis);
//         const narrationResponse = await callGroq(narrationPrompt, {
//             system_content: 'Tu es un expert en narration qui adapte le discours aux ressources. R√©ponds UNIQUEMENT avec du JSON valide.',
//             max_tokens: 5000
//         });

//         let narrationScript;
//         try {
//             const cleanedNarration = cleanNarrationResponse(narrationResponse);
//             narrationScript = JSON.parse(cleanedNarration);
//         } catch (parseError) {
//             console.warn('‚ö†Ô∏è Erreur parsing narration, fallback...');
//             narrationScript = createFallbackNarration(groqPlanData, resourcesAnalysis);
//         }

//         // üèóÔ∏è ASSEMBLAGE FINAL
//         const slidesId = uuidv4();
//         const totalTime = Date.now() - startTime;
//         const slideCount = (slideMarkdown.match(/^---$/gm) || []).length;

//         const result = {
//             slides_id: slidesId,

//             // R√âSULTATS PRINCIPAUX (Compatible format existant)
//             markdown: slideMarkdown,
//             narration_script: narrationScript,

//             // INFORMATIONS RESSOURCES
//             resource_integration: {
//                 files_used_in_markdown: resourcesAnalysis.files_content_integrated,
//                 company_context_applied: resourcesAnalysis.company_context_integrated,
//                 vocabulary_adapted: resourcesAnalysis.vocabulary_adapted,
//                 examples_from_files: resourcesAnalysis.extracted_examples,
//                 procedures_integrated: resourcesAnalysis.procedures_integrated,
//                 terminology_used: resourcesAnalysis.key_terminology
//             },

//             // COMPATIBILIT√â AVEC FORMAT EXISTANT
//             slides_count: slideCount,
//             topic: groqPlanData.topic,
//             source_plan_id: groqPlanData.plan_id,

//             files: {
//                 markdown: `resource_slides_${slidesId}.md`,
//                 narration: `narration_${slidesId}.json`,
//                 script_txt: `script_${slidesId}.txt`
//             },

//             file_sizes: {
//                 markdown_kb: Math.round(slideMarkdown.length / 1024),
//                 narration_kb: Math.round(JSON.stringify(narrationScript).length / 1024)
//             },

//             slidev_commands: {
//                 preview: `slidev resource_slides_${slidesId}.md`,
//                 export_pdf: `slidev export resource_slides_${slidesId}.md --format pdf`,
//                 export_html: `slidev export resource_slides_${slidesId}.md --format html`
//             },

//             video_production: {
//                 total_duration_seconds: groqPlanData.plan_sections?.reduce((sum, section) => sum + section.duration_seconds, 0) || 300,
//                 slides_with_timing: Object.keys(narrationScript).length,
//                 ready_for_recording: true,
//                 uses_company_terminology: resourcesAnalysis.vocabulary_adapted,
//                 references_uploaded_files: resourcesAnalysis.files_content_integrated
//             },

//             generation_time_ms: totalTime,
//             generated_at: new Date().toISOString(),
//             status: 'completed',
//             ready_for_production: true,

//             next_steps: {
//                 audio_generation: 'POST /ai/generate-narration-bark avec script adapt√©',
//                 customization: resourcesAnalysis.company_context_integrated ?
//                     'Contenu d√©j√† adapt√© √† votre contexte' :
//                     'Personnaliser selon votre contexte'
//             }
//         };

//         console.log(`‚úÖ G√©n√©ration compl√®te: ${slideCount} slides, ${resourcesAnalysis.total_files} fichiers int√©gr√©s, ${totalTime}ms`);
//         res.json(result);

//     } catch (error) {
//         const totalTime = Date.now() - startTime;
//         console.error('‚ùå Erreur plan-to-markdown:', error);
//         res.status(500).json({
//             error: 'Erreur g√©n√©ration markdown',
//             generation_time_ms: totalTime,
//             details: error.message
//         });
//     }
// });

// // üîç ANALYSE DES RESSOURCES DISPONIBLES
// function analyzeAvailableResources(groqPlanData) {
//     const analysis = {
//         total_files: 0,
//         files_content_integrated: false,
//         company_context_integrated: false,
//         vocabulary_adapted: false,
//         procedures_integrated: false,
//         examples_extracted: false,
//         key_terminology: [],
//         extracted_examples: [],
//         file_references: [],
//         adaptation_quality: 'basic'
//     };

//     // Analyser les fichiers trait√©s
//     if (groqPlanData.files_processing) {
//         analysis.total_files = groqPlanData.files_processing.processed_successfully || 0;
//         analysis.files_content_integrated = analysis.total_files > 0;

//         if (groqPlanData.files_processing.processed_files) {
//             groqPlanData.files_processing.processed_files.forEach(file => {
//                 if (file.status === 'parsed') {
//                     analysis.file_references.push({
//                         name: file.name,
//                         type: file.content_type,
//                         topics: file.key_topics
//                     });

//                     if (file.has_procedures) analysis.procedures_integrated = true;
//                     if (file.has_examples) analysis.examples_extracted = true;
//                     if (file.key_topics) analysis.key_terminology.push(...file.key_topics);
//                 }
//             });
//         }
//     }

//     // Analyser l'enrichissement
//     if (groqPlanData.resources_enrichment) {
//         analysis.company_context_integrated = groqPlanData.resources_enrichment.has_company_context;
//         analysis.vocabulary_adapted = groqPlanData.resources_enrichment.adaptation_applied?.vocabulary_adapted || false;
//     }

//     // Extraire des sections du plan
//     if (groqPlanData.plan_sections) {
//         groqPlanData.plan_sections.forEach(section => {
//             if (section.enhanced_with_resources) {
//                 if (section.key_terminology) {
//                     analysis.key_terminology.push(...section.key_terminology);
//                 }
//                 if (section.examples_from_resources) {
//                     analysis.extracted_examples.push(...section.examples_from_resources);
//                 }
//             }
//         });
//     }

//     // D√©duplication
//     analysis.key_terminology = [...new Set(analysis.key_terminology.flat())].slice(0, 10);
//     analysis.extracted_examples = [...new Set(analysis.extracted_examples.flat())].slice(0, 8);

//     // Calcul qualit√©
//     if (analysis.files_content_integrated && analysis.vocabulary_adapted && analysis.company_context_integrated) {
//         analysis.adaptation_quality = 'excellent';
//     } else if (analysis.files_content_integrated || analysis.vocabulary_adapted) {
//         analysis.adaptation_quality = 'good';
//     }

//     return analysis;
// }

// // üé® CR√âATION PROMPT MARKDOWN ENRICHI
// function createEnhancedMarkdownPrompt(planData, resourcesAnalysis) {
//     const { topic, plan_sections, settings } = planData;
//     const { level = 'beginner', duration = 5, style = 'practical' } = settings || {};

//     let prompt = `Cr√©e un Markdown Slidev sophistiqu√© qui utilise les ressources fournies:

// INFORMATIONS:
// - Sujet: ${topic}
// - Niveau: ${level}
// - Dur√©e: ${duration} minutes
// - Style: ${style}

// RESSOURCES DISPONIBLES:
// - Fichiers trait√©s: ${resourcesAnalysis.total_files}
// - Contexte entreprise: ${resourcesAnalysis.company_context_integrated ? 'OUI' : 'NON'}
// - Vocabulaire adapt√©: ${resourcesAnalysis.vocabulary_adapted ? 'OUI' : 'NON'}
// - Proc√©dures: ${resourcesAnalysis.procedures_integrated ? 'OUI' : 'NON'}
// - Exemples: ${resourcesAnalysis.examples_extracted ? 'OUI' : 'NON'}`;

//     if (resourcesAnalysis.key_terminology.length > 0) {
//         prompt += `\n\nTERMINOLOGIE √Ä UTILISER:\n${resourcesAnalysis.key_terminology.join(', ')}`;
//     }

//     if (resourcesAnalysis.extracted_examples.length > 0) {
//         prompt += `\n\nEXEMPLES √Ä INT√âGRER:\n${resourcesAnalysis.extracted_examples.map((ex, i) => `${i + 1}. ${ex}`).join('\n')}`;
//     }

//     if (resourcesAnalysis.file_references.length > 0) {
//         prompt += `\n\nFICHIERS √Ä R√âF√âRENCER:\n${resourcesAnalysis.file_references.map(ref => `- ${ref.name}: ${ref.type}`).join('\n')}`;
//     }

//     prompt += `\n\nSECTIONS DU PLAN:\n${plan_sections.map((section, i) => {
//         return `${i + 1}. ${section.title} (${section.duration_seconds}s)\n   Points: ${section.what_to_cover ? section.what_to_cover.join(', ') : '√Ä d√©velopper'}`;
//     }).join('\n\n')}`;

//     prompt += `\n\nG√âN√àRE un Markdown Slidev enrichi avec int√©gration des ressources:

// ---
// theme: ${resourcesAnalysis.company_context_integrated ? 'corporate' : 'academic'}
// background: linear-gradient(135deg, #667eea 0%, #764ba2 100%)
// class: text-center
// highlighter: shiki
// lineNumbers: true
// title: ${topic}
// ---

// # ${topic}
// ## Formation ${duration} minutes${resourcesAnalysis.company_context_integrated ? ' - Adapt√©e √† votre contexte' : ''}

// ${resourcesAnalysis.files_content_integrated ? `
// <div class="opacity-80 text-sm mt-4 bg-blue-50 dark:bg-blue-900/20 p-3 rounded-lg">
//   üìö Formation enrichie par ${resourcesAnalysis.total_files} document(s)
// </div>
// ` : ''}

// <div class="pt-8">
//   <span @click="$slidev.nav.next" class="px-6 py-3 rounded-lg cursor-pointer bg-gradient-to-r from-blue-500 to-purple-600 text-white font-semibold">
//     üöÄ Commencer
//   </span>
// </div>

// ${plan_sections.map((section, index) => {
//         if (section.type === 'introduction') {
//             return `
// ---
// layout: intro
// ---

// # ${section.title}

// ${section.what_to_cover ? section.what_to_cover.map(point => `- **${point}**`).join('\n') : '- Introduction au sujet'}

// ${section.enhanced_with_resources && resourcesAnalysis.extracted_examples.length > 0 ? `
// <div class="mt-6 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
//   <h3 class="text-lg font-semibold mb-3 text-blue-700 dark:text-blue-300">
//     üí° Bas√© sur vos ressources
//   </h3>
//   <div class="text-sm space-y-2">
// ${resourcesAnalysis.extracted_examples.slice(0, 2).map(example => `    <div>‚Ä¢ ${example}</div>`).join('\n')}
//   </div>
// </div>
// ` : ''}

// <div class="mt-6">
//   <div class="px-4 py-2 rounded-full bg-blue-100 text-blue-800 text-sm inline-block">
//     ‚è±Ô∏è ${section.duration_seconds}s
//   </div>
// </div>`;

//         } else if (section.type === 'development') {
//             return `
// ---
// layout: two-cols
// ---

// # ${section.title}

// <template v-slot:default>

// ${section.what_to_cover ? section.what_to_cover.map((point, i) => `
// ## ${i + 1}. ${point}

// ${section.enhanced_with_resources ? `
// <div class="text-sm text-blue-600 mb-4 bg-blue-50 p-2 rounded">
//   üí° Point enrichi par vos documents
// </div>
// ` : `
// <div class="text-gray-600 text-sm mb-4">
//   Point essentiel √† retenir
// </div>
// `}
// `).join('') : '## Contenu principal'}

// </template>

// <template v-slot:right>

// ${section.enhanced_with_resources && resourcesAnalysis.extracted_examples.length > 0 ? `
// <div class="bg-green-50 p-6 rounded-xl h-full">
//   <h3 class="text-lg font-semibold mb-4 text-green-700">
//     üìã Exemples de vos documents
//   </h3>
//   <div class="space-y-3">
// ${resourcesAnalysis.extracted_examples.slice(0, 3).map(example => `    <div class="bg-white p-3 rounded-lg">
//       <div class="text-sm">${example}</div>
//     </div>`).join('\n')}
//   </div>
// </div>
// ` : `
// <div class="bg-orange-50 p-6 rounded-xl h-full">
//   <h3 class="text-lg font-semibold mb-2">Points Cl√©s</h3>
//   <div class="text-sm">${section.content_summary || 'Contenu adapt√©'}</div>
// </div>
// `}

// </template>

// <div class="mt-8 p-4 bg-blue-50 rounded-lg">
//   <div class="font-semibold">R√©sum√©</div>
//   <div class="text-sm mt-1">${section.content_summary || 'Points cl√©s de cette section'}</div>
// </div>`;

//         } else if (section.type === 'conclusion') {
//             return `
// ---
// layout: center
// class: text-center
// ---

// # ${section.title}

// <div class="max-w-4xl mx-auto">
//   <div class="grid grid-cols-1 md:grid-cols-${section.what_to_cover ? Math.min(section.what_to_cover.length, 3) : 2} gap-6 mb-8">
// ${section.what_to_cover ? section.what_to_cover.map(point => `    <div class="bg-green-50 p-6 rounded-xl">
//       <div class="text-3xl mb-3">‚úÖ</div>
//       <div class="font-semibold text-green-700">${point}</div>
//     </div>`).join('\n') : `    <div class="bg-green-50 p-6 rounded-xl">
//       <div class="text-4xl mb-3">‚úÖ</div>
//       <div class="font-semibold">R√©capitulatif</div>
//     </div>
//     <div class="bg-blue-50 p-6 rounded-xl">
//       <div class="text-4xl mb-3">üöÄ</div>
//       <div class="font-semibold">Prochaines √âtapes</div>
//     </div>`}
//   </div>

//   ${section.enhanced_with_resources ? `
//   <div class="bg-purple-100 p-6 rounded-xl mb-8">
//     <h3 class="text-xl font-semibold mb-4 text-purple-700">
//       üéØ Applications dans votre contexte
//     </h3>
//     <div class="text-sm text-purple-600">
//       Cette formation a √©t√© adapt√©e √† vos ressources.
//     </div>
//   </div>
//   ` : ''}

//   <div class="pt-8">
//     <span class="px-8 py-4 rounded-xl bg-gradient-to-r from-green-400 to-blue-500 text-white font-bold text-xl">
//       üéâ Formation Termin√©e !
//     </span>
//   </div>
// </div>`;
//         }
//         return '';
//     }).join('')}

// ---
// layout: end
// ---

// # Merci !

// <div class="text-center">
//   <div class="text-6xl mb-4">üéâ</div>
//   <div class="text-2xl">Formation ${topic} termin√©e</div>
//   ${resourcesAnalysis.files_content_integrated ? `
//   <div class="text-lg text-blue-600 mt-2">
//     üìö Avec ${resourcesAnalysis.total_files} document(s) int√©gr√©(s)
//   </div>
//   ` : `
//   <div class="text-lg text-gray-600 mt-2">Dur√©e: ${duration} minutes</div>
//   `}
// </div>

// G√©n√®re UNIQUEMENT ce Markdown, rien d'autre.`;

//     return prompt;
// }

// // üé¨ CR√âATION PROMPT NARRATION
// function createNarrationPrompt(planData, resourcesAnalysis) {
//     const { topic, plan_sections, settings } = planData;
//     const { level = 'beginner', duration = 5 } = settings || {};

//     let prompt = `Cr√©e un script de narration adapt√© aux ressources:

// FORMATION:
// - Sujet: ${topic}
// - Niveau: ${level}
// - Dur√©e: ${duration} minutes

// ADAPTATION RESSOURCES:
// - Fichiers: ${resourcesAnalysis.total_files}
// - Vocabulaire adapt√©: ${resourcesAnalysis.vocabulary_adapted ? 'OUI' : 'NON'}
// - Exemples sp√©cifiques: ${resourcesAnalysis.examples_extracted ? 'OUI' : 'NON'}`;

//     if (resourcesAnalysis.key_terminology.length > 0) {
//         prompt += `\n\nTERMINOLOGIE √Ä UTILISER: ${resourcesAnalysis.key_terminology.join(', ')}`;
//     }

//     prompt += `\n\nSECTIONS:\n${plan_sections.map((section, i) =>
//         `Slide ${i + 1}: ${section.title} (${section.duration_seconds}s)`
//     ).join('\n')}`;

//     prompt += `\n\nG√âN√àRE ce JSON de narration:

// {
// ${plan_sections.map((section, index) => {
//         const slideKey = `slide_${index + 1}`;
//         let tone = 'p√©dagogique';
//         let scriptNote = `Script pour ${section.title}`;

//         if (section.type === 'introduction') {
//             tone = 'accueillant';
//             scriptNote = resourcesAnalysis.files_content_integrated ?
//                 'Accueil mentionnant les documents fournis' : 'Accueil standard';
//         } else if (section.type === 'conclusion') {
//             tone = 'motivant';
//         }

//         return `  "${slideKey}": {
//     "title": "${section.title}",
//     "duration_seconds": ${section.duration_seconds},
//     "script": "${scriptNote}. ${resourcesAnalysis.vocabulary_adapted ? 'Utiliser la terminologie sp√©cialis√©e.' : ''} ${resourcesAnalysis.examples_extracted ? 'Mentionner les exemples des documents.' : ''}",
//     "tone": "${tone}",
//     "key_phrases": ${resourcesAnalysis.key_terminology.length > 0 ? JSON.stringify(resourcesAnalysis.key_terminology.slice(0, 3)) : '["point important"]'},
//     "uses_resources": ${resourcesAnalysis.files_content_integrated}
//   }`;
//     }).join(',\n')}
// }

// R√àGLES:
// - Ton naturel et ${resourcesAnalysis.company_context_integrated ? 'professionnel' : 'conversationnel'}
// - ${resourcesAnalysis.vocabulary_adapted ? 'Utiliser OBLIGATOIREMENT la terminologie fournie' : 'Langage accessible'}
// - ${resourcesAnalysis.examples_extracted ? 'Int√©grer les exemples des documents' : 'Exemples g√©n√©riques'}

// G√©n√®re UNIQUEMENT ce JSON, rien d'autre.`;

//     return prompt;
// }

// // üîß FONCTIONS UTILITAIRES

// function cleanMarkdown(markdown) {
//     return markdown
//         .replace(/```markdown\n/g, '')
//         .replace(/\n```/g, '')
//         .replace(/```/g, '')
//         .trim();
// }

// function cleanNarrationResponse(response) {
//     return response
//         .replace(/```json\n/g, '')
//         .replace(/\n```/g, '')
//         .replace(/```/g, '')
//         .replace(/^[^{]*/, '')
//         .replace(/[^}]*$/, '')
//         .trim();
// }

// function createFallbackMarkdown(planData, resourcesAnalysis) {
//     const { topic, plan_sections, settings } = planData;
//     const { duration = 5 } = settings || {};

//     return `---
// theme: academic
// background: linear-gradient(45deg, #1e3c72, #2a5298)
// class: text-center
// title: ${topic}
// ---

// # ${topic}
// ## Formation ${duration} minutes

// ${resourcesAnalysis.files_content_integrated ? `
// <div class="text-sm mt-4 bg-blue-50 p-3 rounded">
//   üìö Formation enrichie par ${resourcesAnalysis.total_files} document(s)
// </div>
// ` : ''}

// <div class="pt-12">
//   <span @click="$slidev.nav.next" class="px-6 py-3 rounded-lg cursor-pointer bg-blue-600 text-white">
//     üöÄ Commencer
//   </span>
// </div>

// ${plan_sections.map(section => `
// ---
// layout: default
// ---

// # ${section.title}

// ${section.what_to_cover ? section.what_to_cover.map(point => `- ${point}`).join('\n') : '- Contenu √† d√©velopper'}

// ${section.enhanced_with_resources ? `
// <div class="mt-6 p-4 bg-blue-50 rounded-lg">
//   üí° <strong>Adapt√© √† vos ressources:</strong> ${section.content_summary || 'Contenu personnalis√©'}
// </div>
// ` : `
// <div class="mt-4 text-sm text-gray-600">
// ‚è±Ô∏è ${section.duration_seconds}s ‚Ä¢ ${section.type}
// </div>
// `}
// `).join('')}

// ---
// layout: end
// ---

// # Merci !

// Formation ${topic} termin√©e üéâ`;
// }

// function createFallbackNarration(planData, resourcesAnalysis) {
//     const { plan_sections } = planData;
//     const narration = {};

//     plan_sections.forEach((section, index) => {
//         const slideKey = `slide_${index + 1}`;
//         let tone = 'p√©dagogique';
//         let script = `Nous allons maintenant aborder ${section.title}.`;

//         if (section.type === 'introduction') {
//             tone = 'accueillant';
//             script = resourcesAnalysis.files_content_integrated ?
//                 `Bonjour et bienvenue dans cette formation sur ${section.title}, adapt√©e √† vos documents.` :
//                 `Bonjour et bienvenue dans cette formation sur ${section.title}.`;
//         } else if (section.type === 'conclusion') {
//             tone = 'motivant';
//             script = 'Pour conclure, retenez bien les points que nous venons de voir.';
//         }

//         narration[slideKey] = {
//             title: section.title,
//             duration_seconds: section.duration_seconds,
//             script: script,
//             tone: tone,
//             key_phrases: resourcesAnalysis.key_terminology.slice(0, 2) || ["Point important"],
//             uses_resources: resourcesAnalysis.files_content_integrated
//         };
//     });

//     return narration;
// }

// // üîß ROUTE SAUVEGARDE
// router.post('/save-files', async (req, res) => {
//     try {
//         const { markdown, narration_script, slides_id } = req.body;

//         if (!markdown) {
//             return res.status(400).json({
//                 error: 'Le champ "markdown" est requis'
//             });
//         }

//         const slidesDir = path.join(__dirname, '..', '..', 'generated-slides');
//         await fs.mkdir(slidesDir, { recursive: true });

//         const baseFilename = slides_id || `resource_slides_${Date.now()}`;
//         const savedFiles = [];

//         // Sauvegarder markdown
//         const markdownFile = `${baseFilename}.md`;
//         const markdownPath = path.join(slidesDir, markdownFile);
//         await fs.writeFile(markdownPath, markdown, 'utf8');
//         savedFiles.push(markdownFile);

//         // Sauvegarder script narration
//         if (narration_script) {
//             const narrationFile = `narration_${baseFilename}.json`;
//             const narrationPath = path.join(slidesDir, narrationFile);
//             await fs.writeFile(narrationPath, JSON.stringify(narration_script, null, 2), 'utf8');
//             savedFiles.push(narrationFile);

//             // Script texte
//             const scriptText = Object.entries(narration_script)
//                 .map(([slide, data]) => `=== ${data.title} (${data.duration_seconds}s) ===\n${data.script}\n`)
//                 .join('\n');

//             const scriptFile = `script_${baseFilename}.txt`;
//             const scriptPath = path.join(slidesDir, scriptFile);
//             await fs.writeFile(scriptPath, scriptText, 'utf8');
//             savedFiles.push(scriptFile);
//         }

//         res.json({
//             message: 'Fichiers sauv√©s avec succ√®s',
//             saved_files: savedFiles,
//             directory: slidesDir,
//             slidev_command: `cd generated-slides && slidev ${markdownFile}`
//         });

//     } catch (error) {
//         res.status(500).json({
//             error: 'Erreur sauvegarde',
//             details: error.message
//         });
//     }
// });

// // üîß ROUTE INFO
// router.get('/plan-to-markdown/info', (req, res) => {
//     res.json({
//         endpoint: 'POST /ai/plan-to-markdown',
//         description: 'Convertit le plan en Markdown Slidev enrichi avec utilisation intelligente des ressources',
//         version: '4.0 - Resource Integration',
//         status: '‚úÖ OP√âRATIONNEL',

//         fonctionnalit√©s: [
//             'üìö Utilisation intelligente des fichiers upload√©s',
//             'üé¨ Scripts de narration adapt√©s au vocabulaire',
//             'üè¢ Adaptation automatique au contexte entreprise',
//             'üîë Int√©gration terminologie sp√©cifique',
//             'üí° Exemples personnalis√©s des documents'
//         ],

//         workflow: [
//             '1. POST /ai/groq-plan (avec ressources/fichiers)',
//             '2. POST /ai/plan-to-markdown (utilise automatiquement les ressources)',
//             '3. Markdown enrichi + script adapt√©',
//             '4. POST /ai/generate-narration-bark (audio adapt√©)'
//         ],

//         compatibilit√©: {
//             format_entr√©e: 'Compatible avec tous les plans de groq-plan',
//             format_sortie: 'Compatible avec ancien format + enrichissements',
//             r√©trocompatible: 'Fonctionne avec plans sans ressources'
//         },

//         exemples_int√©gration: {
//             fichier_excel: 'Guide Excel ‚Üí terminologie VLOOKUP, TCD dans slides',
//             proc√©dures: 'Proc√©dures d√©tect√©es ‚Üí r√©f√©rences dans markdown',
//             contexte_entreprise: 'Contexte fourni ‚Üí adaptation ton professionnel',
//             exemples_sp√©cifiques: 'Exemples extraits ‚Üí int√©gration dans slides'
//         }
//     });
// });

// module.exports = router;















// code qui marche mais avec le mapping √† ameliorer

// const express = require('express');
// const axios = require('axios');
// const { v4: uuidv4 } = require('uuid');
// const fs = require('fs').promises;
// const path = require('path');

// const router = express.Router();

// // ü§ñ Fonction Groq pour g√©n√©ration intelligente
// async function callGroq(prompt, options = {}) {
//     try {
//         const response = await axios.post('https://api.groq.com/openai/v1/chat/completions', {
//             model: process.env.GROQ_MODEL || 'llama-3.3-70b-versatile',
//             messages: [
//                 {
//                     role: 'system',
//                     content: options.system_content || 'Tu es un expert Slidev qui cr√©e du Markdown sophistiqu√© en utilisant intelligemment les ressources fournies. R√©ponds UNIQUEMENT avec du Markdown Slidev valide.'
//                 },
//                 {
//                     role: 'user',
//                     content: prompt
//                 }
//             ],
//             temperature: options.temperature || 0.7,
//             max_tokens: options.max_tokens || 5000
//         }, {
//             headers: {
//                 'Authorization': `Bearer ${process.env.GROQ_API_KEY}`,
//                 'Content-Type': 'application/json'
//             }
//         });

//         return response.data.choices[0].message.content;
//     } catch (error) {
//         console.error('‚ùå Erreur Groq:', error.message);
//         throw new Error('Erreur g√©n√©ration IA: ' + error.message);
//     }
// }

// // üéØ API PRINCIPALE - POST /ai/plan-to-markdown
// router.post('/plan-to-markdown', async (req, res) => {
//     const startTime = Date.now();

//     try {
//         // Validation de base
//         if (!req.body.plan_sections || !req.body.topic) {
//             return res.status(400).json({
//                 error: 'Format invalide',
//                 required: ['plan_sections', 'topic'],
//                 format: 'Utilisez TOUT le r√©sultat de POST /ai/groq-plan'
//             });
//         }

//         const groqPlanData = req.body;
//         console.log(`üìÑ G√©n√©ration Markdown enrichi: ${groqPlanData.topic}`);

//         // üîç ANALYSE DES RESSOURCES DISPONIBLES
//         const resourcesAnalysis = analyzeAvailableResources(groqPlanData);
//         console.log(`üìö Ressources d√©tect√©es: ${resourcesAnalysis.total_files} fichiers, vocabulaire: ${resourcesAnalysis.vocabulary_adapted}`);

//         // üé® G√âN√âRATION MARKDOWN ENRICHI
//         console.log('üé® G√©n√©ration Markdown Slidev enrichi...');
//         const markdownPrompt = createEnhancedMarkdownPrompt(groqPlanData, resourcesAnalysis);
//         const markdownResponse = await callGroq(markdownPrompt, {
//             temperature: 0.7,
//             max_tokens: 6000
//         });

//         let slideMarkdown = cleanMarkdown(markdownResponse);

//         // Fallback si n√©cessaire
//         if (!slideMarkdown.includes('---\ntheme:')) {
//             console.log('üîÑ G√©n√©ration fallback...');
//             slideMarkdown = createFallbackMarkdown(groqPlanData, resourcesAnalysis);
//         }

//         // üÜï COMPTER LES SLIDES R√âELLES DANS LE MARKDOWN
//         const actualSlideCount = countActualSlides(slideMarkdown);
//         console.log(`üìä Slides d√©tect√©es: ${actualSlideCount} (sections plan: ${groqPlanData.plan_sections.length})`);

//         // üîß G√âN√âRATION SCRIPT NARRATION AVEC SYNCHRONISATION
//         console.log('üé¨ G√©n√©ration script narration synchronis√©...');
//         const narrationPrompt = createNarrationPrompt(groqPlanData, resourcesAnalysis, actualSlideCount);
//         const narrationResponse = await callGroq(narrationPrompt, {
//             system_content: 'Tu es un expert en narration qui adapte le discours aux ressources. R√©ponds UNIQUEMENT avec du JSON valide avec le nombre exact de slides demand√©.',
//             max_tokens: 5000
//         });

//         let narrationScript;
//         try {
//             const cleanedNarration = cleanNarrationResponse(narrationResponse);
//             narrationScript = JSON.parse(cleanedNarration);

//             // üÜï VALIDATION SYNCHRONISATION
//             const scriptCount = Object.keys(narrationScript).length;
//             if (scriptCount !== actualSlideCount) {
//                 console.warn(`‚ö†Ô∏è D√©synchronisation d√©tect√©e: ${actualSlideCount} slides vs ${scriptCount} scripts`);
//                 // Forcer la synchronisation
//                 narrationScript = forceSynchronization(narrationScript, actualSlideCount, groqPlanData, resourcesAnalysis);
//             }

//         } catch (parseError) {
//             console.warn('‚ö†Ô∏è Erreur parsing narration, fallback synchronis√©...');
//             narrationScript = createSynchronizedFallbackNarration(groqPlanData, resourcesAnalysis, actualSlideCount);
//         }

//         // üÜï V√âRIFICATION FINALE
//         const finalSlideCount = actualSlideCount;
//         const finalScriptCount = Object.keys(narrationScript).length;

//         console.log(`‚úÖ Synchronisation finale: ${finalSlideCount} slides = ${finalScriptCount} scripts`);

//         // üèóÔ∏è ASSEMBLAGE FINAL
//         const slidesId = uuidv4();
//         const totalTime = Date.now() - startTime;

//         const result = {
//             slides_id: slidesId,

//             // R√âSULTATS PRINCIPAUX (Compatible format existant)
//             markdown: slideMarkdown,
//             narration_script: narrationScript,

//             // üÜï INFORMATIONS SYNCHRONISATION
//             synchronization_info: {
//                 markdown_slides_count: finalSlideCount,
//                 narration_scripts_count: finalScriptCount,
//                 synchronized: finalSlideCount === finalScriptCount,
//                 plan_sections_count: groqPlanData.plan_sections.length,
//                 mapping_type: finalSlideCount === groqPlanData.plan_sections.length ? '1:1' :
//                     finalSlideCount > groqPlanData.plan_sections.length ? 'expanded' : 'compressed'
//             },

//             // INFORMATIONS RESSOURCES
//             resource_integration: {
//                 files_used_in_markdown: resourcesAnalysis.files_content_integrated,
//                 company_context_applied: resourcesAnalysis.company_context_integrated,
//                 vocabulary_adapted: resourcesAnalysis.vocabulary_adapted,
//                 examples_from_files: resourcesAnalysis.extracted_examples,
//                 procedures_integrated: resourcesAnalysis.procedures_integrated,
//                 terminology_used: resourcesAnalysis.key_terminology
//             },

//             // COMPATIBILIT√â AVEC FORMAT EXISTANT
//             slides_count: finalSlideCount,
//             topic: groqPlanData.topic,
//             source_plan_id: groqPlanData.plan_id,

//             files: {
//                 markdown: `resource_slides_${slidesId}.md`,
//                 narration: `narration_${slidesId}.json`,
//                 script_txt: `script_${slidesId}.txt`
//             },

//             file_sizes: {
//                 markdown_kb: Math.round(slideMarkdown.length / 1024),
//                 narration_kb: Math.round(JSON.stringify(narrationScript).length / 1024)
//             },

//             slidev_commands: {
//                 preview: `slidev resource_slides_${slidesId}.md`,
//                 export_pdf: `slidev export resource_slides_${slidesId}.md --format pdf`,
//                 export_html: `slidev export resource_slides_${slidesId}.md --format html`
//             },

//             video_production: {
//                 total_duration_seconds: Object.values(narrationScript).reduce((sum, script) => sum + script.duration_seconds, 0),
//                 slides_with_timing: Object.keys(narrationScript).length,
//                 ready_for_recording: true,
//                 uses_company_terminology: resourcesAnalysis.vocabulary_adapted,
//                 references_uploaded_files: resourcesAnalysis.files_content_integrated,
//                 perfectly_synchronized: true
//             },

//             generation_time_ms: totalTime,
//             generated_at: new Date().toISOString(),
//             status: 'completed',
//             ready_for_production: true,

//             next_steps: {
//                 audio_generation: 'POST /ai/generate-narration-bark avec script synchronis√©',
//                 customization: resourcesAnalysis.company_context_integrated ?
//                     'Contenu d√©j√† adapt√© √† votre contexte' :
//                     'Personnaliser selon votre contexte'
//             }
//         };

//         console.log(`‚úÖ G√©n√©ration compl√®te: ${finalSlideCount} slides synchronis√©es, ${resourcesAnalysis.total_files} fichiers int√©gr√©s, ${totalTime}ms`);
//         res.json(result);

//     } catch (error) {
//         const totalTime = Date.now() - startTime;
//         console.error('‚ùå Erreur plan-to-markdown:', error);
//         res.status(500).json({
//             error: 'Erreur g√©n√©ration markdown',
//             generation_time_ms: totalTime,
//             details: error.message
//         });
//     }
// });

// // üÜï FONCTIONS DE SYNCHRONISATION

// function countActualSlides(markdown) {
//     // Compter le nombre de slides r√©elles dans le markdown
//     const slidesSeparators = markdown.match(/^---$/gm) || [];

//     // Le premier --- est pour les m√©tadonn√©es, donc slides = separators - 1
//     let slideCount = Math.max(1, slidesSeparators.length - 1);

//     // Validation suppl√©mentaire avec les layouts
//     const layoutsFound = markdown.match(/layout:\s*(intro|default|two-cols|center|end)/g) || [];

//     // Si on trouve des layouts, utiliser ce nombre
//     if (layoutsFound.length > 0) {
//         slideCount = Math.max(slideCount, layoutsFound.length);
//     }

//     // Compter aussi les titres de slides (# titre)
//     const titleSlides = markdown.match(/^#\s+.+$/gm) || [];
//     if (titleSlides.length > slideCount) {
//         slideCount = titleSlides.length;
//     }

//     console.log(`üìä D√©tection slides: separators=${slidesSeparators.length - 1}, layouts=${layoutsFound.length}, titles=${titleSlides.length}, final=${slideCount}`);

//     return Math.max(slideCount, 1);
// }

// function forceSynchronization(narrationScript, targetCount, planData, resourcesAnalysis) {
//     const currentCount = Object.keys(narrationScript).length;

//     if (currentCount === targetCount) {
//         return narrationScript; // D√©j√† synchronis√©
//     }

//     console.log(`üîß For√ßage synchronisation: ${currentCount} ‚Üí ${targetCount} scripts`);

//     // Cr√©er nouveau script synchronis√©
//     return createSynchronizedFallbackNarration(planData, resourcesAnalysis, targetCount);
// }

// function createSynchronizedFallbackNarration(planData, resourcesAnalysis, slideCount) {
//     const { plan_sections } = planData;
//     const narration = {};

//     console.log(`üîß Cr√©ation narration synchronis√©e: ${slideCount} scripts pour ${plan_sections.length} sections`);

//     for (let i = 0; i < slideCount; i++) {
//         const slideKey = `slide_${i + 1}`;

//         // Mapping intelligent sections ‚Üí slides
//         let mappedSection;
//         let sectionIndex;

//         if (slideCount <= plan_sections.length) {
//             // Moins ou √©gal de slides que de sections ‚Üí mapping direct ou combinaison
//             sectionIndex = Math.floor(i * plan_sections.length / slideCount);
//         } else {
//             // Plus de slides que de sections ‚Üí subdivision
//             sectionIndex = Math.floor(i * plan_sections.length / slideCount);
//         }

//         mappedSection = plan_sections[Math.min(sectionIndex, plan_sections.length - 1)];

//         let tone = 'p√©dagogique';
//         let title = mappedSection.title;
//         let script = `Nous allons maintenant aborder ${mappedSection.title}.`;

//         // D√©finir le ton selon la position
//         if (i === 0) {
//             tone = 'accueillant';
//             title = mappedSection.title || 'Introduction';
//             script = resourcesAnalysis.files_content_integrated ?
//                 `Bonjour et bienvenue dans cette formation sur ${title}, adapt√©e √† vos documents.` :
//                 `Bonjour et bienvenue dans cette formation sur ${title}.`;
//         } else if (i === slideCount - 1) {
//             tone = 'motivant';
//             title = 'Conclusion';
//             script = 'Pour conclure, retenez bien les points essentiels que nous venons de voir.';
//         } else {
//             // Slide interm√©diaire
//             if (slideCount > plan_sections.length) {
//                 // Subdivision d'une section
//                 const partNumber = Math.floor(i / (slideCount / plan_sections.length)) + 1;
//                 title = `${mappedSection.title} - Partie ${partNumber}`;
//                 script = `Continuons avec ${mappedSection.title}. Nous allons maintenant voir les d√©tails importants.`;
//             }
//         }

//         // Calculer dur√©e proportionnelle
//         const baseDuration = mappedSection.duration_seconds || 60;
//         const proportionalDuration = Math.floor(baseDuration * (plan_sections.length / slideCount));
//         const adjustedDuration = Math.max(15, Math.min(120, proportionalDuration)); // Entre 15s et 2min

//         narration[slideKey] = {
//             title: title,
//             duration_seconds: adjustedDuration,
//             script: script,
//             tone: tone,
//             key_phrases: resourcesAnalysis.key_terminology.slice(0, 2) || ["Point important"],
//             uses_resources: resourcesAnalysis.files_content_integrated,
//             mapped_from_section: sectionIndex + 1,
//             slide_position: i + 1,
//             auto_generated: currentCount !== slideCount // Flag pour indiquer g√©n√©ration automatique
//         };
//     }

//     return narration;
// }

// // üîç ANALYSE DES RESSOURCES DISPONIBLES
// function analyzeAvailableResources(groqPlanData) {
//     const analysis = {
//         total_files: 0,
//         files_content_integrated: false,
//         company_context_integrated: false,
//         vocabulary_adapted: false,
//         procedures_integrated: false,
//         examples_extracted: false,
//         key_terminology: [],
//         extracted_examples: [],
//         file_references: [],
//         adaptation_quality: 'basic'
//     };

//     // Analyser les fichiers trait√©s
//     if (groqPlanData.files_processing) {
//         analysis.total_files = groqPlanData.files_processing.processed_successfully || 0;
//         analysis.files_content_integrated = analysis.total_files > 0;

//         if (groqPlanData.files_processing.processed_files) {
//             groqPlanData.files_processing.processed_files.forEach(file => {
//                 if (file.status === 'parsed') {
//                     analysis.file_references.push({
//                         name: file.name,
//                         type: file.content_type,
//                         topics: file.key_topics
//                     });

//                     if (file.has_procedures) analysis.procedures_integrated = true;
//                     if (file.has_examples) analysis.examples_extracted = true;
//                     if (file.key_topics) analysis.key_terminology.push(...file.key_topics);
//                 }
//             });
//         }
//     }

//     // Analyser l'enrichissement
//     if (groqPlanData.resources_enrichment) {
//         analysis.company_context_integrated = groqPlanData.resources_enrichment.has_company_context;
//         analysis.vocabulary_adapted = groqPlanData.resources_enrichment.adaptation_applied?.vocabulary_adapted || false;
//     }

//     // Extraire des sections du plan
//     if (groqPlanData.plan_sections) {
//         groqPlanData.plan_sections.forEach(section => {
//             if (section.enhanced_with_resources) {
//                 if (section.key_terminology) {
//                     analysis.key_terminology.push(...section.key_terminology);
//                 }
//                 if (section.examples_from_resources) {
//                     analysis.extracted_examples.push(...section.examples_from_resources);
//                 }
//             }
//         });
//     }

//     // D√©duplication
//     analysis.key_terminology = [...new Set(analysis.key_terminology.flat())].slice(0, 10);
//     analysis.extracted_examples = [...new Set(analysis.extracted_examples.flat())].slice(0, 8);

//     // Calcul qualit√©
//     if (analysis.files_content_integrated && analysis.vocabulary_adapted && analysis.company_context_integrated) {
//         analysis.adaptation_quality = 'excellent';
//     } else if (analysis.files_content_integrated || analysis.vocabulary_adapted) {
//         analysis.adaptation_quality = 'good';
//     }

//     return analysis;
// }

// // üé® CR√âATION PROMPT MARKDOWN ENRICHI
// function createEnhancedMarkdownPrompt(planData, resourcesAnalysis) {
//     const { topic, plan_sections, settings } = planData;
//     const { level = 'beginner', duration = 5, style = 'practical' } = settings || {};

//     let prompt = `Cr√©e un Markdown Slidev sophistiqu√© qui utilise les ressources fournies:

// INFORMATIONS:
// - Sujet: ${topic}
// - Niveau: ${level}
// - Dur√©e: ${duration} minutes
// - Style: ${style}

// RESSOURCES DISPONIBLES:
// - Fichiers trait√©s: ${resourcesAnalysis.total_files}
// - Contexte entreprise: ${resourcesAnalysis.company_context_integrated ? 'OUI' : 'NON'}
// - Vocabulaire adapt√©: ${resourcesAnalysis.vocabulary_adapted ? 'OUI' : 'NON'}
// - Proc√©dures: ${resourcesAnalysis.procedures_integrated ? 'OUI' : 'NON'}
// - Exemples: ${resourcesAnalysis.examples_extracted ? 'OUI' : 'NON'}`;

//     if (resourcesAnalysis.key_terminology.length > 0) {
//         prompt += `\n\nTERMINOLOGIE √Ä UTILISER:\n${resourcesAnalysis.key_terminology.join(', ')}`;
//     }

//     if (resourcesAnalysis.extracted_examples.length > 0) {
//         prompt += `\n\nEXEMPLES √Ä INT√âGRER:\n${resourcesAnalysis.extracted_examples.map((ex, i) => `${i + 1}. ${ex}`).join('\n')}`;
//     }

//     if (resourcesAnalysis.file_references.length > 0) {
//         prompt += `\n\nFICHIERS √Ä R√âF√âRENCER:\n${resourcesAnalysis.file_references.map(ref => `- ${ref.name}: ${ref.type}`).join('\n')}`;
//     }

//     prompt += `\n\nSECTIONS DU PLAN:\n${plan_sections.map((section, i) => {
//         return `${i + 1}. ${section.title} (${section.duration_seconds}s)\n   Points: ${section.what_to_cover ? section.what_to_cover.join(', ') : '√Ä d√©velopper'}`;
//     }).join('\n\n')}`;

//     prompt += `\n\nG√âN√àRE un Markdown Slidev enrichi avec int√©gration des ressources:

// ---
// theme: ${resourcesAnalysis.company_context_integrated ? 'corporate' : 'academic'}
// background: linear-gradient(135deg, #667eea 0%, #764ba2 100%)
// class: text-center
// highlighter: shiki
// lineNumbers: true
// title: ${topic}
// ---

// # ${topic}
// ## Formation ${duration} minutes${resourcesAnalysis.company_context_integrated ? ' - Adapt√©e √† votre contexte' : ''}

// ${resourcesAnalysis.files_content_integrated ? `
// <div class="opacity-80 text-sm mt-4 bg-blue-50 dark:bg-blue-900/20 p-3 rounded-lg">
//   üìö Formation enrichie par ${resourcesAnalysis.total_files} document(s)
// </div>
// ` : ''}

// <div class="pt-8">
//   <span @click="$slidev.nav.next" class="px-6 py-3 rounded-lg cursor-pointer bg-gradient-to-r from-blue-500 to-purple-600 text-white font-semibold">
//     üöÄ Commencer
//   </span>
// </div>

// ${plan_sections.map((section, index) => {
//         if (section.type === 'introduction') {
//             return `
// ---
// layout: intro
// ---

// # ${section.title}

// ${section.what_to_cover ? section.what_to_cover.map(point => `- **${point}**`).join('\n') : '- Introduction au sujet'}

// ${section.enhanced_with_resources && resourcesAnalysis.extracted_examples.length > 0 ? `
// <div class="mt-6 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
//   <h3 class="text-lg font-semibold mb-3 text-blue-700 dark:text-blue-300">
//     üí° Bas√© sur vos ressources
//   </h3>
//   <div class="text-sm space-y-2">
// ${resourcesAnalysis.extracted_examples.slice(0, 2).map(example => `    <div>‚Ä¢ ${example}</div>`).join('\n')}
//   </div>
// </div>
// ` : ''}

// <div class="mt-6">
//   <div class="px-4 py-2 rounded-full bg-blue-100 text-blue-800 text-sm inline-block">
//     ‚è±Ô∏è ${section.duration_seconds}s
//   </div>
// </div>`;

//         } else if (section.type === 'development') {
//             return `
// ---
// layout: two-cols
// ---

// # ${section.title}

// <template v-slot:default>

// ${section.what_to_cover ? section.what_to_cover.map((point, i) => `
// ## ${i + 1}. ${point}

// ${section.enhanced_with_resources ? `
// <div class="text-sm text-blue-600 mb-4 bg-blue-50 p-2 rounded">
//   üí° Point enrichi par vos documents
// </div>
// ` : `
// <div class="text-gray-600 text-sm mb-4">
//   Point essentiel √† retenir
// </div>
// `}
// `).join('') : '## Contenu principal'}

// </template>

// <template v-slot:right>

// ${section.enhanced_with_resources && resourcesAnalysis.extracted_examples.length > 0 ? `
// <div class="bg-green-50 p-6 rounded-xl h-full">
//   <h3 class="text-lg font-semibold mb-4 text-green-700">
//     üìã Exemples de vos documents
//   </h3>
//   <div class="space-y-3">
// ${resourcesAnalysis.extracted_examples.slice(0, 3).map(example => `    <div class="bg-white p-3 rounded-lg">
//       <div class="text-sm">${example}</div>
//     </div>`).join('\n')}
//   </div>
// </div>
// ` : `
// <div class="bg-orange-50 p-6 rounded-xl h-full">
//   <h3 class="text-lg font-semibold mb-2">Points Cl√©s</h3>
//   <div class="text-sm">${section.content_summary || 'Contenu adapt√©'}</div>
// </div>
// `}

// </template>

// <div class="mt-8 p-4 bg-blue-50 rounded-lg">
//   <div class="font-semibold">R√©sum√©</div>
//   <div class="text-sm mt-1">${section.content_summary || 'Points cl√©s de cette section'}</div>
// </div>`;

//         } else if (section.type === 'conclusion') {
//             return `
// ---
// layout: center
// class: text-center
// ---

// # ${section.title}

// <div class="max-w-4xl mx-auto">
//   <div class="grid grid-cols-1 md:grid-cols-${section.what_to_cover ? Math.min(section.what_to_cover.length, 3) : 2} gap-6 mb-8">
// ${section.what_to_cover ? section.what_to_cover.map(point => `    <div class="bg-green-50 p-6 rounded-xl">
//       <div class="text-3xl mb-3">‚úÖ</div>
//       <div class="font-semibold text-green-700">${point}</div>
//     </div>`).join('\n') : `    <div class="bg-green-50 p-6 rounded-xl">
//       <div class="text-4xl mb-3">‚úÖ</div>
//       <div class="font-semibold">R√©capitulatif</div>
//     </div>
//     <div class="bg-blue-50 p-6 rounded-xl">
//       <div class="text-4xl mb-3">üöÄ</div>
//       <div class="font-semibold">Prochaines √âtapes</div>
//     </div>`}
//   </div>

//   ${section.enhanced_with_resources ? `
//   <div class="bg-purple-100 p-6 rounded-xl mb-8">
//     <h3 class="text-xl font-semibold mb-4 text-purple-700">
//       üéØ Applications dans votre contexte
//     </h3>
//     <div class="text-sm text-purple-600">
//       Cette formation a √©t√© adapt√©e √† vos ressources.
//     </div>
//   </div>
//   ` : ''}

//   <div class="pt-8">
//     <span class="px-8 py-4 rounded-xl bg-gradient-to-r from-green-400 to-blue-500 text-white font-bold text-xl">
//       üéâ Formation Termin√©e !
//     </span>
//   </div>
// </div>`;
//         }
//         return '';
//     }).join('')}

// ---
// layout: end
// ---

// # Merci !

// <div class="text-center">
//   <div class="text-6xl mb-4">üéâ</div>
//   <div class="text-2xl">Formation ${topic} termin√©e</div>
//   ${resourcesAnalysis.files_content_integrated ? `
//   <div class="text-lg text-blue-600 mt-2">
//     üìö Avec ${resourcesAnalysis.total_files} document(s) int√©gr√©(s)
//   </div>
//   ` : `
//   <div class="text-lg text-gray-600 mt-2">Dur√©e: ${duration} minutes</div>
//   `}
// </div>

// G√©n√®re UNIQUEMENT ce Markdown, rien d'autre.`;

//     return prompt;
// }

// // üé¨ CR√âATION PROMPT NARRATION SYNCHRONIS√â
// function createNarrationPrompt(planData, resourcesAnalysis, actualSlideCount) {
//     const { topic, plan_sections, settings } = planData;
//     const { level = 'beginner', duration = 5 } = settings || {};

//     let prompt = `Cr√©e un script de narration adapt√© aux ressources et PARFAITEMENT synchronis√©:

// FORMATION:
// - Sujet: ${topic}
// - Niveau: ${level}
// - Dur√©e: ${duration} minutes
// - NOMBRE DE SLIDES EXACT: ${actualSlideCount}

// ADAPTATION RESSOURCES:
// - Fichiers: ${resourcesAnalysis.total_files}
// - Vocabulaire adapt√©: ${resourcesAnalysis.vocabulary_adapted ? 'OUI' : 'NON'}
// - Exemples sp√©cifiques: ${resourcesAnalysis.examples_extracted ? 'OUI' : 'NON'}`;

//     if (resourcesAnalysis.key_terminology.length > 0) {
//         prompt += `\n\nTERMINOLOGIE √Ä UTILISER: ${resourcesAnalysis.key_terminology.join(', ')}`;
//     }

//     // üÜï MAPPAGE SECTIONS ‚Üí SLIDES R√âELS
//     prompt += `\n\nSECTIONS DISPONIBLES:\n${plan_sections.map((section, i) =>
//         `${i + 1}. ${section.title} (${section.duration_seconds}s) - ${section.type}`
//     ).join('\n')}`;

//     prompt += `\n\n‚ö†Ô∏è CRITICAL: Tu dois g√©n√©rer EXACTEMENT ${actualSlideCount} scripts de narration.

// R√àGLES DE MAPPING:
// - Si ${actualSlideCount} slides > ${plan_sections.length} sections : Diviser les sections longues
// - Si ${actualSlideCount} slides < ${plan_sections.length} sections : Combiner certaines sections  
// - Si ${actualSlideCount} slides = ${plan_sections.length} sections : Mapping 1:1 parfait

// G√âN√àRE ce JSON avec EXACTEMENT ${actualSlideCount} entr√©es:

// {
// ${Array.from({ length: actualSlideCount }, (_, index) => {
//         const slideKey = `slide_${index + 1}`;

//         // Logique de mapping intelligent
//         let mappedSection;
//         let sectionIndex;

//         if (actualSlideCount <= plan_sections.length) {
//             // Moins ou √©gal de slides que de sections
//             sectionIndex = Math.floor(index * plan_sections.length / actualSlideCount);
//         } else {
//             // Plus de slides que de sections
//             sectionIndex = Math.floor(index * plan_sections.length / actualSlideCount);
//         }

//         mappedSection = plan_sections[Math.min(sectionIndex, plan_sections.length - 1)];

//         let tone = 'p√©dagogique';
//         let title = mappedSection.title;

//         if (index === 0) {
//             tone = 'accueillant';
//             title = mappedSection.title || 'Introduction';
//         } else if (index === actualSlideCount - 1) {
//             tone = 'motivant';
//             title = 'Conclusion';
//         } else if (actualSlideCount > plan_sections.length) {
//             // Subdivision d'une section
//             const partNumber = Math.floor((index - 1) / Math.ceil(actualSlideCount / plan_sections.length)) + 1;
//             title = `${mappedSection.title} - Partie ${partNumber}`;
//         }

//         // Calculer dur√©e proportionnelle
//         const baseDuration = mappedSection.duration_seconds || 60;
//         const proportionalDuration = Math.floor(baseDuration * (plan_sections.length / actualSlideCount));
//         const adjustedDuration = Math.max(15, Math.min(120, proportionalDuration));

//         return `  "${slideKey}": {
//     "title": "${title}",
//     "duration_seconds": ${adjustedDuration},
//     "script": "Script adapt√© pour ${title}. ${resourcesAnalysis.vocabulary_adapted ? 'Utiliser la terminologie sp√©cialis√©e.' : ''} ${resourcesAnalysis.examples_extracted ? 'Mentionner les exemples des documents.' : ''}",
//     "tone": "${tone}",
//     "key_phrases": ${resourcesAnalysis.key_terminology.length > 0 ? JSON.stringify(resourcesAnalysis.key_terminology.slice(0, 2)) : '["point important"]'},
//     "uses_resources": ${resourcesAnalysis.files_content_integrated}
//   }`;
//     }).join(',\n')}
// }

// R√àGLES:
// - Ton naturel et ${resourcesAnalysis.company_context_integrated ? 'professionnel' : 'conversationnel'}
// - ${resourcesAnalysis.vocabulary_adapted ? 'Utiliser OBLIGATOIREMENT la terminologie fournie' : 'Langage accessible'}
// - ${resourcesAnalysis.examples_extracted ? 'Int√©grer les exemples des documents' : 'Exemples g√©n√©riques'}

// G√©n√®re UNIQUEMENT ce JSON avec EXACTEMENT ${actualSlideCount} scripts, rien d'autre.`;

//     return prompt;
// }

// // üîß FONCTIONS UTILITAIRES

// function cleanMarkdown(markdown) {
//     return markdown
//         .replace(/```markdown\n/g, '')
//         .replace(/\n```/g, '')
//         .replace(/```/g, '')
//         .trim();
// }

// function cleanNarrationResponse(response) {
//     return response
//         .replace(/```json\n/g, '')
//         .replace(/\n```/g, '')
//         .replace(/```/g, '')
//         .replace(/^[^{]*/, '')
//         .replace(/[^}]*$/, '')
//         .trim();
// }

// function createFallbackMarkdown(planData, resourcesAnalysis) {
//     const { topic, plan_sections, settings } = planData;
//     const { duration = 5 } = settings || {};

//     return `---
// theme: academic
// background: linear-gradient(45deg, #1e3c72, #2a5298)
// class: text-center
// title: ${topic}
// ---

// # ${topic}
// ## Formation ${duration} minutes

// ${resourcesAnalysis.files_content_integrated ? `
// <div class="text-sm mt-4 bg-blue-50 p-3 rounded">
//   üìö Formation enrichie par ${resourcesAnalysis.total_files} document(s)
// </div>
// ` : ''}

// <div class="pt-12">
//   <span @click="$slidev.nav.next" class="px-6 py-3 rounded-lg cursor-pointer bg-blue-600 text-white">
//     üöÄ Commencer
//   </span>
// </div>

// ${plan_sections.map(section => `
// ---
// layout: default
// ---

// # ${section.title}

// ${section.what_to_cover ? section.what_to_cover.map(point => `- ${point}`).join('\n') : '- Contenu √† d√©velopper'}

// ${section.enhanced_with_resources ? `
// <div class="mt-6 p-4 bg-blue-50 rounded-lg">
//   üí° <strong>Adapt√© √† vos ressources:</strong> ${section.content_summary || 'Contenu personnalis√©'}
// </div>
// ` : `
// <div class="mt-4 text-sm text-gray-600">
// ‚è±Ô∏è ${section.duration_seconds}s ‚Ä¢ ${section.type}
// </div>
// `}
// `).join('')}

// ---
// layout: end
// ---

// # Merci !

// Formation ${topic} termin√©e üéâ`;
// }

// // üîß ROUTE SAUVEGARDE
// router.post('/save-files', async (req, res) => {
//     try {
//         const { markdown, narration_script, slides_id } = req.body;

//         if (!markdown) {
//             return res.status(400).json({
//                 error: 'Le champ "markdown" est requis'
//             });
//         }

//         const slidesDir = path.join(__dirname, '..', '..', 'generated-slides');
//         await fs.mkdir(slidesDir, { recursive: true });

//         const baseFilename = slides_id || `resource_slides_${Date.now()}`;
//         const savedFiles = [];

//         // Sauvegarder markdown
//         const markdownFile = `${baseFilename}.md`;
//         const markdownPath = path.join(slidesDir, markdownFile);
//         await fs.writeFile(markdownPath, markdown, 'utf8');
//         savedFiles.push(markdownFile);

//         // Sauvegarder script narration
//         if (narration_script) {
//             const narrationFile = `narration_${baseFilename}.json`;
//             const narrationPath = path.join(slidesDir, narrationFile);
//             await fs.writeFile(narrationPath, JSON.stringify(narration_script, null, 2), 'utf8');
//             savedFiles.push(narrationFile);

//             // Script texte
//             const scriptText = Object.entries(narration_script)
//                 .map(([slide, data]) => `=== ${data.title} (${data.duration_seconds}s) ===\n${data.script}\n`)
//                 .join('\n');

//             const scriptFile = `script_${baseFilename}.txt`;
//             const scriptPath = path.join(slidesDir, scriptFile);
//             await fs.writeFile(scriptPath, scriptText, 'utf8');
//             savedFiles.push(scriptFile);
//         }

//         res.json({
//             message: 'Fichiers sauv√©s avec succ√®s',
//             saved_files: savedFiles,
//             directory: slidesDir,
//             slidev_command: `cd generated-slides && slidev ${markdownFile}`
//         });

//     } catch (error) {
//         res.status(500).json({
//             error: 'Erreur sauvegarde',
//             details: error.message
//         });
//     }
// });

// // üîß ROUTE INFO
// router.get('/plan-to-markdown/info', (req, res) => {
//     res.json({
//         endpoint: 'POST /ai/plan-to-markdown',
//         description: 'Convertit le plan en Markdown Slidev enrichi avec synchronisation parfaite slides/narration',
//         version: '5.0 - Perfect Synchronization',
//         status: '‚úÖ OP√âRATIONNEL',

//         fonctionnalit√©s: [
//             'üîÑ Synchronisation automatique slides ‚Üî scripts narration',
//             'üìö Utilisation intelligente des fichiers upload√©s',
//             'üé¨ Scripts de narration adapt√©s au vocabulaire',
//             'üè¢ Adaptation automatique au contexte entreprise',
//             'üîë Int√©gration terminologie sp√©cifique',
//             'üí° Exemples personnalis√©s des documents',
//             'üìä Validation et correction automatique des d√©synchronisations'
//         ],

//         synchronization_features: [
//             '‚úÖ D√©tection automatique du nombre de slides markdown',
//             'üîß Ajustement forc√© du nombre de scripts narration',
//             'üìà Mapping intelligent sections ‚Üí slides',
//             '‚öñÔ∏è R√©partition proportionnelle des dur√©es',
//             'üîç Validation finale de synchronisation'
//         ],

//         workflow: [
//             '1. POST /ai/groq-plan (avec ressources/fichiers)',
//             '2. POST /ai/plan-to-markdown (g√©n√®re markdown + compte slides)',
//             '3. G√©n√©ration narration avec nombre exact de scripts',
//             '4. Validation synchronisation finale',
//             '5. POST /ai/generate-narration-bark (audio parfaitement align√©)'
//         ],

//         mapping_strategies: {
//             one_to_one: 'Slides = Sections ‚Üí Mapping direct 1:1',
//             expansion: 'Slides > Sections ‚Üí Subdivision intelligente',
//             compression: 'Slides < Sections ‚Üí Combinaison logique'
//         },

//         compatibilit√©: {
//             format_entr√©e: 'Compatible avec tous les plans de groq-plan',
//             format_sortie: 'Compatible avec ancien format + enrichissements + sync info',
//             r√©trocompatible: 'Fonctionne avec plans sans ressources',
//             guaranteed_sync: 'Synchronisation garantie √† 100%'
//         },

//         response_additions: {
//             synchronization_info: 'D√©tails de synchronisation et mapping',
//             perfectly_synchronized: 'Flag confirmant la synchronisation',
//             mapping_type: 'Type de mapping appliqu√© (1:1, expanded, compressed)'
//         },

//         exemples_int√©gration: {
//             fichier_excel: 'Guide Excel ‚Üí terminologie VLOOKUP, TCD dans slides + scripts',
//             proc√©dures: 'Proc√©dures d√©tect√©es ‚Üí r√©f√©rences dans markdown + narration',
//             contexte_entreprise: 'Contexte fourni ‚Üí adaptation ton professionnel',
//             exemples_sp√©cifiques: 'Exemples extraits ‚Üí int√©gration dans slides + scripts'
//         }
//     });
// });

// // üß™ ROUTE DE TEST SYNCHRONISATION
// router.post('/test-synchronization', async (req, res) => {
//     try {
//         const { markdown, plan_sections } = req.body;

//         if (!markdown || !plan_sections) {
//             return res.status(400).json({
//                 error: 'markdown et plan_sections requis'
//             });
//         }

//         const slideCount = countActualSlides(markdown);
//         const sectionCount = plan_sections.length;

//         // Test de synchronisation
//         const mockResourcesAnalysis = {
//             total_files: 0,
//             vocabulary_adapted: false,
//             files_content_integrated: false,
//             key_terminology: [],
//             extracted_examples: []
//         };

//         const syncedNarration = createSynchronizedFallbackNarration(
//             { plan_sections },
//             mockResourcesAnalysis,
//             slideCount
//         );

//         res.json({
//             test_results: {
//                 detected_slides: slideCount,
//                 plan_sections: sectionCount,
//                 generated_scripts: Object.keys(syncedNarration).length,
//                 synchronized: Object.keys(syncedNarration).length === slideCount
//             },
//             mapping_analysis: {
//                 type: slideCount === sectionCount ? '1:1' :
//                     slideCount > sectionCount ? 'expansion' : 'compression',
//                 ratio: Math.round((slideCount / sectionCount) * 100) / 100
//             },
//             generated_narration: syncedNarration,
//             success: true
//         });

//     } catch (error) {
//         res.status(500).json({
//             error: 'Erreur test synchronisation',
//             details: error.message
//         });
//     }
// });

// module.exports = router;





























// code opdate avec le mapping √† ameliorer

// const express = require('express');
// const axios = require('axios');
// const { v4: uuidv4 } = require('uuid');
// const fs = require('fs').promises;
// const path = require('path');

// const router = express.Router();

// // ü§ñ Fonction Groq pour g√©n√©ration intelligente
// async function callGroq(prompt, options = {}) {
//     try {
//         const response = await axios.post('https://api.groq.com/openai/v1/chat/completions', {
//             model: process.env.GROQ_MODEL || 'llama-3.3-70b-versatile',
//             messages: [
//                 {
//                     role: 'system',
//                     content: options.system_content || 'Tu es un expert Slidev qui cr√©e du Markdown sophistiqu√© en utilisant intelligemment les ressources fournies. R√©ponds UNIQUEMENT avec du Markdown Slidev valide.'
//                 },
//                 {
//                     role: 'user',
//                     content: prompt
//                 }
//             ],
//             temperature: options.temperature || 0.7,
//             max_tokens: options.max_tokens || 5000
//         }, {
//             headers: {
//                 'Authorization': `Bearer ${process.env.GROQ_API_KEY}`,
//                 'Content-Type': 'application/json'
//             }
//         });

//         return response.data.choices[0].message.content;
//     } catch (error) {
//         console.error('‚ùå Erreur Groq:', error.message);
//         throw new Error('Erreur g√©n√©ration IA: ' + error.message);
//     }
// }

// // üîß FONCTIONS UTILITAIRES
// function cleanMarkdown(markdown) {
//     return markdown
//         .replace(/```markdown\n/g, '')
//         .replace(/\n```/g, '')
//         .replace(/```/g, '')
//         .trim();
// }

// function cleanNarrationResponse(response) {
//     return response
//         .replace(/```json\n/g, '')
//         .replace(/\n```/g, '')
//         .replace(/```/g, '')
//         .replace(/^[^{]*/, '')
//         .replace(/[^}]*$/, '')
//         .trim();
// }

// function createFallbackMarkdown(planData, resourcesAnalysis) {
//     const { topic, plan_sections, settings } = planData;
//     const { duration = 5 } = settings || {};

//     return `---
// theme: academic
// background: linear-gradient(135deg, #667eea 0%, #764ba2 100%)
// class: text-center
// highlighter: shiki
// lineNumbers: true
// title: ${topic}
// ---

// # ${topic}
// ## Formation ${duration} minutes

// ${resourcesAnalysis.files_content_integrated ? `
// <div class="text-sm mt-4 bg-blue-50 dark:bg-blue-900/20 p-3 rounded-lg">
//   üìö Formation enrichie par ${resourcesAnalysis.total_files} document(s)
// </div>
// ` : ''}

// <div class="pt-8">
//   <span @click="$slidev.nav.next" class="px-6 py-3 rounded-lg cursor-pointer bg-gradient-to-r from-blue-500 to-purple-600 text-white font-semibold">
//     üöÄ Commencer
//   </span>
// </div>

// ${plan_sections.map(section => {
//         if (section.type === 'introduction') {
//             return `
// ---
// layout: intro
// ---

// # ${section.title}

// <div class="max-w-4xl mx-auto">
// ${section.what_to_cover ? section.what_to_cover.map(point => `  <div class="flex items-center mb-4">
//     <div class="text-2xl mr-3">üéØ</div>
//     <div class="text-lg">${point}</div>
//   </div>`).join('\n') : '<div class="text-lg">Introduction aux concepts fondamentaux</div>'}
// </div>

// ${section.enhanced_with_resources && resourcesAnalysis.extracted_examples.length > 0 ? `
// <div class="mt-8 p-6 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
//   <h3 class="text-xl font-semibold mb-4 text-blue-700 dark:text-blue-300">
//     üí° Bas√© sur vos ressources
//   </h3>
//   <div class="text-sm space-y-2">
// ${resourcesAnalysis.extracted_examples.slice(0, 2).map(example => `    <div>‚Ä¢ ${example}</div>`).join('\n')}
//   </div>
// </div>
// ` : ''}

// <div class="mt-8">
//   <div class="px-6 py-3 rounded-full bg-blue-100 dark:bg-blue-800 text-blue-800 dark:text-blue-200 text-sm inline-block">
//     ‚è±Ô∏è ${section.duration_seconds}s
//   </div>
// </div>`;

//         } else if (section.type === 'development') {
//             return `
// ---
// layout: default
// ---

// # ${section.title}

// <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
//   <div>
// ${section.what_to_cover ? section.what_to_cover.map((point, i) => `
//     <div class="mb-6">
//       <h3 class="text-xl font-semibold mb-3 flex items-center">
//         <span class="bg-blue-500 text-white rounded-full w-8 h-8 flex items-center justify-center text-sm mr-3">${i + 1}</span>
//         ${point}
//       </h3>
//       <div class="text-gray-600 dark:text-gray-300">
//         ${getDetailedExplanation(point, topic)}
//       </div>
//     </div>
// `).join('') : '<div class="text-lg">Concepts essentiels √† explorer</div>'}
//   </div>

//   <div>
// ${topic.toLowerCase().includes('python') ? `
//     <div class="bg-gray-900 rounded-lg p-4">
//       <div class="text-green-400 text-sm mb-2"># Exemple pratique</div>
//       <pre><code class="text-green-300">${getCodeExample(section.what_to_cover ? section.what_to_cover[0] : section.title, topic)}</code></pre>
//     </div>

//     <div class="mt-6 p-4 bg-green-50 dark:bg-green-900/20 rounded-lg">
//       <h4 class="font-semibold text-green-700 dark:text-green-300 mb-2">üí° Points cl√©s</h4>
//       <ul class="text-sm text-green-600 dark:text-green-400 space-y-1">
//         <li>‚Ä¢ Syntaxe simple et intuitive</li>
//         <li>‚Ä¢ Typage dynamique automatique</li>
//         <li>‚Ä¢ Large √©cosyst√®me de biblioth√®ques</li>
//       </ul>
//     </div>
// ` : `
//     <div class="bg-blue-50 dark:bg-blue-900/20 p-6 rounded-lg">
//       <h4 class="text-lg font-semibold mb-4">üîç Exemple pratique</h4>
//       <div class="text-sm">${section.content_summary || 'Application concr√®te des concepts'}</div>
//     </div>
// `}
//   </div>
// </div>

// <div class="mt-8">
//   <div class="px-6 py-3 rounded-full bg-green-100 dark:bg-green-800 text-green-800 dark:text-green-200 text-sm inline-block">
//     ‚è±Ô∏è ${section.duration_seconds}s ‚Ä¢ ${section.type}
//   </div>
// </div>`;

//         } else if (section.type === 'conclusion') {
//             return `
// ---
// layout: center
// class: text-center
// ---

// # ${section.title}

// <div class="max-w-4xl mx-auto">
//   <div class="grid grid-cols-1 md:grid-cols-${section.what_to_cover ? Math.min(section.what_to_cover.length, 3) : 2} gap-6 mb-8">
// ${section.what_to_cover ? section.what_to_cover.map(point => `    <div class="bg-green-50 dark:bg-green-900/20 p-6 rounded-xl">
//       <div class="text-4xl mb-4">‚úÖ</div>
//       <div class="font-semibold text-green-700 dark:text-green-300">${point}</div>
//     </div>`).join('\n') : `    <div class="bg-green-50 dark:bg-green-900/20 p-6 rounded-xl">
//       <div class="text-4xl mb-4">‚úÖ</div>
//       <div class="font-semibold">Comp√©tences acquises</div>
//     </div>
//     <div class="bg-blue-50 dark:bg-blue-900/20 p-6 rounded-xl">
//       <div class="text-4xl mb-4">üöÄ</div>
//       <div class="font-semibold">Prochaines √©tapes</div>
//     </div>`}
//   </div>

//   ${section.enhanced_with_resources ? `
//   <div class="bg-purple-100 dark:bg-purple-900/20 p-6 rounded-xl mb-8">
//     <h3 class="text-xl font-semibold mb-4 text-purple-700 dark:text-purple-300">
//       üéØ Applications dans votre contexte
//     </h3>
//     <div class="text-sm text-purple-600 dark:text-purple-400">
//       Cette formation a √©t√© adapt√©e √† vos ressources.
//     </div>
//   </div>
//   ` : ''}

//   <div class="pt-8">
//     <span class="px-8 py-4 rounded-xl bg-gradient-to-r from-green-400 to-blue-500 text-white font-bold text-xl">
//       üéâ Formation Termin√©e !
//     </span>
//   </div>
// </div>`;
//         }
//         return '';
//     }).join('')}

// ---
// layout: end
// ---

// # Merci !

// <div class="text-center">
//   <div class="text-6xl mb-4">üéâ</div>
//   <div class="text-2xl">Formation ${topic} termin√©e</div>
//   ${resourcesAnalysis.files_content_integrated ? `
//   <div class="text-lg text-blue-600 dark:text-blue-400 mt-2">
//     üìö Avec ${resourcesAnalysis.total_files} document(s) int√©gr√©(s)
//   </div>
//   ` : `
//   <div class="text-lg text-gray-600 dark:text-gray-400 mt-2">Dur√©e: ${duration} minutes</div>
//   `}
// </div>`;
// }

// // üÜï FONCTIONS DE SYNCHRONISATION
// function countActualSlides(markdown) {
//     const slidesSeparators = markdown.match(/^---$/gm) || [];
//     let slideCount = Math.max(1, slidesSeparators.length - 1);

//     const layoutsFound = markdown.match(/layout:\s*(intro|default|two-cols|center|end)/g) || [];
//     if (layoutsFound.length > 0) {
//         slideCount = Math.max(slideCount, layoutsFound.length);
//     }

//     const titleSlides = markdown.match(/^#\s+.+$/gm) || [];
//     if (titleSlides.length > slideCount) {
//         slideCount = titleSlides.length;
//     }

//     console.log(`üìä D√©tection slides: separators=${slidesSeparators.length - 1}, layouts=${layoutsFound.length}, titles=${titleSlides.length}, final=${slideCount}`);
//     return Math.max(slideCount, 1);
// }

// function forceSynchronization(narrationScript, targetCount, planData, resourcesAnalysis) {
//     const currentCount = Object.keys(narrationScript).length;

//     if (currentCount === targetCount) {
//         return narrationScript;
//     }

//     console.log(`üîß For√ßage synchronisation: ${currentCount} ‚Üí ${targetCount} scripts`);
//     return createSynchronizedFallbackNarration(planData, resourcesAnalysis, targetCount);
// }

// // üîß FONCTION CORRIG√âE - createSynchronizedFallbackNarration
// function createSynchronizedFallbackNarration(planData, resourcesAnalysis, slideCount) {
//     const { plan_sections } = planData;
//     const narration = {};

//     console.log(`üîß Cr√©ation narration synchronis√©e 1:1: ${slideCount} scripts pour ${plan_sections.length} sections`);

//     for (let i = 0; i < slideCount; i++) {
//         const slideKey = `slide_${i + 1}`;
//         const mappedSection = plan_sections[i];

//         let tone = 'p√©dagogique';
//         let title = mappedSection.title;
//         let script = '';

//         const sectionDuration = mappedSection.duration_seconds || 60;

//         // üéØ UTILISATION FORC√âE DES FONCTIONS D√âTAILL√âES
//         if (mappedSection.type === 'introduction') {
//             tone = 'accueillant';
//             title = mappedSection.title || 'Introduction';
//             script = generateDetailedIntroScript(mappedSection, planData.topic, sectionDuration, resourcesAnalysis);

//         } else if (mappedSection.type === 'conclusion') {
//             tone = 'motivant';
//             title = mappedSection.title;
//             script = generateDetailedConclusionScript(mappedSection, planData.topic, sectionDuration);

//         } else {
//             tone = 'p√©dagogique';
//             script = generateDetailedDevelopmentScript(mappedSection, planData.topic, sectionDuration);
//         }

//         narration[slideKey] = {
//             title: title,
//             duration_seconds: sectionDuration,
//             script: script, // ‚úÖ Maintenant utilise les scripts d√©taill√©s
//             tone: tone,
//             key_phrases: resourcesAnalysis.key_terminology.slice(0, 2) || ["Point important"],
//             uses_resources: resourcesAnalysis.files_content_integrated,
//             mapped_from_section: i + 1,
//             slide_position: i + 1,
//             auto_generated: false
//         };
//     }

//     return narration;
// }

// // üîç ANALYSE DES RESSOURCES DISPONIBLES
// function analyzeAvailableResources(groqPlanData) {
//     const analysis = {
//         total_files: 0,
//         files_content_integrated: false,
//         company_context_integrated: false,
//         vocabulary_adapted: false,
//         procedures_integrated: false,
//         examples_extracted: false,
//         key_terminology: [],
//         extracted_examples: [],
//         file_references: [],
//         adaptation_quality: 'basic'
//     };

//     // Analyser les fichiers trait√©s
//     if (groqPlanData.files_processing) {
//         analysis.total_files = groqPlanData.files_processing.processed_successfully || 0;
//         analysis.files_content_integrated = analysis.total_files > 0;

//         if (groqPlanData.files_processing.processed_files) {
//             groqPlanData.files_processing.processed_files.forEach(file => {
//                 if (file.status === 'parsed') {
//                     analysis.file_references.push({
//                         name: file.name,
//                         type: file.content_type,
//                         topics: file.key_topics
//                     });

//                     if (file.has_procedures) analysis.procedures_integrated = true;
//                     if (file.has_examples) analysis.examples_extracted = true;
//                     if (file.key_topics) analysis.key_terminology.push(...file.key_topics);
//                 }
//             });
//         }
//     }

//     // Analyser l'enrichissement
//     if (groqPlanData.resources_enrichment) {
//         analysis.company_context_integrated = groqPlanData.resources_enrichment.has_company_context;
//         analysis.vocabulary_adapted = groqPlanData.resources_enrichment.adaptation_applied?.vocabulary_adapted || false;
//     }

//     // Extraire des sections du plan
//     if (groqPlanData.plan_sections) {
//         groqPlanData.plan_sections.forEach(section => {
//             if (section.enhanced_with_resources) {
//                 if (section.key_terminology) {
//                     analysis.key_terminology.push(...section.key_terminology);
//                 }
//                 if (section.examples_from_resources) {
//                     analysis.extracted_examples.push(...section.examples_from_resources);
//                 }
//             }
//         });
//     }

//     // D√©duplication
//     analysis.key_terminology = [...new Set(analysis.key_terminology.flat())].slice(0, 10);
//     analysis.extracted_examples = [...new Set(analysis.extracted_examples.flat())].slice(0, 8);

//     // Calcul qualit√©
//     if (analysis.files_content_integrated && analysis.vocabulary_adapted && analysis.company_context_integrated) {
//         analysis.adaptation_quality = 'excellent';
//     } else if (analysis.files_content_integrated || analysis.vocabulary_adapted) {
//         analysis.adaptation_quality = 'good';
//     }

//     return analysis;
// }

// // üé® PROMPT GROQ ENRICHI POUR NARRATION
// function createEnhancedNarrationPrompt(planData, resourcesAnalysis, actualSlideCount) {
//     const { topic, plan_sections, settings } = planData;
//     const { level = 'beginner', duration = 5 } = settings || {};

//     let prompt = `Cr√©e un script de narration D√âTAILL√â et COMPLET pour une formation professionnelle sur ${topic}.

// CONTRAINTES STRICTES:
// - EXACTEMENT ${actualSlideCount} scripts (mapping 1:1 avec les slides)
// - Chaque script doit faire 150-250 mots minimum
// - Langage naturel et professionnel
// - Contenu substantiel et p√©dagogique
// - Adaptation au niveau ${level}

// FORMATION:
// - Sujet: ${topic}
// - Niveau: ${level}
// - Dur√©e totale: ${duration} minutes
// - Public cible: D√©butants avec soif d'apprendre

// STRUCTURE OBLIGATOIRE:
// ${plan_sections.map((section, i) => {
//         const slideNum = i + 1;
//         let promptType = '';

//         if (section.type === 'introduction') {
//             promptType = `
// SLIDE ${slideNum} - INTRODUCTION (${section.duration_seconds}s):
// - Accueil chaleureux et professionnel
// - Pr√©sentation du sujet ${topic} et de ses avantages
// - Objectifs clairs: ${section.what_to_cover ? section.what_to_cover.join(', ') : 'apprentissage fondamental'}
// - Plan de formation et motivation
// - Minimum 150 mots, ton accueillant`;
//         } else if (section.type === 'conclusion') {
//             promptType = `
// SLIDE ${slideNum} - CONCLUSION (${section.duration_seconds}s):
// - F√©licitations pour le parcours accompli
// - R√©capitulatif des comp√©tences acquises en ${topic}
// - Encouragements pour la pratique continue
// - Prochaines √©tapes et ressources
// - Message motivant final
// - Minimum 100 mots, ton motivant`;
//         } else {
//             promptType = `
// SLIDE ${slideNum} - D√âVELOPPEMENT: "${section.title}" (${section.duration_seconds}s):
// - Explication d√©taill√©e de: ${section.what_to_cover ? section.what_to_cover.join(', ') : section.title}
// - Exemples concrets et pratiques
// - Points cl√©s √† retenir
// - Applications r√©elles
// - Transitions fluides
// - Minimum 200 mots, ton p√©dagogique`;
//         }

//         return promptType;
//     }).join('\n')}

// ${resourcesAnalysis.vocabulary_adapted ? `
// TERMINOLOGIE SP√âCIALIS√âE √Ä UTILISER:
// ${resourcesAnalysis.key_terminology.join(', ')}
// ` : ''}

// G√âN√àRE ce JSON avec EXACTEMENT ${actualSlideCount} scripts D√âTAILL√âS:

// {
// ${plan_sections.map((section, index) => {
//         const slideKey = `slide_${index + 1}`;
//         return `  "${slideKey}": {
//     "title": "${section.title}",
//     "duration_seconds": ${section.duration_seconds || 60},
//     "script": "[SCRIPT D√âTAILL√â DE 150+ MOTS POUR ${section.title}]",
//     "tone": "${section.type === 'introduction' ? 'accueillant' : section.type === 'conclusion' ? 'motivant' : 'p√©dagogique'}",
//     "key_phrases": ${JSON.stringify(resourcesAnalysis.key_terminology.slice(0, 2) || ['point important'])},
//     "uses_resources": ${resourcesAnalysis.files_content_integrated}
//   }`;
//     }).join(',\n')}
// }

// R√àGLES ABSOLUES:
// - Chaque script DOIT √™tre d√©taill√© (150+ mots)
// - Langage naturel et fluide
// - Contenu substantiel et informatif
// - Respect strict des dur√©es
// - AUCUN placeholder ou contenu g√©n√©rique

// G√©n√®re UNIQUEMENT ce JSON avec des scripts COMPLETS et D√âTAILL√âS.`;

//     return prompt;
// }

// // üîç FONCTION DE VALIDATION QUALIT√â
// function validateScriptQuality(narrationScript) {
//     const scripts = Object.values(narrationScript);
//     const minWordCount = 50;

//     let totalWords = 0;
//     let shortScripts = 0;

//     scripts.forEach(script => {
//         const wordCount = script.script.split(' ').length;
//         totalWords += wordCount;
//         if (wordCount < minWordCount) {
//             shortScripts++;
//         }
//     });

//     const avgWordsPerScript = totalWords / scripts.length;
//     const isValid = shortScripts === 0 && avgWordsPerScript >= minWordCount;

//     console.log(`üìä Qualit√© scripts: ${avgWordsPerScript.toFixed(0)} mots/script, ${shortScripts} scripts courts`);

//     return {
//         isValid,
//         averageWords: avgWordsPerScript,
//         shortScripts,
//         totalWords
//     };
// }

// // üé® CR√âATION PROMPT MARKDOWN ENRICHI
// function createEnhancedMarkdownPrompt(planData, resourcesAnalysis) {
//     const { topic, plan_sections, settings } = planData;
//     const { level = 'beginner', duration = 5, style = 'practical' } = settings || {};

//     let prompt = `Cr√©e un Markdown Slidev PROFESSIONNEL et VISUELLEMENT ATTRACTIF pour une formation sur ${topic}.

// EXIGENCES STRICTES:
// - EXACTEMENT ${plan_sections.length} slides (mapping 1:1)
// - Contenu riche et d√©taill√© pour chaque slide
// - Exemples de code fonctionnels pour ${topic}
// - Design moderne et professionnel
// - Navigation fluide

// SP√âCIFICATIONS:
// - Sujet: ${topic}
// - Niveau: ${level} 
// - Dur√©e: ${duration} minutes
// - Style: ${style}
// - Public: D√©butants motiv√©s

// STRUCTURE ATTENDUE:

// # SLIDE TITRE (Intro) 
// - Design accrocheur avec gradient
// - Titre impactant
// - Bouton de navigation anim√©
// - Badge dur√©e formation

// ${plan_sections.map((section, i) => {
//         const slideNum = i + 1;

//         if (section.type === 'introduction') {
//             return `
// # SLIDE ${slideNum}: ${section.title}
// - Layout: intro ou center
// - Objectifs visuels avec ic√¥nes
// - Points d'apprentissage clairement list√©s
// - Design accueillant avec couleurs douces
// - Indicateur de dur√©e (${section.duration_seconds}s)`;
//         } else if (section.type === 'conclusion') {
//             return `
// # SLIDE ${slideNum}: ${section.title}  
// - Layout: center
// - Grille de r√©ussites avec checkmarks
// - Message de f√©licitation
// - Prochaines √©tapes visuelles
// - Call-to-action pour continuer`;
//         } else {
//             return `
// # SLIDE ${slideNum}: ${section.title}
// - Layout: default ou two-cols
// - Contenu: ${section.what_to_cover ? section.what_to_cover.join(', ') : 'concepts essentiels'}
// - Code exemple fonctionnel pour ${topic}
// - Points cl√©s avec mise en forme
// - Encadr√©s explicatifs color√©s`;
//         }
//     }).join('\n')}

// EXEMPLES DE CODE OBLIGATOIRES:
// ${topic.toLowerCase().includes('python') ? `
// - Variables: nom = "Alice", age = 25
// - Conditions: if age >= 18: print("Majeur")  
// - Boucles: for i in range(5): print(i)
// - Fonctions: def saluer(nom): return f"Bonjour {nom}"
// ` : `
// - Code adapt√© au sujet ${topic}
// - Exemples pratiques et fonctionnels
// `}

// G√âN√àRE le Markdown complet avec design professionnel et contenu riche.
// IMPORTANT: Chaque slide doit avoir du contenu substantiel, pas de placeholders !`;

//     return prompt;
// }

// // üéØ G√âN√âRATION D'EXEMPLES DE CODE SP√âCIFIQUES
// function getCodeExample(point, topic) {
//     const pointLower = point.toLowerCase();
//     const topicLower = topic.toLowerCase();

//     if (topicLower.includes('python')) {
//         if (pointLower.includes('variable')) {
//             return `nom = "Alice"
// age = 25
// prix = 19.99
// print(f"{nom} a {age} ans")`;
//         } else if (pointLower.includes('type')) {
//             return `# Types de donn√©es
// entier = 42
// flottant = 3.14
// texte = "Hello"
// liste = [1, 2, 3]
// print(type(entier))`;
//         } else if (pointLower.includes('condition')) {
//             return `age = 18
// if age >= 18:
//     print("Majeur")
// else:
//     print("Mineur")`;
//         } else if (pointLower.includes('boucle')) {
//             return `# Boucle for
// for i in range(5):
//     print(f"It√©ration {i}")`;
//         } else if (pointLower.includes('structure') || pointLower.includes('contr√¥le')) {
//             return `# Structures de contr√¥le
// for nombre in [1, 2, 3, 4, 5]:
//     if nombre % 2 == 0:
//         print(f"{nombre} est pair")
//     else:
//         print(f"{nombre} est impair")`;
//         }
//     }

//     return `# Code d'exemple pour ${point}
// # √Ä compl√©ter selon le contexte`;
// }

// // üîç FONCTION UTILITAIRE POUR EXPLICATIONS D√âTAILL√âES
// function getDetailedExplanation(point, topic) {
//     const pointLower = point.toLowerCase();
//     const topicLower = topic.toLowerCase();

//     if (topicLower.includes('python')) {
//         if (pointLower.includes('variable')) {
//             return 'Les variables en Python stockent des donn√©es et sont cr√©√©es automatiquement lors de l\'affectation.';
//         } else if (pointLower.includes('type')) {
//             return 'Python g√®re automatiquement les types de donn√©es : entiers, flottants, cha√Ænes et listes.';
//         } else if (pointLower.includes('condition')) {
//             return 'Les conditions permettent d\'ex√©cuter du code selon des crit√®res sp√©cifiques.';
//         } else if (pointLower.includes('boucle')) {
//             return 'Les boucles r√©p√®tent des actions, optimisant l\'efficacit√© du code.';
//         }
//     }

//     return `Concept fondamental pour ma√Ætriser ${topic}.`;
// }

// // üéØ SCRIPTS D√âTAILL√âS POUR INTRODUCTION (60 secondes)
// function generateDetailedIntroScript(section, topic, duration, resourcesAnalysis) {
//     let script = '';

//     script += `Bonjour et bienvenue dans cette formation sur ${topic}. `;

//     if (resourcesAnalysis.files_content_integrated) {
//         script += `Cette formation a √©t√© sp√©cialement adapt√©e √† vos documents et √† votre contexte. `;
//     }

//     script += `Je suis ravi de vous accompagner dans cette d√©couverte. `;

//     if (topic.toLowerCase().includes('python')) {
//         script += `Python est l'un des langages de programmation les plus populaires au monde. Il est appr√©ci√© pour sa simplicit√©, sa lisibilit√© et sa polyvalence. `;
//         script += `Que vous souhaitiez d√©velopper des applications web, analyser des donn√©es, cr√©er de l'intelligence artificielle ou automatiser des t√¢ches, Python est un excellent choix. `;
//     } else {
//         script += `${topic} est un sujet fascinant qui vous ouvrira de nouvelles perspectives. `;
//         script += `Au cours de cette formation, nous explorerons ensemble les concepts essentiels et les applications pratiques. `;
//     }

//     script += `Les objectifs de cette formation sont clairs : `;
//     if (section.what_to_cover && section.what_to_cover.length > 0) {
//         section.what_to_cover.forEach((objective, index) => {
//             if (index === section.what_to_cover.length - 1) {
//                 script += `et ${objective.toLowerCase()}. `;
//             } else {
//                 script += `${objective.toLowerCase()}, `;
//             }
//         });
//     } else {
//         script += `vous donner une compr√©hension solide des fondamentaux et vous pr√©parer √† aller plus loin. `;
//     }

//     script += `Cette formation est structur√©e de mani√®re progressive pour optimiser votre apprentissage. `;
//     script += `Nous commencerons par les bases, puis nous approfondirons les concepts cl√©s avant de conclure par une synth√®se pratique. `;
//     script += `Alors, √™tes-vous pr√™t ? Commen√ßons sans plus attendre !`;

//     return script;
// }

// // üéØ SCRIPTS D√âTAILL√âS POUR D√âVELOPPEMENT (100 secondes)
// function generateDetailedDevelopmentScript(section, topic, duration) {
//     let script = '';

//     script += `Nous entrons maintenant dans une section fondamentale : ${section.title}. `;
//     script += `Cette partie est essentielle pour bien ma√Ætriser ${topic}. `;

//     if (topic.toLowerCase().includes('python')) {
//         if (section.title.toLowerCase().includes('variable')) {
//             script += generatePythonVariablesScript(section);
//         } else if (section.title.toLowerCase().includes('structure') || section.title.toLowerCase().includes('contr√¥le')) {
//             script += generatePythonControlScript(section);
//         } else {
//             script += generateGenericDevelopmentScript(section, topic);
//         }
//     } else {
//         script += generateGenericDevelopmentScript(section, topic);
//     }

//     script += `Les points cl√©s √† retenir de cette section sont importants pour la suite. `;
//     if (section.what_to_cover && section.what_to_cover.length > 0) {
//         script += `Premi√®rement, ${section.what_to_cover[0].toLowerCase()}. `;
//         if (section.what_to_cover.length > 1) {
//             script += `Deuxi√®mement, ${section.what_to_cover[1].toLowerCase()}. `;
//         }
//         if (section.what_to_cover.length > 2) {
//             script += `Et enfin, ${section.what_to_cover[2].toLowerCase()}. `;
//         }
//     }

//     script += `Ces concepts vous serviront de base solide pour aborder les aspects plus avanc√©s. `;
//     script += `Prenez le temps de bien assimiler ces notions avant de passer √† la suite. `;

//     return script;
// }

// // üêç SCRIPT SP√âCIALIS√â POUR VARIABLES PYTHON
// function generatePythonVariablesScript(section) {
//     let script = '';

//     script += `En Python, les variables sont la base de tout programme. Contrairement √† d'autres langages, Python n'exige pas de d√©clarer le type d'une variable √† l'avance. `;
//     script += `Vous pouvez simplement √©crire "nom √©gale guillemets Alice guillemets" et Python comprend automatiquement qu'il s'agit d'une cha√Æne de caract√®res. `;
//     script += `Pour les nombres, c'est tout aussi simple : "age √©gale 25" cr√©e une variable enti√®re, tandis que "prix √©gale 19 virgule 99" cr√©e un nombre d√©cimal. `;
//     script += `Python g√®re automatiquement les types de donn√©es, ce qui rend la programmation plus intuitive. `;
//     script += `Les types de base incluent les entiers pour les nombres sans d√©cimale, les flottants pour les nombres avec d√©cimale, les cha√Ænes pour le texte, et les bool√©ens pour vrai ou faux. `;
//     script += `Une fonctionnalit√© tr√®s pratique est l'affichage format√© avec la fonction print et les f-strings. Par exemple, vous pouvez √©crire "print f guillemets nom a age ans guillemets" pour afficher un message personnalis√©. `;

//     return script;
// }

// // üîÑ SCRIPT SP√âCIALIS√â POUR STRUCTURES DE CONTR√îLE PYTHON
// function generatePythonControlScript(section) {
//     let script = '';

//     script += `Les structures de contr√¥le sont ce qui rend vos programmes intelligents et capables de prendre des d√©cisions. `;
//     script += `La condition if-else est fondamentale : elle permet √† votre programme de r√©agir diff√©remment selon les circonstances. `;
//     script += `Par exemple, "if age sup√©rieur ou √©gal √† 18 deux points print Majeur else deux points print Mineur" teste l'√¢ge et affiche le r√©sultat appropri√©. `;
//     script += `L'indentation en Python n'est pas qu'une question de style : elle d√©finit la structure du code. Chaque bloc indent√© appartient √† la condition ou √† la boucle qui le pr√©c√®de. `;
//     script += `Les boucles for vous permettent de r√©p√©ter des actions. "for i in range 5" ex√©cute le code cinq fois, avec i qui prend les valeurs 0, 1, 2, 3, 4. `;
//     script += `La boucle while continue tant qu'une condition est vraie, mais attention aux boucles infinies ! `;
//     script += `Ces structures peuvent √™tre combin√©es pour cr√©er des programmes sophistiqu√©s. Une boucle peut contenir des conditions, et une condition peut contenir d'autres boucles. `;

//     return script;
// }

// // üìö SCRIPT G√âN√âRIQUE POUR D√âVELOPPEMENT
// function generateGenericDevelopmentScript(section, topic) {
//     let script = '';

//     script += `Ce que nous allons voir maintenant va enrichir consid√©rablement votre compr√©hension de ${topic}. `;
//     script += `Les concepts que nous abordons sont utilis√©s quotidiennement par les professionnels du domaine. `;
//     script += `Il est important de comprendre non seulement le "comment" mais aussi le "pourquoi" de chaque notion. `;
//     script += `Chaque √©l√©ment que nous √©tudions s'inscrit dans un √©cosyst√®me plus large et trouve ses applications dans des contextes vari√©s. `;
//     script += `N'h√©sitez pas √† prendre des notes et √† r√©fl√©chir aux applications pratiques de ce que vous apprenez. `;
//     script += `La th√©orie prend tout son sens quand elle est mise en perspective avec des exemples concrets. `;

//     return script;
// }

// // üéØ SCRIPTS D√âTAILL√âS POUR CONCLUSION (40 secondes)
// function generateDetailedConclusionScript(section, topic, duration) {
//     let script = '';

//     script += `Nous arrivons au terme de cette formation sur ${topic}. `;
//     script += `F√©licitations ! Vous avez parcouru un chemin important et acquis des comp√©tences pr√©cieuses. `;

//     if (topic.toLowerCase().includes('python')) {
//         script += `Vous ma√Ætrisez maintenant les fondamentaux de Python : les variables, les types de donn√©es, et les structures de contr√¥le. `;
//         script += `Ces bases solides vous permettront d'aborder des projets plus ambitieux avec confiance. `;
//     } else {
//         script += `Les concepts que nous avons explor√©s ensemble constituent un socle solide pour votre d√©veloppement dans ce domaine. `;
//     }

//     script += `Rappelez-vous que l'apprentissage ne s'arr√™te pas ici. `;
//     script += `Pratiquez r√©guli√®rement, explorez, exp√©rimentez, et n'ayez pas peur de faire des erreurs : elles font partie int√©grante du processus d'apprentissage. `;
//     script += `Je vous encourage vivement √† poursuivre votre formation et √† mettre en pratique ce que vous avez appris. `;
//     script += `Merci de votre attention et de votre engagement. Bonne continuation dans votre parcours !`;

//     return script;
// }

// // üéØ API PRINCIPALE - POST /ai/plan-to-markdown
// router.post('/plan-to-markdown', async (req, res) => {
//     const startTime = Date.now();

//     try {
//         // Validation de base
//         if (!req.body.plan_sections || !req.body.topic) {
//             return res.status(400).json({
//                 error: 'Format invalide',
//                 required: ['plan_sections', 'topic'],
//                 format: 'Utilisez TOUT le r√©sultat de POST /ai/groq-plan'
//             });
//         }

//         const groqPlanData = req.body;
//         console.log(`üìÑ G√©n√©ration Markdown enrichi: ${groqPlanData.topic}`);

//         // üîç ANALYSE DES RESSOURCES DISPONIBLES
//         const resourcesAnalysis = analyzeAvailableResources(groqPlanData);
//         console.log(`üìö Ressources d√©tect√©es: ${resourcesAnalysis.total_files} fichiers, vocabulaire: ${resourcesAnalysis.vocabulary_adapted}`);

//         // üé® G√âN√âRATION MARKDOWN ENRICHI
//         console.log('üé® G√©n√©ration Markdown Slidev enrichi...');
//         const markdownPrompt = createEnhancedMarkdownPrompt(groqPlanData, resourcesAnalysis);
//         const markdownResponse = await callGroq(markdownPrompt, {
//             temperature: 0.7,
//             max_tokens: 8000 // ‚úÖ Augment√© pour plus de contenu
//         });

//         let slideMarkdown = cleanMarkdown(markdownResponse);

//         // Fallback si n√©cessaire
//         if (!slideMarkdown.includes('---\ntheme:')) {
//             console.log('üîÑ G√©n√©ration fallback...');
//             slideMarkdown = createFallbackMarkdown(groqPlanData, resourcesAnalysis);
//         }

//         // FORCER MAPPING 1:1 - UNE SLIDE PAR SECTION
//         const actualSlideCount = groqPlanData.plan_sections.length;
//         console.log(`üìä Slides forc√©es 1:1: ${actualSlideCount} slides = ${groqPlanData.plan_sections.length} sections`);

//         // üîß G√âN√âRATION SCRIPT NARRATION AVEC FONCTIONS D√âTAILL√âES
//         console.log('üé¨ G√©n√©ration script narration d√©taill√©...');

//         let narrationScript;
//         try {
//             // üÜï UTILISER LE PROMPT ENRICHI
//             const enhancedNarrationPrompt = createEnhancedNarrationPrompt(groqPlanData, resourcesAnalysis, actualSlideCount);
//             const narrationResponse = await callGroq(enhancedNarrationPrompt, {
//                 system_content: `Tu es un expert en formation professionnelle qui cr√©e des scripts de narration d√©taill√©s et engageants. 
//                 Chaque script doit √™tre substantiel (150+ mots) avec un contenu riche et p√©dagogique. 
//                 R√©ponds UNIQUEMENT avec du JSON valide contenant des scripts complets.`,
//                 max_tokens: 8000, // ‚úÖ Augment√© pour plus de contenu
//                 temperature: 0.8  // ‚úÖ Plus de cr√©ativit√©
//             });

//             const cleanedNarration = cleanNarrationResponse(narrationResponse);
//             narrationScript = JSON.parse(cleanedNarration);

//             // üÜï VALIDATION QUALIT√â DES SCRIPTS
//             const scriptQuality = validateScriptQuality(narrationScript);
//             if (!scriptQuality.isValid) {
//                 console.warn('‚ö†Ô∏è Scripts trop courts, utilisation du fallback enrichi...');
//                 throw new Error('Scripts insuffisants');
//             }

//             // üÜï VALIDATION SYNCHRONISATION
//             const scriptCount = Object.keys(narrationScript).length;
//             if (scriptCount !== actualSlideCount) {
//                 console.warn(`‚ö†Ô∏è D√©synchronisation d√©tect√©e: ${actualSlideCount} slides vs ${scriptCount} scripts`);
//                 narrationScript = forceSynchronization(narrationScript, actualSlideCount, groqPlanData, resourcesAnalysis);
//             }

//         } catch (parseError) {
//             console.warn('‚ö†Ô∏è Erreur parsing narration, utilisation du fallback ENRICHI...');
//             // ‚úÖ MAINTENANT utilise les fonctions d√©taill√©es
//             narrationScript = createSynchronizedFallbackNarration(groqPlanData, resourcesAnalysis, actualSlideCount);
//         }

//         // üÜï V√âRIFICATION FINALE
//         const finalSlideCount = actualSlideCount;
//         const finalScriptCount = Object.keys(narrationScript).length;

//         console.log(`‚úÖ Synchronisation finale: ${finalSlideCount} slides = ${finalScriptCount} scripts`);

//         // üÜï VALIDATION FINALE DE LA QUALIT√â
//         const finalQuality = validateScriptQuality(narrationScript);
//         console.log(`üìä Qualit√© finale: ${finalQuality.totalWords} mots, ${finalQuality.averageWords.toFixed(0)} mots/script`);

//         // üèóÔ∏è ASSEMBLAGE FINAL
//         const slidesId = uuidv4();
//         const totalTime = Date.now() - startTime;

//         const result = {
//             slides_id: slidesId,

//             // R√âSULTATS PRINCIPAUX (Compatible format existant)
//             markdown: slideMarkdown,
//             narration_script: narrationScript,

//             // üÜï INFORMATIONS SYNCHRONISATION
//             synchronization_info: {
//                 markdown_slides_count: finalSlideCount,
//                 narration_scripts_count: finalScriptCount,
//                 synchronized: finalSlideCount === finalScriptCount,
//                 plan_sections_count: groqPlanData.plan_sections.length,
//                 mapping_type: finalSlideCount === groqPlanData.plan_sections.length ? '1:1' :
//                     finalSlideCount > groqPlanData.plan_sections.length ? 'expanded' : 'compressed'
//             },

//             // üÜï QUALIT√â DU CONTENU
//             content_quality: {
//                 total_words: finalQuality.totalWords,
//                 average_words_per_script: Math.round(finalQuality.averageWords),
//                 min_words_met: finalQuality.isValid,
//                 short_scripts_count: finalQuality.shortScripts,
//                 content_richness: finalQuality.averageWords >= 100 ? 'excellent' :
//                     finalQuality.averageWords >= 50 ? 'good' : 'basic'
//             },

//             // INFORMATIONS RESSOURCES
//             resource_integration: {
//                 files_used_in_markdown: resourcesAnalysis.files_content_integrated,
//                 company_context_applied: resourcesAnalysis.company_context_integrated,
//                 vocabulary_adapted: resourcesAnalysis.vocabulary_adapted,
//                 examples_from_files: resourcesAnalysis.extracted_examples,
//                 procedures_integrated: resourcesAnalysis.procedures_integrated,
//                 terminology_used: resourcesAnalysis.key_terminology
//             },

//             // COMPATIBILIT√â AVEC FORMAT EXISTANT
//             slides_count: finalSlideCount,
//             topic: groqPlanData.topic,
//             source_plan_id: groqPlanData.plan_id,

//             files: {
//                 markdown: `resource_slides_${slidesId}.md`,
//                 narration: `narration_${slidesId}.json`,
//                 script_txt: `script_${slidesId}.txt`
//             },

//             file_sizes: {
//                 markdown_kb: Math.round(slideMarkdown.length / 1024),
//                 narration_kb: Math.round(JSON.stringify(narrationScript).length / 1024)
//             },

//             slidev_commands: {
//                 preview: `slidev resource_slides_${slidesId}.md`,
//                 export_pdf: `slidev export resource_slides_${slidesId}.md --format pdf`,
//                 export_html: `slidev export resource_slides_${slidesId}.md --format html`
//             },

//             video_production: {
//                 total_duration_seconds: Object.values(narrationScript).reduce((sum, script) => sum + script.duration_seconds, 0),
//                 slides_with_timing: Object.keys(narrationScript).length,
//                 ready_for_recording: true,
//                 uses_company_terminology: resourcesAnalysis.vocabulary_adapted,
//                 references_uploaded_files: resourcesAnalysis.files_content_integrated,
//                 perfectly_synchronized: true,
//                 estimated_video_quality: finalQuality.averageWords >= 100 ? 'high' : 'medium'
//             },

//             generation_time_ms: totalTime,
//             generated_at: new Date().toISOString(),
//             status: 'completed',
//             ready_for_production: true,

//             next_steps: {
//                 audio_generation: 'POST /ai/generate-narration-bark avec script synchronis√©',
//                 customization: resourcesAnalysis.company_context_integrated ?
//                     'Contenu d√©j√† adapt√© √† votre contexte' :
//                     'Personnaliser selon votre contexte',
//                 video_creation: 'Utiliser Slidev pour cr√©er la vid√©o avec les scripts enrichis'
//             }
//         };

//         console.log(`‚úÖ G√©n√©ration compl√®te: ${finalSlideCount} slides synchronis√©es, ${finalQuality.totalWords} mots total, ${resourcesAnalysis.total_files} fichiers int√©gr√©s, ${totalTime}ms`);
//         res.json(result);

//     } catch (error) {
//         const totalTime = Date.now() - startTime;
//         console.error('‚ùå Erreur plan-to-markdown:', error);
//         res.status(500).json({
//             error: 'Erreur g√©n√©ration markdown',
//             generation_time_ms: totalTime,
//             details: error.message
//         });
//     }
// });

// // üîß ROUTE SAUVEGARDE
// router.post('/save-files', async (req, res) => {
//     try {
//         const { markdown, narration_script, slides_id } = req.body;

//         if (!markdown) {
//             return res.status(400).json({
//                 error: 'Le champ "markdown" est requis'
//             });
//         }

//         const slidesDir = path.join(__dirname, '..', '..', 'generated-slides');
//         await fs.mkdir(slidesDir, { recursive: true });

//         const baseFilename = slides_id || `resource_slides_${Date.now()}`;
//         const savedFiles = [];

//         // Sauvegarder markdown
//         const markdownFile = `${baseFilename}.md`;
//         const markdownPath = path.join(slidesDir, markdownFile);
//         await fs.writeFile(markdownPath, markdown, 'utf8');
//         savedFiles.push(markdownFile);

//         // Sauvegarder script narration
//         if (narration_script) {
//             const narrationFile = `narration_${baseFilename}.json`;
//             const narrationPath = path.join(slidesDir, narrationFile);
//             await fs.writeFile(narrationPath, JSON.stringify(narration_script, null, 2), 'utf8');
//             savedFiles.push(narrationFile);

//             // Script texte
//             const scriptText = Object.entries(narration_script)
//                 .map(([slide, data]) => `=== ${data.title} (${data.duration_seconds}s) ===\n${data.script}\n`)
//                 .join('\n');

//             const scriptFile = `script_${baseFilename}.txt`;
//             const scriptPath = path.join(slidesDir, scriptFile);
//             await fs.writeFile(scriptPath, scriptText, 'utf8');
//             savedFiles.push(scriptFile);
//         }

//         res.json({
//             message: 'Fichiers sauv√©s avec succ√®s',
//             saved_files: savedFiles,
//             directory: slidesDir,
//             slidev_command: `cd generated-slides && slidev ${markdownFile}`
//         });

//     } catch (error) {
//         res.status(500).json({
//             error: 'Erreur sauvegarde',
//             details: error.message
//         });
//     }
// });

// // üîß ROUTE INFO
// router.get('/plan-to-markdown/info', (req, res) => {
//     res.json({
//         endpoint: 'POST /ai/plan-to-markdown',
//         description: 'Convertit le plan en Markdown Slidev enrichi avec narration d√©taill√©e et synchronisation parfaite',
//         version: '7.0 - SCRIPTS D√âTAILL√âS + VALIDATION QUALIT√â',
//         status: '‚úÖ OP√âRATIONNEL',

//         corrections_v7: [
//             'üîß Scripts narration d√©taill√©s (150+ mots)',
//             'üìä Validation qualit√© automatique',
//             'üéØ Fallback enrichi avec fonctions d√©taill√©es',
//             'üíª Markdown visuellement attractif',
//             '‚è±Ô∏è Synchronisation 1:1 garantie',
//             'üé¨ Pr√™t pour production vid√©o'
//         ],

//         fonctionnalit√©s: [
//             'üîÑ Synchronisation automatique slides ‚Üî scripts narration',
//             'üìö Scripts d√©taill√©s (150-250 mots par slide)',
//             'üé¨ Narration professionnelle et naturelle',
//             'üè¢ Adaptation automatique au contexte entreprise',
//             'üîë Int√©gration terminologie sp√©cifique',
//             'üí° Exemples personnalis√©s des documents',
//             'üìä Validation et correction automatique',
//             'üíª G√©n√©ration automatique d\'exemples de code',
//             'üé® Design Slidev moderne et attractif'
//         ],

//         quality_features: [
//             '‚úÖ Scripts minimum 50 mots (objectif 150+)',
//             'üìä Validation automatique de la qualit√©',
//             'üîß Fallback enrichi si API insuffisante',
//             '‚öñÔ∏è Contenu substantiel et professionnel',
//             'üîç Logs d√©taill√©s pour debugging'
//         ],

//         video_production_ready: [
//             'üé¨ Scripts narration complets et d√©taill√©s',
//             '‚è±Ô∏è Synchronisation parfaite timing/contenu',
//             'üéØ Contenu adapt√© au rythme de parole naturel',
//             'üí´ Transitions fluides entre sections',
//             'üèÜ Qualit√© professionnelle garantie'
//         ],

//         workflow: [
//             '1. POST /ai/groq-plan (g√©n√®re 4 sections)',
//             '2. POST /ai/plan-to-markdown (g√©n√®re 4 slides + scripts d√©taill√©s)',
//             '3. Validation qualit√© automatique',
//             '4. Synchronisation 1:1 forc√©e',
//             '5. POST /ai/save-files (sauvegarde)',
//             '6. slidev preview (cr√©ation vid√©o)'
//         ],

//         garanties: {
//             synchronization: '100% - Nombre slides = scripts = sections',
//             content_quality: 'Scripts d√©taill√©s 150+ mots',
//             timing_accuracy: 'Dur√©es exactes du plan respect√©es',
//             video_ready: 'Pr√™t pour production vid√©o imm√©diate',
//             fallback_quality: 'Fallback enrichi si API √©choue'
//         }
//     });
// });

// // üß™ ROUTE DE TEST SYNCHRONISATION
// router.post('/test-synchronization', async (req, res) => {
//     try {
//         const { markdown, plan_sections } = req.body;

//         if (!markdown || !plan_sections) {
//             return res.status(400).json({
//                 error: 'markdown et plan_sections requis'
//             });
//         }

//         const slideCount = plan_sections.length;
//         const sectionCount = plan_sections.length;

//         // Test de synchronisation
//         const mockResourcesAnalysis = {
//             total_files: 0,
//             vocabulary_adapted: false,
//             files_content_integrated: false,
//             key_terminology: [],
//             extracted_examples: []
//         };

//         const syncedNarration = createSynchronizedFallbackNarration(
//             { plan_sections },
//             mockResourcesAnalysis,
//             slideCount
//         );

//         // Test de qualit√©
//         const qualityTest = validateScriptQuality(syncedNarration);

//         res.json({
//             test_results: {
//                 detected_slides: slideCount,
//                 plan_sections: sectionCount,
//                 generated_scripts: Object.keys(syncedNarration).length,
//                 synchronized: Object.keys(syncedNarration).length === slideCount,
//                 mapping_type: '1:1 FORC√â'
//             },
//             quality_analysis: {
//                 total_words: qualityTest.totalWords,
//                 average_words_per_script: Math.round(qualityTest.averageWords),
//                 quality_met: qualityTest.isValid,
//                 short_scripts: qualityTest.shortScripts,
//                 content_richness: qualityTest.averageWords >= 100 ? 'excellent' : 'good'
//             },
//             mapping_analysis: {
//                 type: '1:1',
//                 ratio: 1.0,
//                 forced: true,
//                 no_expansion: true
//             },
//             generated_narration: syncedNarration,
//             success: true,
//             version: '7.0 - Scripts d√©taill√©s + validation qualit√©'
//         });

//     } catch (error) {
//         res.status(500).json({
//             error: 'Erreur test synchronisation',
//             details: error.message
//         });
//     }
// });

// module.exports = router;
























// le precedent marche bien mais prend bcp de texte par slide

// const express = require('express');
// const axios = require('axios');
// const { v4: uuidv4 } = require('uuid');
// const fs = require('fs').promises;
// const path = require('path');

// const router = express.Router();

// // ü§ñ Fonction Groq pour g√©n√©ration intelligente
// async function callGroq(prompt, options = {}) {
//     try {
//         const response = await axios.post('https://api.groq.com/openai/v1/chat/completions', {
//             model: process.env.GROQ_MODEL || 'llama-3.3-70b-versatile',
//             messages: [
//                 {
//                     role: 'system',
//                     content: options.system_content || 'Tu es un expert Slidev qui cr√©e du Markdown sophistiqu√© en utilisant intelligemment les ressources fournies. R√©ponds UNIQUEMENT avec du Markdown Slidev valide.'
//                 },
//                 {
//                     role: 'user',
//                     content: prompt
//                 }
//             ],
//             temperature: options.temperature || 0.7,
//             max_tokens: options.max_tokens || 5000
//         }, {
//             headers: {
//                 'Authorization': `Bearer ${process.env.GROQ_API_KEY}`,
//                 'Content-Type': 'application/json'
//             }
//         });

//         return response.data.choices[0].message.content;
//     } catch (error) {
//         console.error('‚ùå Erreur Groq:', error.message);
//         throw new Error('Erreur g√©n√©ration IA: ' + error.message);
//     }
// }

// // üîß FONCTIONS UTILITAIRES
// function cleanMarkdown(markdown) {
//     return markdown
//         .replace(/```markdown\n/g, '')
//         .replace(/\n```/g, '')
//         .replace(/```/g, '')
//         .trim();
// }

// function cleanNarrationResponse(response) {
//     return response
//         .replace(/```json\n/g, '')
//         .replace(/\n```/g, '')
//         .replace(/```/g, '')
//         .replace(/^[^{]*/, '')
//         .replace(/[^}]*$/, '')
//         .trim();
// }

// // üîß G√âN√âRATION CODE SECTION ADAPT√âE POUR VISUELS
// function generateCodeSection(topic, section) {
//     const topicLower = topic.toLowerCase();

//     if (topicLower.includes('python')) {
//         if (section.title.toLowerCase().includes('variable')) {
//             return `    <div class="bg-gray-900 rounded-lg p-4">
//       <div class="text-green-400 text-sm mb-2"># Variables Python</div>
//       <pre><code class="text-green-300">nom = "Alice"
// age = 25
// prix = 19.99
// print(f"{nom} a {age} ans")</code></pre>
//     </div>`;
//         } else if (section.title.toLowerCase().includes('structure') || section.title.toLowerCase().includes('contr√¥le')) {
//             return `    <div class="bg-gray-900 rounded-lg p-4">
//       <div class="text-green-400 text-sm mb-2"># Structures de contr√¥le</div>
//       <pre><code class="text-green-300">age = 18
// if age >= 18:
//     print("Majeur")
// else:
//     print("Mineur")</code></pre>
//     </div>`;
//         } else {
//             return `    <div class="bg-gray-900 rounded-lg p-4">
//       <div class="text-green-400 text-sm mb-2"># Exemple Python</div>
//       <pre><code class="text-green-300"># Code exemple pour ${section.title}
// def exemple():
//     return "Hello World"</code></pre>
//     </div>`;
//         }
//     } else if (topicLower.includes('excel')) {
//         return `    <div class="bg-gray-900 rounded-lg p-4">
//       <div class="text-green-400 text-sm mb-2"># Formules Excel</div>
//       <pre><code class="text-green-300">=SOMME(A1:A10)
// =SI(B2>100;"√âlev√©";"Faible")
// =RECHERCHEV(A1;Table;2;FAUX)</code></pre>
//     </div>`;
//     } else {
//         return `    <div class="bg-blue-50 dark:bg-blue-900/20 p-6 rounded-lg">
//       <h4 class="text-lg font-semibold mb-4">üìã Exemple pratique</h4>
//       <div class="text-sm">
//         Application concr√®te des concepts de ${section.title}
//       </div>
//     </div>`;
//     }
// }

// // üîß G√âN√âRATION CODE SECTION FALLBACK
// function generateCodeSectionFallback(topic, section) {
//     const topicLower = topic.toLowerCase();

//     if (topicLower.includes('python')) {
//         if (section.title.toLowerCase().includes('variable')) {
//             return `    <div class="bg-gray-900 rounded-lg p-4">
//       <div class="text-green-400 text-sm mb-2"># Variables Python</div>
//       <pre><code class="text-green-300">nom = "Alice"
// age = 25
// prix = 19.99
// print(f"{nom} a {age} ans")</code></pre>
//     </div>`;
//         } else if (section.title.toLowerCase().includes('structure')) {
//             return `    <div class="bg-gray-900 rounded-lg p-4">
//       <div class="text-green-400 text-sm mb-2"># Structures de contr√¥le</div>
//       <pre><code class="text-green-300">age = 18
// if age >= 18:
//     print("Majeur")
// else:
//     print("Mineur")</code></pre>
//     </div>`;
//         }
//     } else if (topicLower.includes('excel')) {
//         return `    <div class="bg-gray-900 rounded-lg p-4">
//       <div class="text-green-400 text-sm mb-2"># Formules Excel</div>
//       <pre><code class="text-green-300">=SOMME(A1:A10)
// =MOYENNE(B1:B20)
// =SI(A1>100;"√âlev√©";"Faible")</code></pre>
//     </div>`;
//     }

//     return `    <div class="bg-blue-50 dark:bg-blue-900/20 p-6 rounded-lg">
//       <h4 class="text-lg font-semibold mb-4">üìã Exemple pratique</h4>
//       <div class="text-sm">
//         Application concr√®te de ${section.title}
//       </div>
//     </div>`;
// }

// // üé® CR√âATION PROMPT MARKDOWN OPTIMIS√â POUR VISUELS
// function createOptimizedMarkdownPrompt(planData, resourcesAnalysis) {
//     const { topic, plan_sections, settings } = planData;
//     const { level = 'beginner', duration = 5, style = 'practical' } = settings || {};

//     let prompt = `Cr√©e un Markdown Slidev OPTIMIS√â pour g√©n√©ration de visuels sur ${topic}.

// CONTRAINTES STRICTES POUR PARSER DE VISUELS:
// - EXACTEMENT ${plan_sections.length} slides principales (hors m√©tadonn√©es)
// - Chaque slide doit avoir un titre clair avec # ou ##
// - Dur√©e explicite avec ‚è±Ô∏è XXs sur chaque slide
// - Contenu substantiel et parsable
// - S√©parateurs --- nets entre slides

// STRUCTURE OBLIGATOIRE:

// # M√âTADONN√âES (sera filtr√©e par le parser)
// ---
// theme: default
// background: linear-gradient(135deg, #4F46E5 0%, #3730A3 100%)
// class: text-center
// title: ${topic}
// ---

// ${plan_sections.map((section, i) => {
//         const slideNum = i + 1;
//         const duration = section.duration_seconds || 60;

//         if (section.type === 'introduction') {
//             return `
// # SLIDE ${slideNum}: ${section.title}
// Layout: intro ou center obligatoire
// Dur√©e: ${duration}s

// Exemple attendu:
// # ${section.title}

// <div class="max-w-4xl mx-auto">
//   <div class="text-6xl mb-6">üéØ</div>
//   <div class="text-2xl text-blue-200 mb-4">Objectifs clairs</div>

//   <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
//     <div>
// ${section.what_to_cover ? section.what_to_cover.map(point => `      <div class="flex items-center mb-4">
//         <div class="text-2xl mr-3">‚úÖ</div>
//         <div class="text-lg">${point}</div>
//       </div>`).join('\n') : '      <div class="text-lg">Concepts fondamentaux</div>'}
//     </div>
//     <div class="text-center">
//       <div class="bg-blue-100/10 rounded-xl p-6">
//         <div class="text-4xl mb-4">üìö</div>
//         <div class="text-xl font-semibold">Formation ${topic}</div>
//         <div class="text-blue-300">Niveau ${level}</div>
//       </div>
//     </div>
//   </div>
// </div>

// ‚è±Ô∏è ${duration}s`;

//         } else if (section.type === 'conclusion') {
//             return `
// # SLIDE ${slideNum}: ${section.title}
// Layout: center obligatoire
// Dur√©e: ${duration}s

// Exemple attendu:
// # ${section.title}

// <div class="max-w-4xl mx-auto">
//   <div class="grid grid-cols-2 md:grid-cols-3 gap-6 mb-12">
// ${section.what_to_cover ? section.what_to_cover.map(point => `    <div class="bg-green-100/20 p-6 rounded-xl">
//       <div class="text-4xl mb-4">‚úÖ</div>
//       <div class="font-bold text-lg mb-2">${point}</div>
//       <div class="text-sm">Comp√©tence ma√Ætris√©e</div>
//     </div>`).join('\n') : `    <div class="bg-green-100/20 p-6 rounded-xl">
//       <div class="text-4xl mb-4">‚úÖ</div>
//       <div class="font-bold text-lg mb-2">Objectifs atteints</div>
//     </div>`}
//   </div>

//   <div class="pt-8">
//     <span class="px-10 py-5 rounded-xl bg-gradient-to-r from-green-400 via-blue-500 to-purple-600 text-white font-bold text-2xl">
//       üéâ Formation termin√©e !
//     </span>
//     <div class="mt-4 text-lg text-blue-200">
//       Vous ma√Ætrisez maintenant ${topic} !
//     </div>
//   </div>
// </div>

// ‚è±Ô∏è ${duration}s`;

//         } else {
//             // Type development/content
//             return `
// # SLIDE ${slideNum}: ${section.title}
// Layout: default obligatoire
// Dur√©e: ${duration}s

// Exemple attendu:
// # ${section.title}

// <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
//   <div>
// ${section.what_to_cover ? section.what_to_cover.map((point, index) => `
//     <div class="mb-6">
//       <h3 class="text-xl font-semibold mb-3 flex items-center">
//         <span class="bg-blue-500 text-white rounded-full w-8 h-8 flex items-center justify-center text-sm mr-3">${index + 1}</span>
//         ${point}
//       </h3>
//       <div class="text-gray-600 dark:text-gray-300">
//         Explication d√©taill√©e de ${point.toLowerCase()}
//       </div>
//     </div>`).join('') : `
//     <div class="mb-6">
//       <h3 class="text-xl font-semibold mb-3">Concepts essentiels</h3>
//       <div class="text-gray-600 dark:text-gray-300">
//         Points cl√©s √† ma√Ætriser pour ${topic}
//       </div>
//     </div>`}
//   </div>

//   <div>
// ${generateCodeSection(topic, section)}

//     <div class="mt-6 p-4 bg-green-50 dark:bg-green-900/20 rounded-lg">
//       <h4 class="font-semibold text-green-700 dark:text-green-300 mb-2">üí° Points cl√©s</h4>
//       <ul class="text-sm text-green-600 dark:text-green-400 space-y-1">
//         <li>‚Ä¢ Concept fondamental</li>
//         <li>‚Ä¢ Application pratique</li>
//         <li>‚Ä¢ Bonne pratique recommand√©e</li>
//       </ul>
//     </div>
//   </div>
// </div>

// ‚è±Ô∏è ${duration}s`;
//         }
//     }).join('\n')}

// R√àGLES ABSOLUES POUR COMPATIBILIT√â PARSER:
// 1. Chaque slide DOIT commencer par # TitreClairEtCourt
// 2. Chaque slide DOIT finir par ‚è±Ô∏è XXs
// 3. S√©parateurs --- entre chaque slide
// 4. Contenu riche avec HTML/CSS valide
// 5. √âmojis pour am√©liorer la d√©tection visuelle
// 6. Pas de placeholders ou contenu g√©n√©rique

// G√âN√àRE le Markdown Slidev complet avec ${plan_sections.length} slides parfaitement structur√©es.`;

//     return prompt;
// }

// // üîß FALLBACK MARKDOWN OPTIMIS√â POUR PARSER
// function createOptimizedFallbackMarkdown(planData, resourcesAnalysis) {
//     const { topic, plan_sections, settings } = planData;
//     const { duration = 5 } = settings || {};

//     let markdown = `---
// theme: default
// background: linear-gradient(135deg, #4F46E5 0%, #3730A3 100%)
// class: text-center
// title: ${topic}
// ---

// # ${topic}
// ## Formation ${duration} minutes

// <div class="text-center">
//   <div class="text-6xl mb-6">üéØ</div>
//   <div class="text-2xl text-blue-200 mb-4">Formation compl√®te et pratique</div>
//   ${resourcesAnalysis.files_content_integrated ? `
//   <div class="text-sm mt-4 bg-blue-50 dark:bg-blue-900/20 p-3 rounded-lg">
//     üìö Formation enrichie par ${resourcesAnalysis.total_files} document(s)
//   </div>
//   ` : ''}
//   <span class="px-8 py-4 rounded-xl bg-gradient-to-r from-blue-500 to-purple-600 text-white font-bold text-xl">
//     üöÄ Commencer
//   </span>
// </div>

// ‚è±Ô∏è 45s

// `;

//     plan_sections.forEach((section, index) => {
//         const duration = section.duration_seconds || 60;

//         markdown += `---

// # ${section.title}

// `;

//         if (section.type === 'introduction') {
//             markdown += `<div class="max-w-4xl mx-auto">
//   <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
//     <div>
//       <h3 class="text-3xl font-bold mb-6 text-blue-300">üéØ Objectifs</h3>
//       <ul class="text-xl space-y-3 text-left">
// ${section.what_to_cover ? section.what_to_cover.map(point => `        <li>‚Ä¢ <strong>${point}</strong></li>`).join('\n') : '        <li>‚Ä¢ <strong>Comprendre les bases</strong></li>'}
//       </ul>
//     </div>
//     <div class="text-center">
//       <div class="bg-blue-100/10 rounded-xl p-6">
//         <div class="text-4xl mb-4">üìö</div>
//         <div class="text-xl font-semibold">Formation ${topic}</div>
//         <div class="text-blue-300">Niveau d√©butant</div>
//       </div>
//     </div>
//   </div>
// </div>

// ‚è±Ô∏è ${duration}s

// `;

//         } else if (section.type === 'conclusion') {
//             markdown += `<div class="max-w-4xl mx-auto">
//   <div class="grid grid-cols-2 md:grid-cols-3 gap-6 mb-12">
// ${section.what_to_cover ? section.what_to_cover.map(point => `    <div class="bg-green-100/20 p-6 rounded-xl">
//       <div class="text-4xl mb-4">‚úÖ</div>
//       <div class="font-bold text-lg mb-2">${point}</div>
//       <div class="text-sm">Comp√©tence acquise</div>
//     </div>`).join('\n') : `    <div class="bg-green-100/20 p-6 rounded-xl">
//       <div class="text-4xl mb-4">‚úÖ</div>
//       <div class="font-bold text-lg mb-2">Objectifs atteints</div>
//     </div>`}
//   </div>

//   <div class="pt-8">
//     <span class="px-10 py-5 rounded-xl bg-gradient-to-r from-green-400 via-blue-500 to-purple-600 text-white font-bold text-2xl">
//       üéâ Formation termin√©e !
//     </span>
//     <div class="mt-4 text-lg text-blue-200">
//       Vous ma√Ætrisez maintenant ${topic} !
//     </div>
//   </div>
// </div>

// ‚è±Ô∏è ${duration}s

// `;

//         } else {
//             // Type development
//             markdown += `<div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
//   <div>
// ${section.what_to_cover ? section.what_to_cover.map((point, i) => `
//     <div class="mb-6">
//       <h3 class="text-xl font-semibold mb-3 flex items-center">
//         <span class="bg-blue-500 text-white rounded-full w-8 h-8 flex items-center justify-center text-sm mr-3">${i + 1}</span>
//         ${point}
//       </h3>
//       <div class="text-gray-600 dark:text-gray-300">
//         ${getDetailedExplanation(point, topic)}
//       </div>
//     </div>
// `).join('') : `
//     <div class="mb-6">
//       <h3 class="text-xl font-semibold mb-3">Concepts essentiels</h3>
//       <div class="text-gray-600 dark:text-gray-300">
//         Points cl√©s √† ma√Ætriser pour ${topic}
//       </div>
//     </div>
// `}
//   </div>

//   <div>
// ${generateCodeSectionFallback(topic, section)}

//     <div class="mt-6 p-4 bg-green-50 dark:bg-green-900/20 rounded-lg">
//       <h4 class="font-semibold text-green-700 dark:text-green-300 mb-2">üí° Points cl√©s</h4>
//       <ul class="text-sm text-green-600 dark:text-green-400 space-y-1">
//         <li>‚Ä¢ Syntaxe simple et intuitive</li>
//         <li>‚Ä¢ Application pratique imm√©diate</li>
//         <li>‚Ä¢ Bonne pratique recommand√©e</li>
//       </ul>
//     </div>
//   </div>
// </div>

// ‚è±Ô∏è ${duration}s

// `;
//         }
//     });

//     return markdown;
// }

// // ‚úÖ VALIDATION MARKDOWN POUR PARSER DE VISUELS
// function validateMarkdownForVisuals(markdown, expectedSlides) {
//     const validation = {
//         valid: true,
//         detected_slides: 0,
//         titles_clear: false,
//         durations_present: false,
//         content_structured: false,
//         emojis_present: false,
//         issues: []
//     };

//     // Compter les slides r√©elles (sections avec contenu)
//     const sections = markdown.split('---').filter(section => section.trim().length > 0);
//     validation.detected_slides = Math.max(1, sections.length - 1); // -1 pour les m√©tadonn√©es

//     // V√©rifier titres clairs
//     const titles = markdown.match(/^# [^#\n]+$/gm) || [];
//     validation.titles_clear = titles.length >= expectedSlides;
//     if (!validation.titles_clear) {
//         validation.issues.push(`Titres insuffisants: ${titles.length}/${expectedSlides}`);
//     }

//     // V√©rifier dur√©es pr√©sentes
//     const durations = markdown.match(/‚è±Ô∏è\s*\d+s/g) || [];
//     validation.durations_present = durations.length >= expectedSlides;
//     if (!validation.durations_present) {
//         validation.issues.push(`Dur√©es manquantes: ${durations.length}/${expectedSlides}`);
//     }

//     // V√©rifier structure de contenu
//     validation.content_structured = markdown.includes('<div') && markdown.includes('class=');
//     if (!validation.content_structured) {
//         validation.issues.push('Structure HTML/CSS insuffisante');
//     }

//     // V√©rifier pr√©sence d'√©mojis
//     validation.emojis_present = /[\u{1F600}-\u{1F64F}]|[\u{1F300}-\u{1F5FF}]|[\u{1F680}-\u{1F6FF}]|üéØ|üöÄ|‚úÖ|üìö|üí°/u.test(markdown);
//     if (!validation.emojis_present) {
//         validation.issues.push('√âmojis manquants pour d√©tection visuelle');
//     }

//     // Validation globale
//     validation.valid = validation.titles_clear && validation.durations_present && validation.content_structured;

//     return validation;
// }

// // üîß CORRECTION MARKDOWN POUR PARSER
// function fixMarkdownForVisuals(markdown, planData, resourcesAnalysis) {
//     console.log('üîß Correction automatique du markdown pour parser...');

//     // Si le markdown est trop cass√©, utiliser le fallback optimis√©
//     const basicValidation = markdown.includes('---') && markdown.includes('#');
//     if (!basicValidation) {
//         return createOptimizedFallbackMarkdown(planData, resourcesAnalysis);
//     }

//     let fixedMarkdown = markdown;

//     // Assurer les dur√©es sur chaque slide
//     const sections = fixedMarkdown.split('---');
//     const fixedSections = sections.map((section, index) => {
//         if (index === 0) return section; // M√©tadonn√©es

//         const sectionIndex = index - 1;
//         const correspondingSection = planData.plan_sections[sectionIndex];

//         if (correspondingSection && !section.includes('‚è±Ô∏è')) {
//             const duration = correspondingSection.duration_seconds || 60;
//             section += `\n\n‚è±Ô∏è ${duration}s`;
//         }

//         // Assurer un titre clair
//         if (!section.match(/^# [^#\n]+$/m) && correspondingSection) {
//             section = `\n# ${correspondingSection.title}\n\n${section}`;
//         }

//         return section;
//     });

//     fixedMarkdown = fixedSections.join('---');

//     // Ajouter des √©mojis si manquants
//     if (!/[\u{1F600}-\u{1F64F}]|[\u{1F300}-\u{1F5FF}]|[\u{1F680}-\u{1F6FF}]|üéØ|üöÄ|‚úÖ|üìö|üí°/u.test(fixedMarkdown)) {
//         fixedMarkdown = fixedMarkdown.replace(/^# ([^\n]+)$/gm, '# $1 üéØ');
//     }

//     return fixedMarkdown;
// }

// // üÜï FONCTIONS DE SYNCHRONISATION (gard√©es identiques)
// function countActualSlides(markdown) {
//     const slidesSeparators = markdown.match(/^---$/gm) || [];
//     let slideCount = Math.max(1, slidesSeparators.length - 1);

//     const layoutsFound = markdown.match(/layout:\s*(intro|default|two-cols|center|end)/g) || [];
//     if (layoutsFound.length > 0) {
//         slideCount = Math.max(slideCount, layoutsFound.length);
//     }

//     const titleSlides = markdown.match(/^#\s+.+$/gm) || [];
//     if (titleSlides.length > slideCount) {
//         slideCount = titleSlides.length;
//     }

//     console.log(`üìä D√©tection slides: separators=${slidesSeparators.length - 1}, layouts=${layoutsFound.length}, titles=${titleSlides.length}, final=${slideCount}`);
//     return Math.max(slideCount, 1);
// }

// function forceSynchronization(narrationScript, targetCount, planData, resourcesAnalysis) {
//     const currentCount = Object.keys(narrationScript).length;

//     if (currentCount === targetCount) {
//         return narrationScript;
//     }

//     console.log(`üîß For√ßage synchronisation: ${currentCount} ‚Üí ${targetCount} scripts`);
//     return createSynchronizedFallbackNarration(planData, resourcesAnalysis, targetCount);
// }

// // üîß FONCTION CORRIG√âE - createSynchronizedFallbackNarration
// function createSynchronizedFallbackNarration(planData, resourcesAnalysis, slideCount) {
//     const { plan_sections } = planData;
//     const narration = {};

//     console.log(`üîß Cr√©ation narration synchronis√©e 1:1: ${slideCount} scripts pour ${plan_sections.length} sections`);

//     for (let i = 0; i < slideCount; i++) {
//         const slideKey = `slide_${i + 1}`;
//         const mappedSection = plan_sections[i];

//         let tone = 'p√©dagogique';
//         let title = mappedSection.title;
//         let script = '';

//         const sectionDuration = mappedSection.duration_seconds || 60;

//         // üéØ UTILISATION FORC√âE DES FONCTIONS D√âTAILL√âES
//         if (mappedSection.type === 'introduction') {
//             tone = 'accueillant';
//             title = mappedSection.title || 'Introduction';
//             script = generateDetailedIntroScript(mappedSection, planData.topic, sectionDuration, resourcesAnalysis);

//         } else if (mappedSection.type === 'conclusion') {
//             tone = 'motivant';
//             title = mappedSection.title;
//             script = generateDetailedConclusionScript(mappedSection, planData.topic, sectionDuration);

//         } else {
//             tone = 'p√©dagogique';
//             script = generateDetailedDevelopmentScript(mappedSection, planData.topic, sectionDuration);
//         }

//         narration[slideKey] = {
//             title: title,
//             duration_seconds: sectionDuration,
//             script: script, // ‚úÖ Maintenant utilise les scripts d√©taill√©s
//             tone: tone,
//             key_phrases: resourcesAnalysis.key_terminology.slice(0, 2) || ["Point important"],
//             uses_resources: resourcesAnalysis.files_content_integrated,
//             mapped_from_section: i + 1,
//             slide_position: i + 1,
//             auto_generated: false
//         };
//     }

//     return narration;
// }

// // üîç ANALYSE DES RESSOURCES DISPONIBLES
// function analyzeAvailableResources(groqPlanData) {
//     const analysis = {
//         total_files: 0,
//         files_content_integrated: false,
//         company_context_integrated: false,
//         vocabulary_adapted: false,
//         procedures_integrated: false,
//         examples_extracted: false,
//         key_terminology: [],
//         extracted_examples: [],
//         file_references: [],
//         adaptation_quality: 'basic'
//     };

//     // Analyser les fichiers trait√©s
//     if (groqPlanData.files_processing) {
//         analysis.total_files = groqPlanData.files_processing.processed_successfully || 0;
//         analysis.files_content_integrated = analysis.total_files > 0;

//         if (groqPlanData.files_processing.processed_files) {
//             groqPlanData.files_processing.processed_files.forEach(file => {
//                 if (file.status === 'parsed') {
//                     analysis.file_references.push({
//                         name: file.name,
//                         type: file.content_type,
//                         topics: file.key_topics
//                     });

//                     if (file.has_procedures) analysis.procedures_integrated = true;
//                     if (file.has_examples) analysis.examples_extracted = true;
//                     if (file.key_topics) analysis.key_terminology.push(...file.key_topics);
//                 }
//             });
//         }
//     }

//     // Analyser l'enrichissement
//     if (groqPlanData.resources_enrichment) {
//         analysis.company_context_integrated = groqPlanData.resources_enrichment.has_company_context;
//         analysis.vocabulary_adapted = groqPlanData.resources_enrichment.adaptation_applied?.vocabulary_adapted || false;
//     }

//     // Extraire des sections du plan
//     if (groqPlanData.plan_sections) {
//         groqPlanData.plan_sections.forEach(section => {
//             if (section.enhanced_with_resources) {
//                 if (section.key_terminology) {
//                     analysis.key_terminology.push(...section.key_terminology);
//                 }
//                 if (section.examples_from_resources) {
//                     analysis.extracted_examples.push(...section.examples_from_resources);
//                 }
//             }
//         });
//     }

//     // D√©duplication
//     analysis.key_terminology = [...new Set(analysis.key_terminology.flat())].slice(0, 10);
//     analysis.extracted_examples = [...new Set(analysis.extracted_examples.flat())].slice(0, 8);

//     // Calcul qualit√©
//     if (analysis.files_content_integrated && analysis.vocabulary_adapted && analysis.company_context_integrated) {
//         analysis.adaptation_quality = 'excellent';
//     } else if (analysis.files_content_integrated || analysis.vocabulary_adapted) {
//         analysis.adaptation_quality = 'good';
//     }

//     return analysis;
// }

// // üé® PROMPT GROQ ENRICHI POUR NARRATION
// function createEnhancedNarrationPrompt(planData, resourcesAnalysis, actualSlideCount) {
//     const { topic, plan_sections, settings } = planData;
//     const { level = 'beginner', duration = 5 } = settings || {};

//     let prompt = `Cr√©e un script de narration D√âTAILL√â et COMPLET pour une formation professionnelle sur ${topic}.

// CONTRAINTES STRICTES:
// - EXACTEMENT ${actualSlideCount} scripts (mapping 1:1 avec les slides)
// - Chaque script doit faire 150-250 mots minimum
// - Langage naturel et professionnel
// - Contenu substantiel et p√©dagogique
// - Adaptation au niveau ${level}

// FORMATION:
// - Sujet: ${topic}
// - Niveau: ${level}
// - Dur√©e totale: ${duration} minutes
// - Public cible: D√©butants avec soif d'apprendre

// STRUCTURE OBLIGATOIRE:
// ${plan_sections.map((section, i) => {
//         const slideNum = i + 1;
//         let promptType = '';

//         if (section.type === 'introduction') {
//             promptType = `
// SLIDE ${slideNum} - INTRODUCTION (${section.duration_seconds}s):
// - Accueil chaleureux et professionnel
// - Pr√©sentation du sujet ${topic} et de ses avantages
// - Objectifs clairs: ${section.what_to_cover ? section.what_to_cover.join(', ') : 'apprentissage fondamental'}
// - Plan de formation et motivation
// - Minimum 150 mots, ton accueillant`;
//         } else if (section.type === 'conclusion') {
//             promptType = `
// SLIDE ${slideNum} - CONCLUSION (${section.duration_seconds}s):
// - F√©licitations pour le parcours accompli
// - R√©capitulatif des comp√©tences acquises en ${topic}
// - Encouragements pour la pratique continue
// - Prochaines √©tapes et ressources
// - Message motivant final
// - Minimum 100 mots, ton motivant`;
//         } else {
//             promptType = `
// SLIDE ${slideNum} - D√âVELOPPEMENT: "${section.title}" (${section.duration_seconds}s):
// - Explication d√©taill√©e de: ${section.what_to_cover ? section.what_to_cover.join(', ') : section.title}
// - Exemples concrets et pratiques
// - Points cl√©s √† retenir
// - Applications r√©elles
// - Transitions fluides
// - Minimum 200 mots, ton p√©dagogique`;
//         }

//         return promptType;
//     }).join('\n')}

// ${resourcesAnalysis.vocabulary_adapted ? `
// TERMINOLOGIE SP√âCIALIS√âE √Ä UTILISER:
// ${resourcesAnalysis.key_terminology.join(', ')}
// ` : ''}

// G√âN√àRE ce JSON avec EXACTEMENT ${actualSlideCount} scripts D√âTAILL√âS:

// {
// ${plan_sections.map((section, index) => {
//         const slideKey = `slide_${index + 1}`;
//         return `  "${slideKey}": {
//     "title": "${section.title}",
//     "duration_seconds": ${section.duration_seconds || 60},
//     "script": "[SCRIPT D√âTAILL√â DE 150+ MOTS POUR ${section.title}]",
//     "tone": "${section.type === 'introduction' ? 'accueillant' : section.type === 'conclusion' ? 'motivant' : 'p√©dagogique'}",
//     "key_phrases": ${JSON.stringify(resourcesAnalysis.key_terminology.slice(0, 2) || ['point important'])},
//     "uses_resources": ${resourcesAnalysis.files_content_integrated}
//   }`;
//     }).join(',\n')}
// }

// R√àGLES ABSOLUES:
// - Chaque script DOIT √™tre d√©taill√© (150+ mots)
// - Langage naturel et fluide
// - Contenu substantiel et informatif
// - Respect strict des dur√©es
// - AUCUN placeholder ou contenu g√©n√©rique

// G√©n√®re UNIQUEMENT ce JSON avec des scripts COMPLETS et D√âTAILL√âS.`;

//     return prompt;
// }

// // üîç FONCTION DE VALIDATION QUALIT√â
// function validateScriptQuality(narrationScript) {
//     const scripts = Object.values(narrationScript);
//     const minWordCount = 50;

//     let totalWords = 0;
//     let shortScripts = 0;

//     scripts.forEach(script => {
//         const wordCount = script.script.split(' ').length;
//         totalWords += wordCount;
//         if (wordCount < minWordCount) {
//             shortScripts++;
//         }
//     });

//     const avgWordsPerScript = totalWords / scripts.length;
//     const isValid = shortScripts === 0 && avgWordsPerScript >= minWordCount;

//     console.log(`üìä Qualit√© scripts: ${avgWordsPerScript.toFixed(0)} mots/script, ${shortScripts} scripts courts`);

//     return {
//         isValid,
//         averageWords: avgWordsPerScript,
//         shortScripts,
//         totalWords
//     };
// }

// // üéØ G√âN√âRATION D'EXEMPLES DE CODE SP√âCIFIQUES
// function getCodeExample(point, topic) {
//     const pointLower = point.toLowerCase();
//     const topicLower = topic.toLowerCase();

//     if (topicLower.includes('python')) {
//         if (pointLower.includes('variable')) {
//             return `nom = "Alice"
// age = 25
// prix = 19.99
// print(f"{nom} a {age} ans")`;
//         } else if (pointLower.includes('type')) {
//             return `# Types de donn√©es
// entier = 42
// flottant = 3.14
// texte = "Hello"
// liste = [1, 2, 3]
// print(type(entier))`;
//         } else if (pointLower.includes('condition')) {
//             return `age = 18
// if age >= 18:
//     print("Majeur")
// else:
//     print("Mineur")`;
//         } else if (pointLower.includes('boucle')) {
//             return `# Boucle for
// for i in range(5):
//     print(f"It√©ration {i}")`;
//         } else if (pointLower.includes('structure') || pointLower.includes('contr√¥le')) {
//             return `# Structures de contr√¥le
// for nombre in [1, 2, 3, 4, 5]:
//     if nombre % 2 == 0:
//         print(f"{nombre} est pair")
//     else:
//         print(f"{nombre} est impair")`;
//         }
//     }

//     return `# Code d'exemple pour ${point}
// # √Ä compl√©ter selon le contexte`;
// }

// // üîç FONCTION UTILITAIRE POUR EXPLICATIONS D√âTAILL√âES
// function getDetailedExplanation(point, topic) {
//     const pointLower = point.toLowerCase();
//     const topicLower = topic.toLowerCase();

//     if (topicLower.includes('python')) {
//         if (pointLower.includes('variable')) {
//             return 'Les variables en Python stockent des donn√©es et sont cr√©√©es automatiquement lors de l\'affectation.';
//         } else if (pointLower.includes('type')) {
//             return 'Python g√®re automatiquement les types de donn√©es : entiers, flottants, cha√Ænes et listes.';
//         } else if (pointLower.includes('condition')) {
//             return 'Les conditions permettent d\'ex√©cuter du code selon des crit√®res sp√©cifiques.';
//         } else if (pointLower.includes('boucle')) {
//             return 'Les boucles r√©p√®tent des actions, optimisant l\'efficacit√© du code.';
//         }
//     }

//     return `Concept fondamental pour ma√Ætriser ${topic}.`;
// }

// // üéØ SCRIPTS D√âTAILL√âS POUR INTRODUCTION (60 secondes)
// function generateDetailedIntroScript(section, topic, duration, resourcesAnalysis) {
//     let script = '';

//     script += `Bonjour et bienvenue dans cette formation sur ${topic}. `;

//     if (resourcesAnalysis.files_content_integrated) {
//         script += `Cette formation a √©t√© sp√©cialement adapt√©e √† vos documents et √† votre contexte. `;
//     }

//     script += `Je suis ravi de vous accompagner dans cette d√©couverte. `;

//     if (topic.toLowerCase().includes('python')) {
//         script += `Python est l'un des langages de programmation les plus populaires au monde. Il est appr√©ci√© pour sa simplicit√©, sa lisibilit√© et sa polyvalence. `;
//         script += `Que vous souhaitiez d√©velopper des applications web, analyser des donn√©es, cr√©er de l'intelligence artificielle ou automatiser des t√¢ches, Python est un excellent choix. `;
//     } else {
//         script += `${topic} est un sujet fascinant qui vous ouvrira de nouvelles perspectives. `;
//         script += `Au cours de cette formation, nous explorerons ensemble les concepts essentiels et les applications pratiques. `;
//     }

//     script += `Les objectifs de cette formation sont clairs : `;
//     if (section.what_to_cover && section.what_to_cover.length > 0) {
//         section.what_to_cover.forEach((objective, index) => {
//             if (index === section.what_to_cover.length - 1) {
//                 script += `et ${objective.toLowerCase()}. `;
//             } else {
//                 script += `${objective.toLowerCase()}, `;
//             }
//         });
//     } else {
//         script += `vous donner une compr√©hension solide des fondamentaux et vous pr√©parer √† aller plus loin. `;
//     }

//     script += `Cette formation est structur√©e de mani√®re progressive pour optimiser votre apprentissage. `;
//     script += `Nous commencerons par les bases, puis nous approfondirons les concepts cl√©s avant de conclure par une synth√®se pratique. `;
//     script += `Alors, √™tes-vous pr√™t ? Commen√ßons sans plus attendre !`;

//     return script;
// }

// // üéØ SCRIPTS D√âTAILL√âS POUR D√âVELOPPEMENT (100 secondes)
// function generateDetailedDevelopmentScript(section, topic, duration) {
//     let script = '';

//     script += `Nous entrons maintenant dans une section fondamentale : ${section.title}. `;
//     script += `Cette partie est essentielle pour bien ma√Ætriser ${topic}. `;

//     if (topic.toLowerCase().includes('python')) {
//         if (section.title.toLowerCase().includes('variable')) {
//             script += generatePythonVariablesScript(section);
//         } else if (section.title.toLowerCase().includes('structure') || section.title.toLowerCase().includes('contr√¥le')) {
//             script += generatePythonControlScript(section);
//         } else {
//             script += generateGenericDevelopmentScript(section, topic);
//         }
//     } else {
//         script += generateGenericDevelopmentScript(section, topic);
//     }

//     script += `Les points cl√©s √† retenir de cette section sont importants pour la suite. `;
//     if (section.what_to_cover && section.what_to_cover.length > 0) {
//         script += `Premi√®rement, ${section.what_to_cover[0].toLowerCase()}. `;
//         if (section.what_to_cover.length > 1) {
//             script += `Deuxi√®mement, ${section.what_to_cover[1].toLowerCase()}. `;
//         }
//         if (section.what_to_cover.length > 2) {
//             script += `Et enfin, ${section.what_to_cover[2].toLowerCase()}. `;
//         }
//     }

//     script += `Ces concepts vous serviront de base solide pour aborder les aspects plus avanc√©s. `;
//     script += `Prenez le temps de bien assimiler ces notions avant de passer √† la suite. `;

//     return script;
// }

// // üêç SCRIPT SP√âCIALIS√â POUR VARIABLES PYTHON
// function generatePythonVariablesScript(section) {
//     let script = '';

//     script += `En Python, les variables sont la base de tout programme. Contrairement √† d'autres langages, Python n'exige pas de d√©clarer le type d'une variable √† l'avance. `;
//     script += `Vous pouvez simplement √©crire "nom √©gale guillemets Alice guillemets" et Python comprend automatiquement qu'il s'agit d'une cha√Æne de caract√®res. `;
//     script += `Pour les nombres, c'est tout aussi simple : "age √©gale 25" cr√©e une variable enti√®re, tandis que "prix √©gale 19 virgule 99" cr√©e un nombre d√©cimal. `;
//     script += `Python g√®re automatiquement les types de donn√©es, ce qui rend la programmation plus intuitive. `;
//     script += `Les types de base incluent les entiers pour les nombres sans d√©cimale, les flottants pour les nombres avec d√©cimale, les cha√Ænes pour le texte, et les bool√©ens pour vrai ou faux. `;
//     script += `Une fonctionnalit√© tr√®s pratique est l'affichage format√© avec la fonction print et les f-strings. Par exemple, vous pouvez √©crire "print f guillemets nom a age ans guillemets" pour afficher un message personnalis√©. `;

//     return script;
// }

// // üîÑ SCRIPT SP√âCIALIS√â POUR STRUCTURES DE CONTR√îLE PYTHON
// function generatePythonControlScript(section) {
//     let script = '';

//     script += `Les structures de contr√¥le sont ce qui rend vos programmes intelligents et capables de prendre des d√©cisions. `;
//     script += `La condition if-else est fondamentale : elle permet √† votre programme de r√©agir diff√©remment selon les circonstances. `;
//     script += `Par exemple, "if age sup√©rieur ou √©gal √† 18 deux points print Majeur else deux points print Mineur" teste l'√¢ge et affiche le r√©sultat appropri√©. `;
//     script += `L'indentation en Python n'est pas qu'une question de style : elle d√©finit la structure du code. Chaque bloc indent√© appartient √† la condition ou √† la boucle qui le pr√©c√®de. `;
//     script += `Les boucles for vous permettent de r√©p√©ter des actions. "for i in range 5" ex√©cute le code cinq fois, avec i qui prend les valeurs 0, 1, 2, 3, 4. `;
//     script += `La boucle while continue tant qu'une condition est vraie, mais attention aux boucles infinies ! `;
//     script += `Ces structures peuvent √™tre combin√©es pour cr√©er des programmes sophistiqu√©s. Une boucle peut contenir des conditions, et une condition peut contenir d'autres boucles. `;

//     return script;
// }

// // üìö SCRIPT G√âN√âRIQUE POUR D√âVELOPPEMENT
// function generateGenericDevelopmentScript(section, topic) {
//     let script = '';

//     script += `Ce que nous allons voir maintenant va enrichir consid√©rablement votre compr√©hension de ${topic}. `;
//     script += `Les concepts que nous abordons sont utilis√©s quotidiennement par les professionnels du domaine. `;
//     script += `Il est important de comprendre non seulement le "comment" mais aussi le "pourquoi" de chaque notion. `;
//     script += `Chaque √©l√©ment que nous √©tudions s'inscrit dans un √©cosyst√®me plus large et trouve ses applications dans des contextes vari√©s. `;
//     script += `N'h√©sitez pas √† prendre des notes et √† r√©fl√©chir aux applications pratiques de ce que vous apprenez. `;
//     script += `La th√©orie prend tout son sens quand elle est mise en perspective avec des exemples concrets. `;

//     return script;
// }

// // üéØ SCRIPTS D√âTAILL√âS POUR CONCLUSION (40 secondes)
// function generateDetailedConclusionScript(section, topic, duration) {
//     let script = '';

//     script += `Nous arrivons au terme de cette formation sur ${topic}. `;
//     script += `F√©licitations ! Vous avez parcouru un chemin important et acquis des comp√©tences pr√©cieuses. `;

//     if (topic.toLowerCase().includes('python')) {
//         script += `Vous ma√Ætrisez maintenant les fondamentaux de Python : les variables, les types de donn√©es, et les structures de contr√¥le. `;
//         script += `Ces bases solides vous permettront d'aborder des projets plus ambitieux avec confiance. `;
//     } else {
//         script += `Les concepts que nous avons explor√©s ensemble constituent un socle solide pour votre d√©veloppement dans ce domaine. `;
//     }

//     script += `Rappelez-vous que l'apprentissage ne s'arr√™te pas ici. `;
//     script += `Pratiquez r√©guli√®rement, explorez, exp√©rimentez, et n'ayez pas peur de faire des erreurs : elles font partie int√©grante du processus d'apprentissage. `;
//     script += `Je vous encourage vivement √† poursuivre votre formation et √† mettre en pratique ce que vous avez appris. `;
//     script += `Merci de votre attention et de votre engagement. Bonne continuation dans votre parcours !`;

//     return script;
// }

// // üéØ API PRINCIPALE - POST /ai/plan-to-markdown
// router.post('/plan-to-markdown', async (req, res) => {
//     const startTime = Date.now();

//     try {
//         // Validation de base
//         if (!req.body.plan_sections || !req.body.topic) {
//             return res.status(400).json({
//                 error: 'Format invalide',
//                 required: ['plan_sections', 'topic'],
//                 format: 'Utilisez TOUT le r√©sultat de POST /ai/groq-plan'
//             });
//         }

//         const groqPlanData = req.body;
//         console.log(`üìÑ G√©n√©ration Markdown OPTIMIS√â pour visuels: ${groqPlanData.topic}`);

//         // üîç ANALYSE DES RESSOURCES DISPONIBLES
//         const resourcesAnalysis = analyzeAvailableResources(groqPlanData);
//         console.log(`üìö Ressources: ${resourcesAnalysis.total_files} fichiers`);

//         // üé® G√âN√âRATION MARKDOWN OPTIMIS√â POUR PARSER DE VISUELS
//         console.log('üé® G√©n√©ration Markdown optimis√© pour parser de visuels...');
//         const markdownPrompt = createOptimizedMarkdownPrompt(groqPlanData, resourcesAnalysis);

//         let slideMarkdown;
//         try {
//             const markdownResponse = await callGroq(markdownPrompt, {
//                 temperature: 0.6, // Moins de cr√©ativit√© pour plus de coh√©rence
//                 max_tokens: 8000,
//                 system_content: `Tu es un expert Slidev qui cr√©e du Markdown PARFAITEMENT STRUCTUR√â pour g√©n√©ration de visuels.
//                 R√àGLES ABSOLUES:
//                 1. Chaque slide DOIT avoir un titre clair # Titre
//                 2. Chaque slide DOIT finir par ‚è±Ô∏è XXs
//                 3. S√©parateurs --- nets entre slides
//                 4. Contenu riche mais parsable
//                 5. AUCUN placeholder g√©n√©rique
//                 R√©ponds UNIQUEMENT avec le Markdown Slidev complet.`
//             });

//             slideMarkdown = cleanMarkdown(markdownResponse);

//             // Validation structure pour parser
//             if (!slideMarkdown.includes('‚è±Ô∏è') || !slideMarkdown.includes('---')) {
//                 console.log('üîÑ Structure insuffisante, utilisation fallback optimis√©...');
//                 throw new Error('Structure markdown invalide');
//             }

//         } catch (error) {
//             console.log('üîÑ Erreur IA, g√©n√©ration fallback optimis√©...');
//             slideMarkdown = createOptimizedFallbackMarkdown(groqPlanData, resourcesAnalysis);
//         }

//         // ‚úÖ VALIDATION SP√âCIALE POUR PARSER DE VISUELS
//         const slidesValidation = validateMarkdownForVisuals(slideMarkdown, groqPlanData.plan_sections.length);
//         console.log(`üìä Validation visuels: ${slidesValidation.valid ? '‚úÖ' : '‚ùå'} - ${slidesValidation.detected_slides} slides d√©tect√©es`);

//         if (!slidesValidation.valid) {
//             console.log('üîß Correction markdown pour compatibilit√© parser...');
//             slideMarkdown = fixMarkdownForVisuals(slideMarkdown, groqPlanData, resourcesAnalysis);
//         }

//         // G√âN√âRATION NARRATION (reste identique)
//         const actualSlideCount = groqPlanData.plan_sections.length;
//         console.log('üé¨ G√©n√©ration script narration d√©taill√©...');

//         let narrationScript;
//         try {
//             const enhancedNarrationPrompt = createEnhancedNarrationPrompt(groqPlanData, resourcesAnalysis, actualSlideCount);
//             const narrationResponse = await callGroq(enhancedNarrationPrompt, {
//                 system_content: `Tu es un expert en formation professionnelle qui cr√©e des scripts de narration d√©taill√©s et engageants. 
//                 Chaque script doit √™tre substantiel (150+ mots) avec un contenu riche et p√©dagogique. 
//                 R√©ponds UNIQUEMENT avec du JSON valide contenant des scripts complets.`,
//                 max_tokens: 8000,
//                 temperature: 0.8
//             });

//             const cleanedNarration = cleanNarrationResponse(narrationResponse);
//             narrationScript = JSON.parse(cleanedNarration);

//             const scriptQuality = validateScriptQuality(narrationScript);
//             if (!scriptQuality.isValid) {
//                 console.warn('‚ö†Ô∏è Scripts trop courts, utilisation du fallback enrichi...');
//                 throw new Error('Scripts insuffisants');
//             }

//         } catch (parseError) {
//             console.warn('‚ö†Ô∏è Erreur parsing narration, utilisation du fallback ENRICHI...');
//             narrationScript = createSynchronizedFallbackNarration(groqPlanData, resourcesAnalysis, actualSlideCount);
//         }

//         // ASSEMBLAGE FINAL
//         const slidesId = uuidv4();
//         const totalTime = Date.now() - startTime;
//         const finalQuality = validateScriptQuality(narrationScript);

//         const result = {
//             slides_id: slidesId,

//             // ‚úÖ R√âSULTATS OPTIMIS√âS POUR PARSER DE VISUELS
//             markdown: slideMarkdown,
//             narration_script: narrationScript,

//             // ‚úÖ VALIDATION SP√âCIALE VISUELS
//             visual_compatibility: {
//                 parser_ready: slidesValidation.valid,
//                 detected_slides: slidesValidation.detected_slides,
//                 expected_slides: actualSlideCount,
//                 title_extraction_ready: slidesValidation.titles_clear,
//                 duration_extraction_ready: slidesValidation.durations_present,
//                 content_structure_valid: slidesValidation.content_structured,
//                 emoji_detection_enabled: slidesValidation.emojis_present
//             },

//             synchronization_info: {
//                 markdown_slides_count: actualSlideCount,
//                 narration_scripts_count: Object.keys(narrationScript).length,
//                 synchronized: actualSlideCount === Object.keys(narrationScript).length,
//                 mapping_type: '1:1 FORC√â'
//             },

//             content_quality: {
//                 total_words: finalQuality.totalWords,
//                 average_words_per_script: Math.round(finalQuality.averageWords),
//                 min_words_met: finalQuality.isValid,
//                 content_richness: finalQuality.averageWords >= 100 ? 'excellent' : 'good'
//             },

//             // COMPATIBILIT√â EXISTANTE
//             slides_count: actualSlideCount,
//             topic: groqPlanData.topic,

//             // ‚úÖ PR√äT POUR G√âN√âRATION VISUELS
//             ready_for_visuals: {
//                 compatible: true,
//                 endpoint: 'POST /ai/generate-slides-visuals',
//                 expected_output: `${actualSlideCount} visuels SVG/PNG`,
//                 structure_validated: true,
//                 parser_optimized: true
//             },

//             generation_time_ms: totalTime,
//             generated_at: new Date().toISOString(),
//             version: '8.0 - Optimis√© pour g√©n√©ration visuels'
//         };

//         console.log(`‚úÖ G√©n√©ration OPTIMIS√âE pour visuels: ${actualSlideCount} slides, parser-ready: ${slidesValidation.valid}, ${totalTime}ms`);
//         res.json(result);

//     } catch (error) {
//         const totalTime = Date.now() - startTime;
//         console.error('‚ùå Erreur plan-to-markdown optimis√©:', error);
//         res.status(500).json({
//             error: 'Erreur g√©n√©ration markdown optimis√©',
//             generation_time_ms: totalTime,
//             details: error.message
//         });
//     }
// });

// // üîß ROUTE SAUVEGARDE
// router.post('/save-files', async (req, res) => {
//     try {
//         const { markdown, narration_script, slides_id } = req.body;

//         if (!markdown) {
//             return res.status(400).json({
//                 error: 'Le champ "markdown" est requis'
//             });
//         }

//         const slidesDir = path.join(__dirname, '..', '..', 'generated-slides');
//         await fs.mkdir(slidesDir, { recursive: true });

//         const baseFilename = slides_id || `resource_slides_${Date.now()}`;
//         const savedFiles = [];

//         // Sauvegarder markdown
//         const markdownFile = `${baseFilename}.md`;
//         const markdownPath = path.join(slidesDir, markdownFile);
//         await fs.writeFile(markdownPath, markdown, 'utf8');
//         savedFiles.push(markdownFile);

//         // Sauvegarder script narration
//         if (narration_script) {
//             const narrationFile = `narration_${baseFilename}.json`;
//             const narrationPath = path.join(slidesDir, narrationFile);
//             await fs.writeFile(narrationPath, JSON.stringify(narration_script, null, 2), 'utf8');
//             savedFiles.push(narrationFile);

//             // Script texte
//             const scriptText = Object.entries(narration_script)
//                 .map(([slide, data]) => `=== ${data.title} (${data.duration_seconds}s) ===\n${data.script}\n`)
//                 .join('\n');

//             const scriptFile = `script_${baseFilename}.txt`;
//             const scriptPath = path.join(slidesDir, scriptFile);
//             await fs.writeFile(scriptPath, scriptText, 'utf8');
//             savedFiles.push(scriptFile);
//         }

//         res.json({
//             message: 'Fichiers sauv√©s avec succ√®s',
//             saved_files: savedFiles,
//             directory: slidesDir,
//             slidev_command: `cd generated-slides && slidev ${markdownFile}`
//         });

//     } catch (error) {
//         res.status(500).json({
//             error: 'Erreur sauvegarde',
//             details: error.message
//         });
//     }
// });

// // üîß ROUTE INFO
// router.get('/plan-to-markdown/info', (req, res) => {
//     res.json({
//         endpoint: 'POST /ai/plan-to-markdown',
//         description: 'Convertit le plan en Markdown Slidev OPTIMIS√â pour g√©n√©ration de visuels avec narration d√©taill√©e',
//         version: '8.0 - OPTIMIS√â VISUELS + VALIDATION PARSER',
//         status: '‚úÖ OP√âRATIONNEL',

//         corrections_v8: [
//             'üé® Markdown optimis√© pour parser de visuels',
//             '‚úÖ Validation compatibilit√© parser automatique',
//             'üîß Correction automatique si probl√®mes d√©tect√©s',
//             'üìä Titres clairs et dur√©es explicites garanties',
//             'üéØ √âmojis et structure HTML optimis√©s',
//             'üîÑ Fallback optimis√© si IA √©choue'
//         ],

//         visual_compatibility: [
//             '‚úÖ Titres extractibles avec # TitreNet',
//             '‚è±Ô∏è Dur√©es extractibles avec ‚è±Ô∏è XXs',
//             'üé® Contenu structur√© pour SVG g√©n√©ration',
//             'üéØ √âmojis pour d√©tection visuelle am√©lior√©e',
//             'üìã Validation automatique avant envoi',
//             'üîß Correction automatique si n√©cessaire'
//         ],

//         workflow_optimized: [
//             '1. POST /ai/groq-plan (g√©n√®re sections)',
//             '2. POST /ai/plan-to-markdown (markdown + scripts optimis√©s)',
//             '3. Validation automatique compatibilit√© parser',
//             '4. POST /ai/generate-slides-visuals (g√©n√©ration visuels)',
//             '5. Assemblage vid√©o final'
//         ],

//         garanties: {
//             parser_compatibility: '100% - Validation automatique',
//             visual_generation: 'Compatible avec generate-slides-visuals',
//             title_extraction: 'Titres clairs garantis',
//             duration_extraction: 'Dur√©es explicites sur chaque slide',
//             content_structure: 'HTML/CSS valide pour parsing',
//             emoji_detection: '√âmojis pr√©sents pour am√©liorer d√©tection'
//         }
//     });
// });

// // üß™ ROUTE DE TEST VALIDATION VISUELS
// router.post('/test-visual-validation', async (req, res) => {
//     try {
//         const { markdown, expected_slides } = req.body;

//         if (!markdown) {
//             return res.status(400).json({
//                 error: 'markdown requis pour test'
//             });
//         }

//         const validation = validateMarkdownForVisuals(markdown, expected_slides || 4);

//         res.json({
//             test_results: {
//                 valid: validation.valid,
//                 detected_slides: validation.detected_slides,
//                 expected_slides: expected_slides || 4,
//                 issues: validation.issues
//             },
//             validation_details: {
//                 titles_clear: validation.titles_clear,
//                 durations_present: validation.durations_present,
//                 content_structured: validation.content_structured,
//                 emojis_present: validation.emojis_present
//             },
//             parser_compatibility: validation.valid ? 'COMPATIBLE' : 'N√âCESSITE CORRECTION',
//             recommendations: validation.issues.length > 0 ?
//                 'Utilisez fixMarkdownForVisuals() pour corriger automatiquement' :
//                 'Markdown pr√™t pour g√©n√©ration de visuels',
//             version: '8.0 - Validation parser de visuels'
//         });

//     } catch (error) {
//         res.status(500).json({
//             error: 'Erreur test validation visuels',
//             details: error.message
//         });
//     }
// });

// module.exports = router;

































// Scripts dispo en remote
// üéØ API PRINCIPALE - POST /ai/plan-to-markdown (VERSION D√âTAILL√âE)


const express = require('express');
const axios = require('axios');
const { v4: uuidv4 } = require('uuid');
const fs = require('fs').promises;
const path = require('path');

const router = express.Router();

// ü§ñ Fonction Groq pour g√©n√©ration intelligente
async function callGroq(prompt, options = {}) {
    try {
        const response = await axios.post('https://api.groq.com/openai/v1/chat/completions', {
            model: process.env.GROQ_MODEL || 'llama-3.3-70b-versatile',
            messages: [
                {
                    role: 'system',
                    content: options.system_content || 'Tu es un expert Slidev qui cr√©e du Markdown sophistiqu√© en utilisant intelligemment les ressources fournies. R√©ponds UNIQUEMENT avec du Markdown Slidev valide.'
                },
                {
                    role: 'user',
                    content: prompt
                }
            ],
            temperature: options.temperature || 0.7,
            max_tokens: options.max_tokens || 5000
        }, {
            headers: {
                'Authorization': `Bearer ${process.env.GROQ_API_KEY}`,
                'Content-Type': 'application/json'
            }
        });

        return response.data.choices[0].message.content;
    } catch (error) {
        console.error('‚ùå Erreur Groq:', error.message);
        throw new Error('Erreur g√©n√©ration IA: ' + error.message);
    }
}

// üéØ API PRINCIPALE - POST /ai/plan-to-markdown
router.post('/plan-to-markdown', async (req, res) => {
    const startTime = Date.now();

    try {
        // Validation de base
        if (!req.body.plan_sections || !req.body.topic) {
            return res.status(400).json({
                error: 'Format invalide',
                required: ['plan_sections', 'topic'],
                format: 'Utilisez TOUT le r√©sultat de POST /ai/groq-plan'
            });
        }

        const groqPlanData = req.body;
        console.log(`üìÑ G√©n√©ration Markdown enrichi: ${groqPlanData.topic}`);

        // üîç ANALYSE DES RESSOURCES DISPONIBLES
        const resourcesAnalysis = analyzeAvailableResources(groqPlanData);
        console.log(`üìö Ressources d√©tect√©es: ${resourcesAnalysis.total_files} fichiers, vocabulaire: ${resourcesAnalysis.vocabulary_adapted}`);

        // üé® G√âN√âRATION MARKDOWN ENRICHI
        console.log('üé® G√©n√©ration Markdown Slidev enrichi...');
        const markdownPrompt = createEnhancedMarkdownPrompt(groqPlanData, resourcesAnalysis);
        const markdownResponse = await callGroq(markdownPrompt, {
            temperature: 0.7,
            max_tokens: 6000
        });

        let slideMarkdown = cleanMarkdown(markdownResponse);

        // Fallback si n√©cessaire
        if (!slideMarkdown.includes('---\ntheme:')) {
            console.log('üîÑ G√©n√©ration fallback...');
            slideMarkdown = createFallbackMarkdown(groqPlanData, resourcesAnalysis);
        }

        // üÜï COMPTER LES SLIDES R√âELLES DANS LE MARKDOWN
        const actualSlideCount = countActualSlides(slideMarkdown);
        console.log(`üìä Slides d√©tect√©es: ${actualSlideCount} (sections plan: ${groqPlanData.plan_sections.length})`);

        // üîß G√âN√âRATION SCRIPT NARRATION AVEC SYNCHRONISATION
        console.log('üé¨ G√©n√©ration script narration synchronis√©...');
        const narrationPrompt = createNarrationPrompt(groqPlanData, resourcesAnalysis, actualSlideCount);
        const narrationResponse = await callGroq(narrationPrompt, {
            system_content: 'Tu es un expert en narration qui adapte le discours aux ressources. R√©ponds UNIQUEMENT avec du JSON valide avec le nombre exact de slides demand√©.',
            max_tokens: 5000
        });

        let narrationScript;
        try {
            const cleanedNarration = cleanNarrationResponse(narrationResponse);
            narrationScript = JSON.parse(cleanedNarration);

            // üÜï VALIDATION SYNCHRONISATION
            const scriptCount = Object.keys(narrationScript).length;
            if (scriptCount !== actualSlideCount) {
                console.warn(`‚ö†Ô∏è D√©synchronisation d√©tect√©e: ${actualSlideCount} slides vs ${scriptCount} scripts`);
                // Forcer la synchronisation
                narrationScript = forceSynchronization(narrationScript, actualSlideCount, groqPlanData, resourcesAnalysis);
            }

        } catch (parseError) {
            console.warn('‚ö†Ô∏è Erreur parsing narration, fallback synchronis√©...');
            narrationScript = createSynchronizedFallbackNarration(groqPlanData, resourcesAnalysis, actualSlideCount);
        }

        // üÜï V√âRIFICATION FINALE
        const finalSlideCount = actualSlideCount;
        const finalScriptCount = Object.keys(narrationScript).length;

        console.log(`‚úÖ Synchronisation finale: ${finalSlideCount} slides = ${finalScriptCount} scripts`);

        // üèóÔ∏è ASSEMBLAGE FINAL
        const slidesId = uuidv4();
        const totalTime = Date.now() - startTime;

        const result = {
            slides_id: slidesId,

            // R√âSULTATS PRINCIPAUX (Compatible format existant)
            markdown: slideMarkdown,
            narration_script: narrationScript,

            // üÜï INFORMATIONS SYNCHRONISATION
            synchronization_info: {
                markdown_slides_count: finalSlideCount,
                narration_scripts_count: finalScriptCount,
                synchronized: finalSlideCount === finalScriptCount,
                plan_sections_count: groqPlanData.plan_sections.length,
                mapping_type: finalSlideCount === groqPlanData.plan_sections.length ? '1:1' :
                    finalSlideCount > groqPlanData.plan_sections.length ? 'expanded' : 'compressed'
            },

            // INFORMATIONS RESSOURCES
            resource_integration: {
                files_used_in_markdown: resourcesAnalysis.files_content_integrated,
                company_context_applied: resourcesAnalysis.company_context_integrated,
                vocabulary_adapted: resourcesAnalysis.vocabulary_adapted,
                examples_from_files: resourcesAnalysis.extracted_examples,
                procedures_integrated: resourcesAnalysis.procedures_integrated,
                terminology_used: resourcesAnalysis.key_terminology
            },

            // COMPATIBILIT√â AVEC FORMAT EXISTANT
            slides_count: finalSlideCount,
            topic: groqPlanData.topic,
            source_plan_id: groqPlanData.plan_id,

            files: {
                markdown: `resource_slides_${slidesId}.md`,
                narration: `narration_${slidesId}.json`,
                script_txt: `script_${slidesId}.txt`
            },

            file_sizes: {
                markdown_kb: Math.round(slideMarkdown.length / 1024),
                narration_kb: Math.round(JSON.stringify(narrationScript).length / 1024)
            },

            slidev_commands: {
                preview: `slidev resource_slides_${slidesId}.md`,
                export_pdf: `slidev export resource_slides_${slidesId}.md --format pdf`,
                export_html: `slidev export resource_slides_${slidesId}.md --format html`
            },

            video_production: {
                total_duration_seconds: Object.values(narrationScript).reduce((sum, script) => sum + script.duration_seconds, 0),
                slides_with_timing: Object.keys(narrationScript).length,
                ready_for_recording: true,
                uses_company_terminology: resourcesAnalysis.vocabulary_adapted,
                references_uploaded_files: resourcesAnalysis.files_content_integrated,
                perfectly_synchronized: true
            },

            generation_time_ms: totalTime,
            generated_at: new Date().toISOString(),
            status: 'completed',
            ready_for_production: true,

            next_steps: {
                audio_generation: 'POST /ai/generate-narration-bark avec script synchronis√©',
                customization: resourcesAnalysis.company_context_integrated ?
                    'Contenu d√©j√† adapt√© √† votre contexte' :
                    'Personnaliser selon votre contexte'
            }
        };

        console.log(`‚úÖ G√©n√©ration compl√®te: ${finalSlideCount} slides synchronis√©es, ${resourcesAnalysis.total_files} fichiers int√©gr√©s, ${totalTime}ms`);
        res.json(result);

    } catch (error) {
        const totalTime = Date.now() - startTime;
        console.error('‚ùå Erreur plan-to-markdown:', error);
        res.status(500).json({
            error: 'Erreur g√©n√©ration markdown',
            generation_time_ms: totalTime,
            details: error.message
        });
    }
});

// üÜï FONCTIONS DE SYNCHRONISATION

function countActualSlides(markdown) {
    // Compter le nombre de slides r√©elles dans le markdown
    const slidesSeparators = markdown.match(/^---$/gm) || [];

    // Le premier --- est pour les m√©tadonn√©es, donc slides = separators - 1
    let slideCount = Math.max(1, slidesSeparators.length - 1);

    // Validation suppl√©mentaire avec les layouts
    const layoutsFound = markdown.match(/layout:\s*(intro|default|two-cols|center|end)/g) || [];

    // Si on trouve des layouts, utiliser ce nombre
    if (layoutsFound.length > 0) {
        slideCount = Math.max(slideCount, layoutsFound.length);
    }

    // Compter aussi les titres de slides (# titre)
    const titleSlides = markdown.match(/^#\s+.+$/gm) || [];
    if (titleSlides.length > slideCount) {
        slideCount = titleSlides.length;
    }

    console.log(`üìä D√©tection slides: separators=${slidesSeparators.length - 1}, layouts=${layoutsFound.length}, titles=${titleSlides.length}, final=${slideCount}`);

    return Math.max(slideCount, 1);
}

function forceSynchronization(narrationScript, targetCount, planData, resourcesAnalysis) {
    const currentCount = Object.keys(narrationScript).length;

    if (currentCount === targetCount) {
        return narrationScript; // D√©j√† synchronis√©
    }

    console.log(`üîß For√ßage synchronisation: ${currentCount} ‚Üí ${targetCount} scripts`);

    // Cr√©er nouveau script synchronis√©
    return createSynchronizedFallbackNarration(planData, resourcesAnalysis, targetCount);
}

function createSynchronizedFallbackNarration(planData, resourcesAnalysis, slideCount) {
    const { plan_sections } = planData;
    const narration = {};

    console.log(`üîß Cr√©ation narration synchronis√©e: ${slideCount} scripts pour ${plan_sections.length} sections`);

    for (let i = 0; i < slideCount; i++) {
        const slideKey = `slide_${i + 1}`;

        // Mapping intelligent sections ‚Üí slides
        let mappedSection;
        let sectionIndex;

        if (slideCount <= plan_sections.length) {
            // Moins ou √©gal de slides que de sections ‚Üí mapping direct ou combinaison
            sectionIndex = Math.floor(i * plan_sections.length / slideCount);
        } else {
            // Plus de slides que de sections ‚Üí subdivision
            sectionIndex = Math.floor(i * plan_sections.length / slideCount);
        }

        mappedSection = plan_sections[Math.min(sectionIndex, plan_sections.length - 1)];

        let tone = 'p√©dagogique';
        let title = mappedSection.title;
        let script = `Nous allons maintenant aborder ${mappedSection.title}.`;

        // D√©finir le ton selon la position
        if (i === 0) {
            tone = 'accueillant';
            title = mappedSection.title || 'Introduction';
            script = resourcesAnalysis.files_content_integrated ?
                `Bonjour et bienvenue dans cette formation sur ${title}, adapt√©e √† vos documents.` :
                `Bonjour et bienvenue dans cette formation sur ${title}.`;
        } else if (i === slideCount - 1) {
            tone = 'motivant';
            title = 'Conclusion';
            script = 'Pour conclure, retenez bien les points essentiels que nous venons de voir.';
        } else {
            // Slide interm√©diaire
            if (slideCount > plan_sections.length) {
                // Subdivision d'une section
                const partNumber = Math.floor(i / (slideCount / plan_sections.length)) + 1;
                title = `${mappedSection.title} - Partie ${partNumber}`;
                script = `Continuons avec ${mappedSection.title}. Nous allons maintenant voir les d√©tails importants.`;
            }
        }

        // Calculer dur√©e proportionnelle
        const baseDuration = mappedSection.duration_seconds || 60;
        const proportionalDuration = Math.floor(baseDuration * (plan_sections.length / slideCount));
        const adjustedDuration = Math.max(15, Math.min(120, proportionalDuration)); // Entre 15s et 2min

        narration[slideKey] = {
            title: title,
            duration_seconds: adjustedDuration,
            script: script,
            tone: tone,
            key_phrases: resourcesAnalysis.key_terminology.slice(0, 2) || ["Point important"],
            uses_resources: resourcesAnalysis.files_content_integrated,
            mapped_from_section: sectionIndex + 1,
            slide_position: i + 1,
            auto_generated: true // Flag pour indiquer g√©n√©ration automatique
        };
    }

    return narration;
}

// üîç ANALYSE DES RESSOURCES DISPONIBLES
function analyzeAvailableResources(groqPlanData) {
    const analysis = {
        total_files: 0,
        files_content_integrated: false,
        company_context_integrated: false,
        vocabulary_adapted: false,
        procedures_integrated: false,
        examples_extracted: false,
        key_terminology: [],
        extracted_examples: [],
        file_references: [],
        adaptation_quality: 'basic'
    };

    // Analyser les fichiers trait√©s
    if (groqPlanData.files_processing) {
        analysis.total_files = groqPlanData.files_processing.processed_successfully || 0;
        analysis.files_content_integrated = analysis.total_files > 0;

        if (groqPlanData.files_processing.processed_files) {
            groqPlanData.files_processing.processed_files.forEach(file => {
                if (file.status === 'parsed') {
                    analysis.file_references.push({
                        name: file.name,
                        type: file.content_type,
                        topics: file.key_topics
                    });

                    if (file.has_procedures) analysis.procedures_integrated = true;
                    if (file.has_examples) analysis.examples_extracted = true;
                    if (file.key_topics) analysis.key_terminology.push(...file.key_topics);
                }
            });
        }
    }

    // Analyser l'enrichissement
    if (groqPlanData.resources_enrichment) {
        analysis.company_context_integrated = groqPlanData.resources_enrichment.has_company_context;
        analysis.vocabulary_adapted = groqPlanData.resources_enrichment.adaptation_applied?.vocabulary_adapted || false;
    }

    // Extraire des sections du plan
    if (groqPlanData.plan_sections) {
        groqPlanData.plan_sections.forEach(section => {
            if (section.enhanced_with_resources) {
                if (section.key_terminology) {
                    analysis.key_terminology.push(...section.key_terminology);
                }
                if (section.examples_from_resources) {
                    analysis.extracted_examples.push(...section.examples_from_resources);
                }
            }
        });
    }

    // D√©duplication
    analysis.key_terminology = [...new Set(analysis.key_terminology.flat())].slice(0, 10);
    analysis.extracted_examples = [...new Set(analysis.extracted_examples.flat())].slice(0, 8);

    // Calcul qualit√©
    if (analysis.files_content_integrated && analysis.vocabulary_adapted && analysis.company_context_integrated) {
        analysis.adaptation_quality = 'excellent';
    } else if (analysis.files_content_integrated || analysis.vocabulary_adapted) {
        analysis.adaptation_quality = 'good';
    }

    return analysis;
}

// üé® CR√âATION PROMPT MARKDOWN ENRICHI - VERSION CORRIG√âE
// üé® CR√âATION PROMPT MARKDOWN ENRICHI - VERSION CORRIG√âE
function createEnhancedMarkdownPrompt(planData, resourcesAnalysis) {
    const { topic, plan_sections, settings } = planData;
    const { level = 'beginner', duration = 5, style = 'practical' } = settings || {};

    let prompt = `Cr√©e un Markdown Slidev sophistiqu√© qui utilise les ressources fournies:

INFORMATIONS:
- Sujet: ${topic}
- Niveau: ${level}
- Dur√©e: ${duration} minutes
- Style: ${style}

RESSOURCES DISPONIBLES:
- Fichiers trait√©s: ${resourcesAnalysis.total_files}
- Contexte entreprise: ${resourcesAnalysis.company_context_integrated ? 'OUI' : 'NON'}
- Vocabulaire adapt√©: ${resourcesAnalysis.vocabulary_adapted ? 'OUI' : 'NON'}
- Proc√©dures: ${resourcesAnalysis.procedures_integrated ? 'OUI' : 'NON'}
- Exemples: ${resourcesAnalysis.examples_extracted ? 'OUI' : 'NON'}`;

    if (resourcesAnalysis.key_terminology.length > 0) {
        prompt += `\n\nTERMINOLOGIE √Ä UTILISER:\n${resourcesAnalysis.key_terminology.join(', ')}`;
    }

    if (resourcesAnalysis.extracted_examples.length > 0) {
        prompt += `\n\nEXEMPLES √Ä INT√âGRER:\n${resourcesAnalysis.extracted_examples.map((ex, i) => `${i + 1}. ${ex}`).join('\n')}`;
    }

    if (resourcesAnalysis.file_references.length > 0) {
        prompt += `\n\nFICHIERS √Ä R√âF√âRENCER:\n${resourcesAnalysis.file_references.map(ref => `- ${ref.name}: ${ref.type}`).join('\n')}`;
    }

    prompt += `\n\nSECTIONS DU PLAN:\n${plan_sections.map((section, i) => {
        return `${i + 1}. ${section.title} (${section.duration_seconds}s)\n   Points: ${section.what_to_cover ? section.what_to_cover.join(', ') : '√Ä d√©velopper'}`;
    }).join('\n\n')}`;

    prompt += `\n\nG√âN√àRE un Markdown Slidev enrichi avec int√©gration des ressources:

---
theme: ${resourcesAnalysis.company_context_integrated ? 'corporate' : 'academic'}
background: linear-gradient(135deg, #667eea 0%, #764ba2 100%)
class: text-center
highlighter: shiki
lineNumbers: true
title: ${topic}
---

# ${topic}
## Formation ${duration} minutes${resourcesAnalysis.company_context_integrated ? ' - Adapt√©e √† votre contexte' : ''}

${resourcesAnalysis.files_content_integrated ? `
<div class="opacity-80 text-sm mt-4 bg-blue-50 dark:bg-blue-900/20 p-3 rounded-lg">
  üìö Formation enrichie par ${resourcesAnalysis.total_files} document(s)
</div>
` : ''}

<div class="pt-8">
  <span @click="$slidev.nav.next" class="px-6 py-3 rounded-lg cursor-pointer bg-gradient-to-r from-blue-500 to-purple-600 text-white font-semibold">
    üöÄ Commencer
  </span>
</div>

${plan_sections.map((section, index) => {
        if (section.type === 'introduction') {
            return `
---
layout: intro
---

# ${section.title}

${section.what_to_cover ? section.what_to_cover.map(point => `- **${point}**`).join('\n') : '- Introduction au sujet'}

${section.enhanced_with_resources && resourcesAnalysis.extracted_examples.length > 0 ? `
<div class="mt-6 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
  <h3 class="text-lg font-semibold mb-3 text-blue-700 dark:text-blue-300">
    üí° Bas√© sur vos ressources
  </h3>
  <div class="text-sm space-y-2">
${resourcesAnalysis.extracted_examples.slice(0, 2).map(example => `    <div>‚Ä¢ ${example}</div>`).join('\n')}
  </div>
</div>
` : ''}

<div class="mt-6">
  <div class="px-4 py-2 rounded-full bg-blue-100 text-blue-800 text-sm inline-block">
    ‚è±Ô∏è ${section.duration_seconds}s
  </div>
</div>`;

        } else if (section.type === 'development') {
            // üöÄ CORRECTION PRINCIPALE - Layout default au lieu de two-cols probl√©matique
            return `
---
layout: default
---

# ${section.title}

<div class="grid grid-cols-2 gap-8 mt-8">

<div class="space-y-4">

${section.what_to_cover ? section.what_to_cover.map((point, i) => `
## ${i + 1}. ${point}

${section.enhanced_with_resources ? `
<div class="text-sm text-blue-600 mb-4 bg-blue-50 p-2 rounded">
  üí° Point enrichi par vos documents
</div>
` : `
<div class="text-gray-600 text-sm mb-4">
  Point essentiel √† retenir
</div>
`}
`).join('') : '## Contenu principal'}

</div>

<div class="h-full">

${section.enhanced_with_resources && resourcesAnalysis.extracted_examples.length > 0 ? `
<div class="bg-green-50 p-6 rounded-xl h-full">
  <h3 class="text-lg font-semibold mb-4 text-green-700">
    üìã Exemples de vos documents
  </h3>
  <div class="space-y-3">
${resourcesAnalysis.extracted_examples.slice(0, 3).map(example => `    <div class="bg-white p-3 rounded-lg">
      <div class="text-sm">${example}</div>
    </div>`).join('\n')}
  </div>
</div>
` : `
<div class="bg-orange-50 p-6 rounded-xl h-full">
  <h3 class="text-lg font-semibold mb-2">Points Cl√©s</h3>
  <div class="text-sm">${section.content_summary || 'Contenu adapt√©'}</div>
</div>
`}

</div>

</div>

<div class="mt-8 p-4 bg-blue-50 rounded-lg">
  <div class="font-semibold">R√©sum√©</div>
  <div class="text-sm mt-1">${section.content_summary || 'Points cl√©s de cette section'}</div>
</div>`;

        } else if (section.type === 'conclusion') {
            return `
---
layout: center
class: text-center
---

# ${section.title}

<div class="max-w-4xl mx-auto">
  <div class="grid grid-cols-1 md:grid-cols-${section.what_to_cover ? Math.min(section.what_to_cover.length, 3) : 2} gap-6 mb-8">
${section.what_to_cover ? section.what_to_cover.map(point => `    <div class="bg-green-50 p-6 rounded-xl">
      <div class="text-3xl mb-3">‚úÖ</div>
      <div class="font-semibold text-green-700">${point}</div>
    </div>`).join('\n') : `    <div class="bg-green-50 p-6 rounded-xl">
      <div class="text-4xl mb-3">‚úÖ</div>
      <div class="font-semibold">R√©capitulatif</div>
    </div>
    <div class="bg-blue-50 p-6 rounded-xl">
      <div class="text-4xl mb-3">üöÄ</div>
      <div class="font-semibold">Prochaines √âtapes</div>
    </div>`}
  </div>

  ${section.enhanced_with_resources ? `
  <div class="bg-purple-100 p-6 rounded-xl mb-8">
    <h3 class="text-xl font-semibold mb-4 text-purple-700">
      üéØ Applications dans votre contexte
    </h3>
    <div class="text-sm text-purple-600">
      Cette formation a √©t√© adapt√©e √† vos ressources.
    </div>
  </div>
  ` : ''}

  <div class="pt-8">
    <span class="px-8 py-4 rounded-xl bg-gradient-to-r from-green-400 to-blue-500 text-white font-bold text-xl">
      üéâ Formation Termin√©e !
    </span>
  </div>
</div>`;
        }
        return '';
    }).join('')}

---
layout: end
---

# Merci !

<div class="text-center">
  <div class="text-6xl mb-4">üéâ</div>
  <div class="text-2xl">Formation ${topic} termin√©e</div>
  ${resourcesAnalysis.files_content_integrated ? `
  <div class="text-lg text-blue-600 mt-2">
    üìö Avec ${resourcesAnalysis.total_files} document(s) int√©gr√©(s)
  </div>
  ` : `
  <div class="text-lg text-gray-600 mt-2">Dur√©e: ${duration} minutes</div>
  `}
</div>

G√©n√®re UNIQUEMENT ce Markdown, rien d'autre.`;

    return prompt;
}
// üé¨ CR√âATION PROMPT NARRATION SYNCHRONIS√â
function createNarrationPrompt(planData, resourcesAnalysis, actualSlideCount) {
    const { topic, plan_sections, settings } = planData;
    const { level = 'beginner', duration = 5 } = settings || {};

    let prompt = `Cr√©e un script de narration adapt√© aux ressources et PARFAITEMENT synchronis√©:

FORMATION:
- Sujet: ${topic}
- Niveau: ${level}
- Dur√©e: ${duration} minutes
- NOMBRE DE SLIDES EXACT: ${actualSlideCount}

ADAPTATION RESSOURCES:
- Fichiers: ${resourcesAnalysis.total_files}
- Vocabulaire adapt√©: ${resourcesAnalysis.vocabulary_adapted ? 'OUI' : 'NON'}
- Exemples sp√©cifiques: ${resourcesAnalysis.examples_extracted ? 'OUI' : 'NON'}`;

    if (resourcesAnalysis.key_terminology.length > 0) {
        prompt += `\n\nTERMINOLOGIE √Ä UTILISER: ${resourcesAnalysis.key_terminology.join(', ')}`;
    }

    prompt += `\n\nSECTIONS DISPONIBLES:\n${plan_sections.map((section, i) =>
        `${i + 1}. ${section.title} (${section.duration_seconds}s) - ${section.type}`
    ).join('\n')}`;

    prompt += `\n\n‚ö†Ô∏è CRITICAL: Tu dois g√©n√©rer EXACTEMENT ${actualSlideCount} scripts de narration.

R√àGLES DE MAPPING:
- Si ${actualSlideCount} slides > ${plan_sections.length} sections : Diviser les sections longues
- Si ${actualSlideCount} slides < ${plan_sections.length} sections : Combiner certaines sections  
- Si ${actualSlideCount} slides = ${plan_sections.length} sections : Mapping 1:1 parfait

G√âN√àRE ce JSON avec EXACTEMENT ${actualSlideCount} entr√©es:

{
${Array.from({ length: actualSlideCount }, (_, index) => {
        const slideKey = `slide_${index + 1}`;
        let sectionIndex;

        if (actualSlideCount <= plan_sections.length) {
            sectionIndex = Math.floor(index * plan_sections.length / actualSlideCount);
        } else {
            sectionIndex = Math.floor(index * plan_sections.length / actualSlideCount);
        }

        const mappedSection = plan_sections[Math.min(sectionIndex, plan_sections.length - 1)];

        let tone = 'p√©dagogique';
        let title = mappedSection.title;

        if (index === 0) {
            tone = 'accueillant';
            title = mappedSection.title || 'Introduction';
        } else if (index === actualSlideCount - 1) {
            tone = 'motivant';
            title = 'Conclusion';
        } else if (actualSlideCount > plan_sections.length) {
            const partNumber = Math.floor((index - 1) / Math.ceil(actualSlideCount / plan_sections.length)) + 1;
            title = `${mappedSection.title} - Partie ${partNumber}`;
        }

        const baseDuration = mappedSection.duration_seconds || 60;
        const proportionalDuration = Math.floor(baseDuration * (plan_sections.length / actualSlideCount));
        const adjustedDuration = Math.max(15, Math.min(120, proportionalDuration));

        return `  "${slideKey}": {
    "title": "${title}",
    "duration_seconds": ${adjustedDuration},
    "script": "Script adapt√© pour ${title}. ${resourcesAnalysis.vocabulary_adapted ? 'Utiliser la terminologie sp√©cialis√©e.' : ''} ${resourcesAnalysis.examples_extracted ? 'Mentionner les exemples des documents.' : ''}",
    "tone": "${tone}",
    "key_phrases": ${resourcesAnalysis.key_terminology.length > 0 ? JSON.stringify(resourcesAnalysis.key_terminology.slice(0, 2)) : '["point important"]'},
    "uses_resources": ${resourcesAnalysis.files_content_integrated}
  }`;
    }).join(',\n')}
}

R√àGLES:
- Ton naturel et ${resourcesAnalysis.company_context_integrated ? 'professionnel' : 'conversationnel'}
- ${resourcesAnalysis.vocabulary_adapted ? 'Utiliser OBLIGATOIREMENT la terminologie fournie' : 'Langage accessible'}
- ${resourcesAnalysis.examples_extracted ? 'Int√©grer les exemples des documents' : 'Exemples g√©n√©riques'}

G√©n√®re UNIQUEMENT ce JSON avec EXACTEMENT ${actualSlideCount} scripts, rien d'autre.`;

    return prompt;
}

// üîß FONCTIONS UTILITAIRES

function cleanMarkdown(markdown) {
    return markdown
        .replace(/```markdown\n/g, '')
        .replace(/\n```/g, '')
        .replace(/```/g, '')
        .trim();
}

function cleanNarrationResponse(response) {
    return response
        .replace(/```json\n/g, '')
        .replace(/\n```/g, '')
        .replace(/```/g, '')
        .replace(/^[^{]*/, '')
        .replace(/[^}]*$/, '')
        .trim();
}

// üîß CR√âATION FALLBACK MARKDOWN CORRIG√â
// üîß CR√âATION FALLBACK MARKDOWN CORRIG√â
function createFallbackMarkdown(planData, resourcesAnalysis) {
    const { topic, plan_sections, settings } = planData;
    const { duration = 5 } = settings || {};

    return `---
theme: academic
background: linear-gradient(45deg, #1e3c72, #2a5298)
class: text-center
title: ${topic}
---

# ${topic}
## Formation ${duration} minutes

${resourcesAnalysis.files_content_integrated ? `
<div class="text-sm mt-4 bg-blue-50 p-3 rounded">
  üìö Formation enrichie par ${resourcesAnalysis.total_files} document(s)
</div>
` : ''}

<div class="pt-12">
  <span @click="$slidev.nav.next" class="px-6 py-3 rounded-lg cursor-pointer bg-blue-600 text-white">
    üöÄ Commencer
  </span>
</div>

${plan_sections.map(section => {
        // üöÄ CORRECTION - Utiliser layout default avec structure correcte
        return `
---
layout: default
---

# ${section.title}

<div class="max-w-4xl mx-auto mt-8">

<div class="space-y-6">
${section.what_to_cover ? section.what_to_cover.map(point => `
<div class="bg-white p-4 rounded-lg border-l-4 border-blue-500">
  <div class="font-semibold text-gray-800">‚Ä¢ ${point}</div>
</div>`).join('') : `
<div class="bg-white p-4 rounded-lg border-l-4 border-blue-500">
  <div class="font-semibold text-gray-800">‚Ä¢ Contenu √† d√©velopper</div>
</div>`}
</div>

${section.enhanced_with_resources ? `
<div class="mt-8 p-6 bg-blue-50 rounded-xl">
  <h3 class="text-lg font-semibold mb-2 text-blue-700">üí° Adapt√© √† vos ressources</h3>
  <div class="text-sm text-blue-600">${section.content_summary || 'Contenu personnalis√©'}</div>
</div>
` : `
<div class="mt-8 p-4 bg-gray-50 rounded-lg">
  <div class="text-sm text-gray-600">
    ‚è±Ô∏è ${section.duration_seconds}s ‚Ä¢ ${section.type}
  </div>
</div>
`}

</div>`;
    }).join('')}

---
layout: end
---

# Merci !

<div class="text-center">
  <div class="text-6xl mb-4">üéâ</div>
  <div class="text-2xl">Formation ${topic} termin√©e</div>
  <div class="text-lg text-gray-600 mt-2">Dur√©e: ${duration} minutes</div>
</div>`;
}

// üîß ROUTE SAUVEGARDE
router.post('/save-files', async (req, res) => {
    try {
        const { markdown, narration_script, slides_id } = req.body;

        if (!markdown) {
            return res.status(400).json({
                error: 'Le champ "markdown" est requis'
            });
        }

        const slidesDir = path.join(__dirname, '..', '..', 'generated-slides');
        await fs.mkdir(slidesDir, { recursive: true });

        const baseFilename = slides_id || `resource_slides_${Date.now()}`;
        const savedFiles = [];

        // Sauvegarder markdown
        const markdownFile = `${baseFilename}.md`;
        const markdownPath = path.join(slidesDir, markdownFile);
        await fs.writeFile(markdownPath, markdown, 'utf8');
        savedFiles.push(markdownFile);

        // Sauvegarder script narration
        if (narration_script) {
            const narrationFile = `narration_${baseFilename}.json`;
            const narrationPath = path.join(slidesDir, narrationFile);
            await fs.writeFile(narrationPath, JSON.stringify(narration_script, null, 2), 'utf8');
            savedFiles.push(narrationFile);

            // Script texte
            const scriptText = Object.entries(narration_script)
                .map(([slide, data]) => `=== ${data.title} (${data.duration_seconds}s) ===\n${data.script}\n`)
                .join('\n');

            const scriptFile = `script_${baseFilename}.txt`;
            const scriptPath = path.join(slidesDir, scriptFile);
            await fs.writeFile(scriptPath, scriptText, 'utf8');
            savedFiles.push(scriptFile);
        }

        res.json({
            message: 'Fichiers sauv√©s avec succ√®s',
            saved_files: savedFiles,
            directory: slidesDir,
            slidev_command: `cd generated-slides && slidev ${markdownFile}`
        });

    } catch (error) {
        res.status(500).json({
            error: 'Erreur sauvegarde',
            details: error.message
        });
    }
});

// üîß ROUTE INFO
router.get('/plan-to-markdown/info', (req, res) => {
    res.json({
        endpoint: 'POST /ai/plan-to-markdown',
        description: 'Convertit le plan en Markdown Slidev enrichi avec synchronisation parfaite slides/narration',
        version: '5.1 - Perfect Synchronization + Two-Cols Fix',
        status: '‚úÖ OP√âRATIONNEL',

        fonctionnalit√©s: [
            'üîÑ Synchronisation automatique slides ‚Üî scripts narration',
            'üìö Utilisation intelligente des fichiers upload√©s',
            'üé¨ Scripts de narration adapt√©s au vocabulaire',
            'üè¢ Adaptation automatique au contexte entreprise',
            'üîë Int√©gration terminologie sp√©cifique',
            'üí° Exemples personnalis√©s des documents',
            'üìä Validation et correction automatique des d√©synchronisations',
            'üîß Correction structure two-cols Slidev'
        ],

        synchronization_features: [
            '‚úÖ D√©tection automatique du nombre de slides markdown',
            'üîß Ajustement forc√© du nombre de scripts narration',
            'üìà Mapping intelligent sections ‚Üí slides',
            '‚öñÔ∏è R√©partition proportionnelle des dur√©es',
            'üîç Validation finale de synchronisation'
        ],

        slidev_fixes: [
            'üîß Correction structure two-cols: titres dans les slots',
            '‚úÖ Respect des templates v-slot:default et v-slot:right',
            'üõ°Ô∏è Pr√©vention erreurs Vue.js Slidev',
            'üìè G√©n√©ration correcte du nombre de slides'
        ],

        workflow: [
            '1. POST /ai/groq-plan (avec ressources/fichiers)',
            '2. POST /ai/plan-to-markdown (g√©n√®re markdown + compte slides)',
            '3. G√©n√©ration narration avec nombre exact de scripts',
            '4. Validation synchronisation finale',
            '5. POST /ai/generate-narration-bark (audio parfaitement align√©)'
        ],

        mapping_strategies: {
            one_to_one: 'Slides = Sections ‚Üí Mapping direct 1:1',
            expansion: 'Slides > Sections ‚Üí Subdivision intelligente',
            compression: 'Slides < Sections ‚Üí Combinaison logique'
        },

        compatibilit√©: {
            format_entr√©e: 'Compatible avec tous les plans de groq-plan',
            format_sortie: 'Compatible avec ancien format + enrichissements + sync info',
            r√©trocompatible: 'Fonctionne avec plans sans ressources',
            guaranteed_sync: 'Synchronisation garantie √† 100%',
            slidev_compliant: 'Markdown Slidev valide sans erreurs Vue.js'
        },

        response_additions: {
            synchronization_info: 'D√©tails de synchronisation et mapping',
            perfectly_synchronized: 'Flag confirmant la synchronisation',
            mapping_type: 'Type de mapping appliqu√© (1:1, expanded, compressed)'
        },

        exemples_int√©gration: {
            fichier_excel: 'Guide Excel ‚Üí terminologie VLOOKUP, TCD dans slides + scripts',
            proc√©dures: 'Proc√©dures d√©tect√©es ‚Üí r√©f√©rences dans markdown + narration',
            contexte_entreprise: 'Contexte fourni ‚Üí adaptation ton professionnel',
            exemples_sp√©cifiques: 'Exemples extraits ‚Üí int√©gration dans slides + scripts'
        }
    });
});

// üß™ ROUTE DE TEST SYNCHRONISATION
router.post('/test-synchronization', async (req, res) => {
    try {
        const { markdown, plan_sections } = req.body;

        if (!markdown || !plan_sections) {
            return res.status(400).json({
                error: 'markdown et plan_sections requis'
            });
        }

        const slideCount = countActualSlides(markdown);
        const sectionCount = plan_sections.length;

        // Test de synchronisation
        const mockResourcesAnalysis = {
            total_files: 0,
            vocabulary_adapted: false,
            files_content_integrated: false,
            key_terminology: [],
            extracted_examples: []
        };

        const syncedNarration = createSynchronizedFallbackNarration(
            { plan_sections },
            mockResourcesAnalysis,
            slideCount
        );

        res.json({
            test_results: {
                detected_slides: slideCount,
                plan_sections: sectionCount,
                generated_scripts: Object.keys(syncedNarration).length,
                synchronized: Object.keys(syncedNarration).length === slideCount
            },
            mapping_analysis: {
                type: slideCount === sectionCount ? '1:1' :
                    slideCount > sectionCount ? 'expansion' : 'compression',
                ratio: Math.round((slideCount / sectionCount) * 100) / 100
            },
            generated_narration: syncedNarration,
            success: true
        });

    } catch (error) {
        res.status(500).json({
            error: 'Erreur test synchronisation',
            details: error.message
        });
    }
});

module.exports = router;