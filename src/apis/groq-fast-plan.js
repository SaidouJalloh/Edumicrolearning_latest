// // src/apis/groq-fast-plan.js - Version Groq de votre API

// const express = require('express');
// const { v4: uuidv4 } = require('uuid');
// const LLMFactory = require('../utils/llm-factory');

// const router = express.Router();
// const llmFactory = new LLMFactory();

// // Cache (m√™me principe qu'avant)
// const planCache = new Map();

// function createOptimizedPrompt({ topic, type, level, duration_minutes }) {
//     return `Tu es un expert en p√©dagogie. Cr√©e un plan de formation micro-learning.

// SUJET: ${topic}
// TYPE: ${type === 'conceptual' ? 'Conceptuel (th√©orie)' : 'D√©monstratif (logiciels)'}
// NIVEAU: ${level}  
// DUR√âE: ${duration_minutes} minutes

// INSTRUCTIONS:
// - Plan structur√© en 3-4 sections maximum
// - Format JSON uniquement
// - Total ${duration_minutes * 60} secondes

// FORMAT R√âPONSE:
// [
//   {"title":"Introduction","objective":"Pr√©senter le sujet","duration_seconds":30},
//   {"title":"Point cl√© 1","objective":"Objectif pr√©cis","duration_seconds":120},
//   {"title":"Point cl√© 2","objective":"Objectif pr√©cis","duration_seconds":120},
//   {"title":"Conclusion","objective":"R√©capituler","duration_seconds":30}
// ]

// R√©ponse JSON directe:`;
// }

// // API /ai/groq-plan - Version ultra-rapide avec Groq
// router.post('/groq-plan', async (req, res) => {
//     const startTime = Date.now();

//     try {
//         const { topic, type, level, duration_minutes = 5 } = req.body;

//         if (!topic || !type || !level) {
//             return res.status(400).json({
//                 error: 'Param√®tres manquants: topic, type, level requis'
//             });
//         }

//         // V√©rifier cache
//         const cacheKey = `groq-${topic}-${type}-${level}-${duration_minutes}`;
//         if (planCache.has(cacheKey)) {
//             console.log(`üí® Plan Groq r√©cup√©r√© du cache: ${topic}`);
//             const cached = planCache.get(cacheKey);
//             cached.cached = true;
//             cached.generation_time_ms = 0;
//             return res.json(cached);
//         }

//         console.log(`‚ö° G√©n√©ration Groq: ${topic} (${type}, ${level})`);

//         const planId = uuidv4();
//         const prompt = createOptimizedPrompt({ topic, type, level, duration_minutes });

//         // G√©n√©ration avec Groq (ultra-rapide)
//         const generation = await llmFactory.generateText(prompt, {
//             temperature: 0.6,
//             max_tokens: 500
//         });

//         // Parse JSON
//         let sections;
//         try {
//             const jsonMatch = generation.text.match(/\[[\s\S]*\]/);
//             sections = jsonMatch ? JSON.parse(jsonMatch[0]) : [
//                 { title: "Introduction", objective: "Pr√©senter", duration_seconds: 30 },
//                 { title: "D√©veloppement", objective: "Apprendre", duration_seconds: duration_minutes * 60 - 60 },
//                 { title: "Conclusion", objective: "Conclure", duration_seconds: 30 }
//             ];
//         } catch (e) {
//             sections = [
//                 { title: "Introduction", objective: "Pr√©senter le sujet", duration_seconds: 30 },
//                 { title: "Contenu principal", objective: "Ma√Ætriser l'essentiel", duration_seconds: duration_minutes * 60 - 60 },
//                 { title: "Conclusion", objective: "R√©capituler", duration_seconds: 30 }
//             ];
//         }

//         const totalTime = Date.now() - startTime;

//         const result = {
//             plan_id: planId,
//             topic,
//             type,
//             level,
//             duration_minutes,
//             total_duration_seconds: sections.reduce((sum, s) => sum + s.duration_seconds, 0),
//             sections_count: sections.length,
//             sections,
//             generation_time_ms: totalTime,
//             llm_generation_time_ms: generation.duration_ms,
//             provider: generation.provider,
//             cached: false,
//             generated_at: new Date().toISOString(),
//             status: 'completed'
//         };

//         // Cache 1 heure
//         planCache.set(cacheKey, { ...result });
//         setTimeout(() => planCache.delete(cacheKey), 3600000);

//         console.log(`‚úÖ Plan Groq g√©n√©r√© en ${totalTime}ms (LLM: ${generation.duration_ms}ms)`);
//         res.json(result);

//     } catch (error) {
//         const totalTime = Date.now() - startTime;
//         console.error(`‚ùå Erreur Groq apr√®s ${totalTime}ms:`, error);
//         res.status(500).json({
//             error: 'Erreur g√©n√©ration plan Groq',
//             generation_time_ms: totalTime,
//             details: error.message
//         });
//     }
// });

// // API de sant√© pour v√©rifier providers
// router.get('/health', async (req, res) => {
//     try {
//         const health = await llmFactory.healthCheck();
//         res.json({
//             status: 'ok',
//             providers: health,
//             timestamp: new Date().toISOString()
//         });
//     } catch (error) {
//         res.status(500).json({
//             status: 'error',
//             error: error.message
//         });
//     }
// });

// module.exports = router;





















// code qui marche mais ne respecte pas la dur√©e donner et non seulement le plan du cours il le traitee
// src/apis/groq-fast-plan.js - Version am√©lior√©e avec nouveau format
// const express = require('express');
// const axios = require('axios');
// const { v4: uuidv4 } = require('uuid');
// const LLMFactory = require('../utils/llm-factory');

// const router = express.Router();
// const llmFactory = new LLMFactory();

// // Cache sp√©cialis√© pour les plans
// const planCache = new Map();

// // Validation des champs obligatoires
// function validatePayload(payload) {
//     const errors = [];

//     // Validation topic
//     if (!payload.topic || typeof payload.topic !== 'string') {
//         errors.push('Le champ "topic" est obligatoire et doit √™tre une cha√Æne de caract√®res');
//     } else if (payload.topic.length < 10 || payload.topic.length > 500) {
//         errors.push('Le champ "topic" doit contenir entre 10 et 500 caract√®res');
//     }

//     // Validation capsuleType
//     if (!payload.capsuleType || !['conceptual', 'demonstrative'].includes(payload.capsuleType)) {
//         errors.push('Le champ "capsuleType" est obligatoire et doit √™tre "conceptual" ou "demonstrative"');
//     }

//     // Validation settings
//     if (!payload.settings || typeof payload.settings !== 'object') {
//         errors.push('Le champ "settings" est obligatoire et doit √™tre un objet');
//     } else {
//         const { level, duration, style } = payload.settings;

//         if (!level || !['beginner', 'intermediate', 'advanced'].includes(level)) {
//             errors.push('Le champ "settings.level" est obligatoire et doit √™tre "beginner", "intermediate" ou "advanced"');
//         }

//         if (!duration || ![3, 5].includes(duration)) {
//             errors.push('Le champ "settings.duration" est obligatoire et doit √™tre 3 ou 5');
//         }

//         if (!style || !['practical', 'corporate', 'academic', 'general'].includes(style)) {
//             errors.push('Le champ "settings.style" est obligatoire et doit √™tre "practical", "corporate", "academic" ou "general"');
//         }
//     }

//     // Validation resources (optionnel)
//     if (payload.resources && !Array.isArray(payload.resources)) {
//         errors.push('Le champ "resources" doit √™tre un tableau');
//     }

//     return errors;
// }

// // Fonction pour cr√©er des prompts adapt√©s au style
// function createStyledPrompt({ topic, capsuleType, settings, resources }) {
//     const { level, duration, style } = settings;

//     // Adaptation du style p√©dagogique
//     const stylePrompts = {
//         practical: "Focus sur l'application concr√®te et imm√©diate. Privil√©gier les exemples pratiques et les cas d'usage r√©els.",
//         corporate: "Adopter un ton professionnel et formel. Mettre l'accent sur la productivit√© et l'efficacit√© en entreprise.",
//         academic: "Approche th√©orique et structur√©e. Inclure les concepts fondamentaux et les r√©f√©rences.",
//         general: "Ton accessible et p√©dagogique pour le grand public. Vulgariser les concepts complexes."
//     };

//     const levelDescriptions = {
//         beginner: "d√©butant (aucune exp√©rience pr√©alable)",
//         intermediate: "interm√©diaire (quelques connaissances de base)",
//         advanced: "avanc√© (exp√©rience confirm√©e)"
//     };

//     const typeDescriptions = {
//         conceptual: "Formation conceptuelle (th√©ories, soft-skills, concepts)",
//         demonstrative: "Formation d√©monstrative (logiciels, proc√©dures, manipulations)"
//     };

//     const resourcesContext = resources && resources.length > 0
//         ? `Ressources disponibles: ${resources.map(r => `${r.name} (${r.type})`).join(', ')}`
//         : 'Aucune ressource fournie - g√©n√©ration bas√©e sur le sujet uniquement';

//     return `Tu es un expert en p√©dagogie et conception de formations micro-learning.

// CONTEXTE DE G√âN√âRATION:
// - Sujet: ${topic}
// - Type: ${typeDescriptions[capsuleType]}
// - Niveau: ${levelDescriptions[level]}
// - Dur√©e: ${duration} minutes
// - Style: ${style} - ${stylePrompts[style]}
// - ${resourcesContext}

// OBJECTIFS P√âDAGOGIQUES:
// ${capsuleType === 'demonstrative'
//             ? '- Permettre √† l\'apprenant de reproduire les actions montr√©es\n- Fournir des √©tapes concr√®tes et actionables\n- Inclure les points d\'attention et erreurs courantes'
//             : '- Faire comprendre les concepts cl√©s\n- Permettre l\'application dans le contexte professionnel\n- Favoriser la m√©morisation et la r√©flexion'
//         }

// ADAPTATION NIVEAU ${level.toUpperCase()}:
// ${level === 'beginner'
//             ? '- D√©finir tous les termes techniques\n- Partir des bases absolues\n- Multiplier les exemples simples'
//             : level === 'intermediate'
//                 ? '- Supposer des connaissances de base\n- Introduire des concepts plus avanc√©s\n- Faire des liens avec l\'exp√©rience existante'
//                 : '- Approche experte et concise\n- Concepts avanc√©s et nuances\n- Focus sur l\'optimisation et les bonnes pratiques'
//         }

// CONTRAINTES TEMPORELLES:
// - Dur√©e totale: ${duration} minutes (${duration * 60} secondes)
// - 3-4 sections maximum pour respecter le timing
// - Introduction: 30 secondes maximum
// - Conclusion: 30 secondes maximum
// - D√©veloppement: ${(duration * 60) - 60} secondes

// FORMAT R√âPONSE JSON STRICT:
// {
//   "topic": "${topic}",
//   "capsule_type": "${capsuleType}",
//   "level": "${level}",
//   "duration_minutes": ${duration},
//   "style": "${style}",
//   "estimated_total_seconds": ${duration * 60},
//   "sections": [
//     {
//       "section_number": 1,
//       "title": "Titre engageant de la section",
//       "objective": "Objectif p√©dagogique pr√©cis de cette section",
//       "content": "Contenu d√©taill√© adapt√© au style ${style}",
//       "duration_seconds": 30,
//       "key_points": ["Point cl√© 1", "Point cl√© 2", "Point cl√© 3"]
//     }
//   ],
//   "learning_outcomes": [
//     "R√©sultat d'apprentissage 1",
//     "R√©sultat d'apprentissage 2"
//   ],
//   "assessment_suggestions": [
//     "Question ou exercice pour valider la compr√©hension"
//   ]
// }

// STYLE ${style.toUpperCase()} SP√âCIFIQUE:
// ${style === 'practical'
//             ? 'Contenu ax√© sur le "comment faire". Exemples concrets, √©tapes actionables, conseils pratiques.'
//             : style === 'corporate'
//                 ? 'Langage professionnel. ROI, efficacit√©, productivit√©. Exemples en contexte entreprise.'
//                 : style === 'academic'
//                     ? 'Approche structur√©e et th√©orique. D√©finitions pr√©cises, r√©f√©rences, m√©thodologie.'
//                     : 'Ton accessible et bienveillant. Vulgarisation, analogies, encouragements.'
//         }

// G√©n√®re le plan JSON complet pour cette formation micro-learning:`;
// }

// // API POST /ai/groq-plan - Version am√©lior√©e
// router.post('/groq-plan', async (req, res) => {
//     const startTime = Date.now();

//     try {
//         // Validation du payload
//         const validationErrors = validatePayload(req.body);
//         if (validationErrors.length > 0) {
//             return res.status(400).json({
//                 error: 'Erreurs de validation',
//                 details: validationErrors,
//                 expected_format: {
//                     topic: "string (10-500 caract√®res)",
//                     capsuleType: "conceptual|demonstrative",
//                     settings: {
//                         level: "beginner|intermediate|advanced",
//                         duration: "3|5",
//                         style: "practical|corporate|academic|general"
//                     },
//                     resources: "[optionnel] array of {name, type, size}"
//                 }
//             });
//         }

//         const { topic, capsuleType, settings, resources = [] } = req.body;

//         // V√©rifier cache avec nouvelle cl√© incluant style
//         const cacheKey = `groq-v2-${topic}-${capsuleType}-${settings.level}-${settings.duration}-${settings.style}`;
//         if (planCache.has(cacheKey)) {
//             console.log(`üí® Plan r√©cup√©r√© du cache: ${topic.substring(0, 50)}...`);
//             const cached = planCache.get(cacheKey);
//             cached.cached = true;
//             cached.generation_time_ms = 0;
//             cached.timestamp = new Date().toISOString();
//             return res.json(cached);
//         }

//         console.log(`‚ö° G√©n√©ration Groq v2: ${topic.substring(0, 50)}... (${capsuleType}, ${settings.level}, ${settings.style})`);

//         const planId = uuidv4();
//         const prompt = createStyledPrompt({ topic, capsuleType, settings, resources });

//         // G√©n√©ration avec Groq
//         const generation = await llmFactory.generateText(prompt, {
//             temperature: 0.6,
//             max_tokens: 2000
//         });

//         // Parse JSON avec gestion d'erreurs robuste
//         let planData;
//         try {
//             const jsonMatch = generation.text.match(/\{[\s\S]*\}/);
//             planData = jsonMatch ? JSON.parse(jsonMatch[0]) : null;
//         } catch (e) {
//             console.warn('Erreur parsing JSON, g√©n√©ration fallback');
//             planData = null;
//         }

//         // Fallback si parsing √©choue
//         if (!planData || !planData.sections) {
//             planData = createFallbackPlan({ topic, capsuleType, settings });
//         }

//         const totalTime = Date.now() - startTime;

//         const result = {
//             plan_id: planId,
//             topic,
//             capsule_type: capsuleType,
//             settings: {
//                 level: settings.level,
//                 duration: settings.duration,
//                 style: settings.style
//             },
//             resources_count: resources.length,
//             sections: planData.sections || [],
//             learning_outcomes: planData.learning_outcomes || [],
//             assessment_suggestions: planData.assessment_suggestions || [],
//             estimated_total_seconds: planData.estimated_total_seconds || (settings.duration * 60),
//             sections_count: planData.sections?.length || 0,
//             generation_time_ms: totalTime,
//             llm_generation_time_ms: generation.duration_ms,
//             provider: generation.provider,
//             cached: false,
//             generated_at: new Date().toISOString(),
//             status: 'completed'
//         };

//         // Cache pendant 1 heure
//         planCache.set(cacheKey, { ...result });
//         setTimeout(() => planCache.delete(cacheKey), 3600000);

//         console.log(`‚úÖ Plan Groq v2 g√©n√©r√©: ${planData.sections?.length || 0} sections en ${totalTime}ms`);
//         res.json(result);

//     } catch (error) {
//         const totalTime = Date.now() - startTime;
//         console.error(`‚ùå Erreur g√©n√©ration Groq v2 apr√®s ${totalTime}ms:`, error);
//         res.status(500).json({
//             error: 'Erreur lors de la g√©n√©ration du plan',
//             generation_time_ms: totalTime,
//             details: error.message
//         });
//     }
// });

// // Fonction fallback si parsing JSON √©choue
// function createFallbackPlan({ topic, capsuleType, settings }) {
//     const { level, duration, style } = settings;

//     return {
//         topic,
//         capsule_type: capsuleType,
//         level,
//         duration_minutes: duration,
//         style,
//         estimated_total_seconds: duration * 60,
//         sections: [
//             {
//                 section_number: 1,
//                 title: "Introduction",
//                 objective: "Pr√©senter le sujet et les objectifs",
//                 content: `Introduction au sujet: ${topic}`,
//                 duration_seconds: 30,
//                 key_points: ["Pr√©sentation du contexte", "Objectifs d'apprentissage"]
//             },
//             {
//                 section_number: 2,
//                 title: "D√©veloppement principal",
//                 objective: "Ma√Ætriser les concepts ou actions essentiels",
//                 content: `D√©veloppement du contenu principal selon le style ${style}`,
//                 duration_seconds: (duration * 60) - 60,
//                 key_points: ["Concept principal", "Application pratique", "Points d'attention"]
//             },
//             {
//                 section_number: 3,
//                 title: "Conclusion",
//                 objective: "Synth√©tiser et donner les prochaines √©tapes",
//                 content: "R√©capitulatif et recommandations pour la suite",
//                 duration_seconds: 30,
//                 key_points: ["Synth√®se", "Prochaines √©tapes"]
//             }
//         ],
//         learning_outcomes: [
//             `Comprendre les bases de ${topic}`,
//             "√ätre capable d'appliquer les concepts pr√©sent√©s"
//         ],
//         assessment_suggestions: [
//             "Quiz de v√©rification des concepts cl√©s",
//             "Exercice pratique d'application"
//         ]
//     };
// }

// // API GET pour tester les diff√©rents styles
// router.get('/groq-plan/styles', (req, res) => {
//     res.json({
//         available_styles: {
//             practical: {
//                 name: "Pratique",
//                 description: "Focus sur l'application concr√®te et imm√©diate",
//                 best_for: ["Formations techniques", "Proc√©dures", "Outils"]
//             },
//             corporate: {
//                 name: "Corporate",
//                 description: "Ton professionnel ax√© productivit√©",
//                 best_for: ["Formation entreprise", "Management", "Processus"]
//             },
//             academic: {
//                 name: "Acad√©mique",
//                 description: "Approche th√©orique et structur√©e",
//                 best_for: ["Concepts complexes", "Fondamentaux", "Recherche"]
//             },
//             general: {
//                 name: "G√©n√©ral",
//                 description: "Accessible au grand public",
//                 best_for: ["Vulgarisation", "Sensibilisation", "Culture g√©n√©rale"]
//             }
//         },
//         levels: ["beginner", "intermediate", "advanced"],
//         durations: [3, 5],
//         capsule_types: ["conceptual", "demonstrative"]
//     });
// });

// module.exports = router;

/*
TESTS POSTMAN NOUVEAUX:

1. Test nouveau format basique:
POST https://edupro-ai.onrender.com/ai/groq-plan
{
  "topic": "Une introduction √† la programmation asynchrone en JavaScript, en expliquant les concepts de promesses et d'async/await.",
  "capsuleType": "conceptual",
  "settings": {
    "level": "beginner",
    "duration": 5,
    "style": "practical"
  }
}

2. Test avec ressources:
POST https://edupro-ai.onrender.com/ai/groq-plan  
{
  "topic": "Cr√©er un tableau crois√© dynamique Excel pour analyser les ventes",
  "capsuleType": "demonstrative",
  "settings": {
    "level": "intermediate", 
    "duration": 3,
    "style": "corporate"
  },
  "resources": [
    {"name": "exemple-ventes.xlsx", "type": "excel", "size": 1024},
    {"name": "guide-tcd.pdf", "type": "pdf", "size": 2048}
  ]
}

3. Test style acad√©mique:
POST https://edupro-ai.onrender.com/ai/groq-plan
{
  "topic": "Les principes fondamentaux de la gestion de projet agile et m√©thodologie Scrum",
  "capsuleType": "conceptual", 
  "settings": {
    "level": "advanced",
    "duration": 5,
    "style": "academic"
  }
}

4. Test validation erreurs:
POST https://edupro-ai.onrender.com/ai/groq-plan
{
  "topic": "test",
  "capsuleType": "invalid",
  "settings": {
    "level": "expert",
    "duration": 10,
    "style": "custom"
  }
}

5. Test styles disponibles:
GET https://edupro-ai.onrender.com/ai/groq-plan/styles
*/












// code qui marche sans outcomelearning
// const express = require('express');
// const axios = require('axios');
// const { v4: uuidv4 } = require('uuid');
// const LLMFactory = require('../utils/llm-factory');

// const router = express.Router();
// const llmFactory = new LLMFactory();

// // Cache sp√©cialis√© pour les plans
// const planCache = new Map();

// // Validation des champs obligatoires
// function validatePayload(payload) {
//     const errors = [];

//     // Validation topic
//     if (!payload.topic || typeof payload.topic !== 'string') {
//         errors.push('Le champ "topic" est obligatoire et doit √™tre une cha√Æne de caract√®res');
//     } else if (payload.topic.length < 10 || payload.topic.length > 500) {
//         errors.push('Le champ "topic" doit contenir entre 10 et 500 caract√®res');
//     }

//     // Validation capsuleType
//     if (!payload.capsuleType || !['conceptual', 'demonstrative'].includes(payload.capsuleType)) {
//         errors.push('Le champ "capsuleType" est obligatoire et doit √™tre "conceptual" ou "demonstrative"');
//     }

//     // Validation settings
//     if (!payload.settings || typeof payload.settings !== 'object') {
//         errors.push('Le champ "settings" est obligatoire et doit √™tre un objet');
//     } else {
//         const { level, duration, style } = payload.settings;

//         if (!level || !['beginner', 'intermediate', 'advanced'].includes(level)) {
//             errors.push('Le champ "settings.level" est obligatoire et doit √™tre "beginner", "intermediate" ou "advanced"');
//         }

//         // ‚úÖ AM√âLIORATION : Accepter n'importe quelle dur√©e entre 1 et 30 minutes
//         if (!duration || typeof duration !== 'number' || duration < 1 || duration > 30) {
//             errors.push('Le champ "settings.duration" est obligatoire et doit √™tre un nombre entre 1 et 30 minutes');
//         }

//         if (!style || !['practical', 'corporate', 'academic', 'general'].includes(style)) {
//             errors.push('Le champ "settings.style" est obligatoire et doit √™tre "practical", "corporate", "academic" ou "general"');
//         }
//     }

//     // Validation resources (optionnel)
//     if (payload.resources && !Array.isArray(payload.resources)) {
//         errors.push('Le champ "resources" doit √™tre un tableau');
//     }

//     return errors;
// }

// // ‚úÖ FONCTION : Calcul pr√©cis de la r√©partition du temps pour CAPSULES VID√âO
// function calculateTimeDistribution(totalMinutes) {
//     const totalSeconds = totalMinutes * 60;

//     // Structure fixe : Introduction -> D√©veloppement -> Conclusion
//     let introSeconds, developmentSeconds, conclusionSeconds;

//     if (totalMinutes <= 1) {
//         // Capsules ultra-courtes (30-60s) - Format TikTok/Shorts
//         introSeconds = 10;  // Accroche rapide
//         conclusionSeconds = 10;  // Call-to-action
//         developmentSeconds = totalSeconds - 20;
//     } else if (totalMinutes <= 3) {
//         // Capsules courtes (1-3 min) - Format r√©seaux sociaux
//         introSeconds = 15;  // Accroche + contexte
//         conclusionSeconds = 15;  // R√©cap + CTA
//         developmentSeconds = totalSeconds - 30;
//     } else if (totalMinutes <= 5) {
//         // Capsules moyennes (3-5 min) - Format YouTube/formation
//         introSeconds = 20;  // Introduction engageante
//         conclusionSeconds = 20;  // Conclusion + prochaines √©tapes
//         developmentSeconds = totalSeconds - 40;
//     } else if (totalMinutes <= 10) {
//         // Capsules longues (5-10 min) - Format √©ducatif
//         introSeconds = 30;  // Introduction d√©taill√©e
//         conclusionSeconds = 30;  // Conclusion + ressources
//         developmentSeconds = totalSeconds - 60;
//     } else {
//         // Capsules tr√®s longues (10-30 min) - Format webinaire
//         introSeconds = 45;  // Introduction + agenda
//         conclusionSeconds = 45;  // R√©cap + Q&A
//         developmentSeconds = totalSeconds - 90;
//     }

//     // Si contenu principal trop long, on le divise en segments
//     const developmentSections = [];
//     if (developmentSeconds > 180) { // Plus de 3 minutes de contenu
//         const numSegments = Math.ceil(developmentSeconds / 120); // Max 2 min par segment
//         const timePerSegment = Math.floor(developmentSeconds / numSegments);
//         const remainder = developmentSeconds % numSegments;

//         for (let i = 0; i < numSegments; i++) {
//             const segmentTime = timePerSegment + (i < remainder ? 1 : 0);
//             developmentSections.push({
//                 section_number: i + 2, // Apr√®s introduction
//                 duration_seconds: segmentTime,
//                 is_main_content: true,
//                 segment_index: i
//             });
//         }
//     } else {
//         developmentSections.push({
//             section_number: 2,
//             duration_seconds: developmentSeconds,
//             is_main_content: true,
//             segment_index: 0
//         });
//     }

//     return {
//         total_seconds: totalSeconds,
//         introduction: { section_number: 1, duration_seconds: introSeconds },
//         development_sections: developmentSections,
//         conclusion: {
//             section_number: 1 + developmentSections.length + 1,
//             duration_seconds: conclusionSeconds
//         },
//         total_sections: 2 + developmentSections.length // Intro + Dev sections + Conclusion
//     };
// }

// // ‚úÖ FONCTION MODIFI√âE : Cr√©ation de prompts pour PLAN UNIQUEMENT
// function createStyledPrompt({ topic, capsuleType, settings, resources }) {
//     const { level, duration, style } = settings;
//     const timeDistribution = calculateTimeDistribution(duration);

//     // Adaptation du style p√©dagogique
//     const stylePrompts = {
//         practical: "Focus sur l'application concr√®te et imm√©diate. Privil√©gier les exemples pratiques et les cas d'usage r√©els.",
//         corporate: "Adopter un ton professionnel et formel. Mettre l'accent sur la productivit√© et l'efficacit√© en entreprise.",
//         academic: "Approche th√©orique et structur√©e. Inclure les concepts fondamentaux et les r√©f√©rences.",
//         general: "Ton accessible et p√©dagogique pour le grand public. Vulgariser les concepts complexes."
//     };

//     const levelDescriptions = {
//         beginner: "d√©butant (aucune exp√©rience pr√©alable)",
//         intermediate: "interm√©diaire (quelques connaissances de base)",
//         advanced: "avanc√© (exp√©rience confirm√©e)"
//     };

//     const typeDescriptions = {
//         conceptual: "Capsule vid√©o explicative sur des concepts, th√©ories ou soft-skills",
//         demonstrative: "Capsule vid√©o tutoriel montrant des √©tapes pratiques et des manipulations"
//     };

//     const resourcesContext = resources && resources.length > 0
//         ? `Ressources disponibles: ${resources.map(r => `${r.name} (${r.type})`).join(', ')}`
//         : 'Aucune ressource fournie - g√©n√©ration bas√©e sur le sujet uniquement';

//     // ‚úÖ Structure temporelle pour capsules vid√©o
//     const videoStructure = [
//         {
//             type: "introduction",
//             duration: timeDistribution.introduction.duration_seconds,
//             description: "Accroche et pr√©sentation du sujet"
//         },
//         ...timeDistribution.development_sections.map((dev, index) => ({
//             type: `d√©veloppement_${index + 1}`,
//             duration: dev.duration_seconds,
//             description: timeDistribution.development_sections.length > 1
//                 ? `Partie ${index + 1} du contenu principal`
//                 : "Contenu principal de la capsule"
//         })),
//         {
//             type: "conclusion",
//             duration: timeDistribution.conclusion.duration_seconds,
//             description: "R√©cap et call-to-action"
//         }
//     ];

//     return `Tu es un expert en cr√©ation de contenu vid√©o √©ducatif. Tu dois cr√©er UNIQUEMENT le PLAN STRUCTUR√â d'une capsule vid√©o (pas le script d√©taill√©).

// CONTEXTE DE LA CAPSULE VID√âO:
// - Sujet: ${topic}
// - Type: ${typeDescriptions[capsuleType]}
// - Niveau: ${levelDescriptions[level]}
// - Dur√©e EXACTE: ${duration} minutes (${timeDistribution.total_seconds} secondes)
// - Style: ${style} - ${stylePrompts[style]}
// - ${resourcesContext}

// üé¨ STRUCTURE VID√âO OBLIGATOIRE - ${timeDistribution.total_sections} PARTIES:
// 1. INTRODUCTION (${timeDistribution.introduction.duration_seconds}s) - Accroche et pr√©sentation
// ${timeDistribution.development_sections.map((dev, index) =>
//         `${index + 2}. D√âVELOPPEMENT ${timeDistribution.development_sections.length > 1 ? `PARTIE ${index + 1}` : ''} (${dev.duration_seconds}s) - Contenu principal`
//     ).join('\n')}
// ${timeDistribution.total_sections}. CONCLUSION (${timeDistribution.conclusion.duration_seconds}s) - R√©cap et action

// ‚è±Ô∏è CONTRAINTES TEMPORELLES STRICTES:
// - Dur√©e totale EXACTE: ${duration} minutes = ${timeDistribution.total_seconds} secondes
// - La somme des dur√©es DOIT √©galer ${timeDistribution.total_seconds}s exactement
// - Structure fixe: Introduction ‚Üí D√©veloppement ‚Üí Conclusion

// OBJECTIF DU PLAN:
// D√©finir clairement ce qui sera abord√© dans chaque partie de la capsule vid√©o, les points cl√©s √† traiter et l'objectif de chaque section. 
// IMPORTANT: Ne pas g√©n√©rer de script d√©taill√©, juste la structure et les points √† aborder.

// FORMAT JSON STRICT - PLAN VID√âO SIMPLIFI√â:
// {
//   "topic": "${topic}",
//   "capsule_type": "${capsuleType}",
//   "level": "${level}",
//   "duration_minutes": ${duration},
//   "style": "${style}",
//   "estimated_total_seconds": ${timeDistribution.total_seconds},
//   "plan_sections": [
//     {
//       "section_number": 1,
//       "title": "Introduction",
//       "type": "introduction",
//       "duration_seconds": ${timeDistribution.introduction.duration_seconds},
//       "what_to_cover": [
//         "Ce qu'il faut dire dans l'intro",
//         "Points √† aborder pour accrocher"
//       ],
//       "content_summary": "R√©sum√© de ce qui sera dit dans cette introduction"
//     },
//     ${timeDistribution.development_sections.map((dev, index) => `{
//       "section_number": ${dev.section_number},
//       "title": "D√©veloppement${timeDistribution.development_sections.length > 1 ? ` - Partie ${index + 1}` : ''}",
//       "type": "development",
//       "duration_seconds": ${dev.duration_seconds},
//       "what_to_cover": [
//         "Point principal 1 √† expliquer",
//         "Point principal 2 √† expliquer",
//         "Exemple concret √† donner"
//       ],
//       "content_summary": "R√©sum√© du contenu principal de cette partie"
//     }`).join(',\n    ')},
//     {
//       "section_number": ${timeDistribution.conclusion.section_number},
//       "title": "Conclusion",
//       "type": "conclusion",
//       "duration_seconds": ${timeDistribution.conclusion.duration_seconds},
//       "what_to_cover": [
//         "R√©cap rapide des points essentiels",
//         "Action √† faire maintenant"
//       ],
//       "content_summary": "Ce qui sera dit en conclusion"
//     }
//   ],
//   "video_goal": "Ce que la personne saura/pourra faire apr√®s avoir vu la vid√©o"
// }

// ADAPTATION NIVEAU ${level.toUpperCase()}:
// ${level === 'beginner'
//             ? '- Partir des bases absolues\n- D√©finir tous les termes techniques\n- Multiplier les exemples simples'
//             : level === 'intermediate'
//                 ? '- Supposer des connaissances de base\n- Introduire des concepts plus avanc√©s\n- Faire des liens avec l\'exp√©rience existante'
//                 : '- Approche experte et concise\n- Concepts avanc√©s et nuances\n- Focus sur l\'optimisation et les bonnes pratiques'
//         }

// STYLE ${style.toUpperCase()} SP√âCIFIQUE:
// ${style === 'practical'
//             ? 'Plan orient√© action. Points concrets et applicables imm√©diatement.'
//             : style === 'corporate'
//                 ? 'Plan professionnel. Focus sur ROI et efficacit√© business.'
//                 : style === 'academic'
//                     ? 'Plan structur√© avec progression logique et m√©thodique.'
//                     : 'Plan accessible avec vulgarisation et exemples parlants.'
//         }

// V√âRIFICATION OBLIGATOIRE:
// - La somme des duration_seconds DOIT √™tre exactement ${timeDistribution.total_seconds}
// - ${timeDistribution.total_sections} sections exactement
// - Chaque section doit avoir des points clairs √† couvrir
// - Focus sur CE QUI SERA DIT, pas sur la th√©orie p√©dagogique

// G√©n√®re le plan JSON simplifi√© pour cette capsule vid√©o:`;
// }

// // API POST /ai/groq-plan - Version modifi√©e pour PLAN UNIQUEMENT
// router.post('/groq-plan', async (req, res) => {
//     const startTime = Date.now();

//     try {
//         // Validation du payload
//         const validationErrors = validatePayload(req.body);
//         if (validationErrors.length > 0) {
//             return res.status(400).json({
//                 error: 'Erreurs de validation',
//                 details: validationErrors,
//                 expected_format: {
//                     topic: "string (10-500 caract√®res)",
//                     capsuleType: "conceptual|demonstrative",
//                     settings: {
//                         level: "beginner|intermediate|advanced",
//                         duration: "number (1-30 minutes)",
//                         style: "practical|corporate|academic|general"
//                     },
//                     resources: "[optionnel] array of {name, type, size}"
//                 }
//             });
//         }

//         const { topic, capsuleType, settings, resources = [] } = req.body;

//         // ‚úÖ Calcul de la r√©partition temporelle pour capsules vid√©o
//         const timeDistribution = calculateTimeDistribution(settings.duration);

//         // V√©rifier cache avec nouvelle cl√© pour format plan vid√©o
//         const cacheKey = `video-plan-${topic}-${capsuleType}-${settings.level}-${settings.duration}min-${settings.style}`;
//         if (planCache.has(cacheKey)) {
//             console.log(`üí® Plan vid√©o r√©cup√©r√© du cache: ${topic.substring(0, 50)}... (${settings.duration}min)`);
//             const cached = planCache.get(cacheKey);
//             cached.cached = true;
//             cached.generation_time_ms = 0;
//             cached.timestamp = new Date().toISOString();
//             return res.json(cached);
//         }

//         console.log(`üé¨ G√©n√©ration plan capsule vid√©o: ${topic.substring(0, 50)}... (${capsuleType}, ${settings.level}, ${settings.duration}min, ${settings.style})`);
//         console.log(`‚è±Ô∏è R√©partition vid√©o: Intro ${timeDistribution.introduction.duration_seconds}s + Dev ${timeDistribution.development_sections.map(d => d.duration_seconds).join('+')}s + Conclusion ${timeDistribution.conclusion.duration_seconds}s = ${timeDistribution.total_seconds}s`);

//         const planId = uuidv4();
//         const prompt = createStyledPrompt({ topic, capsuleType, settings, resources });

//         // G√©n√©ration avec Groq via LLMFactory
//         const generation = await llmFactory.generateText(prompt, {
//             temperature: 0.6,
//             max_tokens: 2000
//         });

//         // Parse JSON avec gestion d'erreurs robuste
//         let planData;
//         try {
//             const jsonMatch = generation.text.match(/\{[\s\S]*\}/);
//             planData = jsonMatch ? JSON.parse(jsonMatch[0]) : null;
//         } catch (e) {
//             console.warn('Erreur parsing JSON, g√©n√©ration fallback');
//             planData = null;
//         }

//         // ‚úÖ Fallback modifi√© pour plan vid√©o simplifi√©
//         if (!planData || !planData.plan_sections) {
//             planData = createFallbackVideoPlan({ topic, capsuleType, settings, timeDistribution });
//         }

//         // ‚úÖ V√©rification et correction de la dur√©e totale pour plan
//         const actualTotalSeconds = planData.plan_sections.reduce((sum, section) => sum + (section.duration_seconds || 0), 0);
//         const expectedTotalSeconds = timeDistribution.total_seconds;

//         if (Math.abs(actualTotalSeconds - expectedTotalSeconds) > 5) {
//             console.warn(`‚ö†Ô∏è Correction dur√©e plan: ${actualTotalSeconds}s -> ${expectedTotalSeconds}s`);
//             planData = adjustPlanTimings(planData, expectedTotalSeconds);
//         }

//         const totalTime = Date.now() - startTime;

//         // ‚úÖ Format de r√©ponse modifi√© pour PLAN UNIQUEMENT
//         const result = {
//             plan_id: planId,
//             topic,
//             capsule_type: capsuleType,
//             video_format: true, // Indique que c'est pour une vid√©o
//             plan_only: true, // ‚úÖ NOUVEAU: Indique que c'est juste le plan
//             settings: {
//                 level: settings.level,
//                 duration: settings.duration,
//                 style: settings.style
//             },
//             resources_count: resources.length,

//             // ‚úÖ PLAN SECTIONS simplifi√© pour vid√©o
//             plan_sections: planData.plan_sections || [],
//             video_goal: planData.video_goal || `Comprendre et appliquer ${topic}`,

//             // M√©triques temporelles
//             estimated_total_seconds: expectedTotalSeconds,
//             actual_total_seconds: planData.plan_sections.reduce((sum, s) => sum + s.duration_seconds, 0),
//             sections_count: planData.plan_sections?.length || 0,
//             time_distribution: timeDistribution,
//             generation_time_ms: totalTime,
//             llm_generation_time_ms: generation.duration_ms,
//             provider: generation.provider,
//             cached: false,
//             generated_at: new Date().toISOString(),
//             status: 'completed'
//         };

//         // Cache pendant 1 heure
//         planCache.set(cacheKey, { ...result });
//         setTimeout(() => planCache.delete(cacheKey), 3600000);

//         console.log(`‚úÖ Plan vid√©o g√©n√©r√©: ${planData.plan_sections?.length || 0} sections, ${result.actual_total_seconds}s en ${totalTime}ms`);
//         res.json(result);

//     } catch (error) {
//         const totalTime = Date.now() - startTime;
//         console.error(`‚ùå Erreur g√©n√©ration plan vid√©o apr√®s ${totalTime}ms:`, error);
//         res.status(500).json({
//             error: 'Erreur lors de la g√©n√©ration du plan vid√©o',
//             generation_time_ms: totalTime,
//             details: error.message
//         });
//     }
// });

// // ‚úÖ Fonction fallback SIMPLIFI√âE pour capsule vid√©o
// function createFallbackVideoPlan({ topic, capsuleType, settings, timeDistribution }) {
//     const { level, duration, style } = settings;

//     const planSections = [
//         {
//             section_number: 1,
//             title: "Introduction",
//             type: "introduction",
//             duration_seconds: timeDistribution.introduction.duration_seconds,
//             what_to_cover: [
//                 `Saluer et pr√©senter le sujet: ${topic}`,
//                 "Expliquer pourquoi c'est utile",
//                 "Annoncer ce qu'on va voir"
//             ],
//             content_summary: `Accroche simple sur ${topic} et annonce du contenu`
//         }
//     ];

//     // Ajouter les sections de d√©veloppement
//     timeDistribution.development_sections.forEach((dev, index) => {
//         planSections.push({
//             section_number: dev.section_number,
//             title: timeDistribution.development_sections.length > 1
//                 ? `D√©veloppement - Partie ${index + 1}`
//                 : "D√©veloppement",
//             type: "development",
//             duration_seconds: dev.duration_seconds,
//             what_to_cover: [
//                 "Point principal √† expliquer",
//                 "Exemple concret √† montrer",
//                 "Astuce ou conseil pratique"
//             ],
//             content_summary: `Explication claire et simple de ${topic}`
//         });
//     });

//     // Ajouter la conclusion
//     planSections.push({
//         section_number: timeDistribution.conclusion.section_number,
//         title: "Conclusion",
//         type: "conclusion",
//         duration_seconds: timeDistribution.conclusion.duration_seconds,
//         what_to_cover: [
//             `R√©cap rapide de ${topic}`,
//             "Encourager √† mettre en pratique",
//             "Remercier et dire au revoir"
//         ],
//         content_summary: "R√©sum√© rapide et motivation"
//     });

//     return {
//         topic,
//         capsule_type: capsuleType,
//         level,
//         duration_minutes: duration,
//         style,
//         estimated_total_seconds: timeDistribution.total_seconds,
//         plan_sections: planSections,
//         video_goal: `Savoir appliquer ${topic} dans son quotidien`
//     };
// }

// // ‚úÖ Fonction pour ajuster les timings du plan si n√©cessaire
// function adjustPlanTimings(planData, expectedTotalSeconds) {
//     const sections = planData.plan_sections;
//     const actualTotal = sections.reduce((sum, s) => sum + s.duration_seconds, 0);
//     const ratio = expectedTotalSeconds / actualTotal;

//     // Ajuster proportionnellement toutes les sections
//     sections.forEach(section => {
//         section.duration_seconds = Math.round(section.duration_seconds * ratio);
//     });

//     // Corriger les arrondis pour que le total soit exact
//     const newTotal = sections.reduce((sum, s) => sum + s.duration_seconds, 0);
//     const difference = expectedTotalSeconds - newTotal;

//     if (difference !== 0) {
//         // Ajouter/retirer la diff√©rence sur la section de d√©veloppement la plus longue
//         const longestDevSection = sections
//             .filter(s => s.type === 'development')
//             .sort((a, b) => b.duration_seconds - a.duration_seconds)[0];

//         if (longestDevSection) {
//             longestDevSection.duration_seconds += difference;
//         }
//     }

//     return planData;
// }

// // API GET pour tester les diff√©rents styles
// router.get('/groq-plan/styles', (req, res) => {
//     res.json({
//         available_styles: {
//             practical: {
//                 name: "Pratique",
//                 description: "Focus sur l'application concr√®te et imm√©diate",
//                 best_for: ["Formations techniques", "Proc√©dures", "Outils"]
//             },
//             corporate: {
//                 name: "Corporate",
//                 description: "Ton professionnel ax√© productivit√©",
//                 best_for: ["Formation entreprise", "Management", "Processus"]
//             },
//             academic: {
//                 name: "Acad√©mique",
//                 description: "Approche th√©orique et structur√©e",
//                 best_for: ["Concepts complexes", "Fondamentaux", "Recherche"]
//             },
//             general: {
//                 name: "G√©n√©ral",
//                 description: "Accessible au grand public",
//                 best_for: ["Vulgarisation", "Sensibilisation", "Culture g√©n√©rale"]
//             }
//         },
//         levels: ["beginner", "intermediate", "advanced"],
//         durations: "Flexible: 1-30 minutes",
//         capsule_types: ["conceptual", "demonstrative"],
//         structure: "Fixe pour vid√©o: Introduction -> D√©veloppement -> Conclusion",
//         output: "PLAN UNIQUEMENT (pas de script d√©taill√©)",
//         next_step: "Utiliser une autre API pour g√©n√©rer le script de narration"
//     });
// });

// module.exports = router;















// code qui marche bien avec script de narration par slide sans ressource externe

// const express = require('express');
// const axios = require('axios');
// const { v4: uuidv4 } = require('uuid');
// const LLMFactory = require('../utils/llm-factory');

// const router = express.Router();
// const llmFactory = new LLMFactory();

// // Cache sp√©cialis√© pour les plans
// const planCache = new Map();

// // Validation des champs obligatoires
// function validatePayload(payload) {
//     const errors = [];

//     // Validation topic
//     if (!payload.topic || typeof payload.topic !== 'string') {
//         errors.push('Le champ "topic" est obligatoire et doit √™tre une cha√Æne de caract√®res');
//     } else if (payload.topic.length < 10 || payload.topic.length > 500) {
//         errors.push('Le champ "topic" doit contenir entre 10 et 500 caract√®res');
//     }

//     // Validation capsuleType
//     if (!payload.capsuleType || !['conceptual', 'demonstrative'].includes(payload.capsuleType)) {
//         errors.push('Le champ "capsuleType" est obligatoire et doit √™tre "conceptual" ou "demonstrative"');
//     }

//     // Validation settings
//     if (!payload.settings || typeof payload.settings !== 'object') {
//         errors.push('Le champ "settings" est obligatoire et doit √™tre un objet');
//     } else {
//         const { level, duration, style } = payload.settings;

//         if (!level || !['beginner', 'intermediate', 'advanced'].includes(level)) {
//             errors.push('Le champ "settings.level" est obligatoire et doit √™tre "beginner", "intermediate" ou "advanced"');
//         }

//         // ‚úÖ EXACTEMENT comme sp√©cifi√© : seulement 3 ou 5
//         if (!duration || ![3, 5].includes(duration)) {
//             errors.push('Le champ "settings.duration" est obligatoire et doit √™tre 3 ou 5');
//         }

//         if (!style || !['practical', 'corporate', 'academic', 'general'].includes(style)) {
//             errors.push('Le champ "settings.style" est obligatoire et doit √™tre "practical", "corporate", "academic" ou "general"');
//         }
//     }

//     // Validation resources (optionnel)
//     if (payload.resources && !Array.isArray(payload.resources)) {
//         errors.push('Le champ "resources" doit √™tre un tableau');
//     }

//     return errors;
// }

// // Calcul de la r√©partition temporelle pour capsules vid√©o
// function calculateTimeDistribution(totalMinutes) {
//     const totalSeconds = totalMinutes * 60;

//     // Structure fixe : Introduction -> D√©veloppement -> Conclusion
//     let introSeconds, developmentSeconds, conclusionSeconds;

//     if (totalMinutes === 3) {
//         // Capsule 3 minutes
//         introSeconds = 15;
//         conclusionSeconds = 15;
//         developmentSeconds = totalSeconds - 30; // 150 secondes
//     } else if (totalMinutes === 5) {
//         // Capsule 5 minutes
//         introSeconds = 20;
//         conclusionSeconds = 20;
//         developmentSeconds = totalSeconds - 40; // 260 secondes
//     }

//     // Division du d√©veloppement si n√©cessaire
//     const developmentSections = [];
//     if (developmentSeconds > 180) { // Plus de 3 minutes
//         const numSegments = Math.ceil(developmentSeconds / 120); // Max 2 min par segment
//         const timePerSegment = Math.floor(developmentSeconds / numSegments);
//         const remainder = developmentSeconds % numSegments;

//         for (let i = 0; i < numSegments; i++) {
//             const segmentTime = timePerSegment + (i < remainder ? 1 : 0);
//             developmentSections.push({
//                 section_number: i + 2,
//                 duration_seconds: segmentTime,
//                 is_main_content: true,
//                 segment_index: i
//             });
//         }
//     } else {
//         developmentSections.push({
//             section_number: 2,
//             duration_seconds: developmentSeconds,
//             is_main_content: true,
//             segment_index: 0
//         });
//     }

//     return {
//         total_seconds: totalSeconds,
//         introduction: { section_number: 1, duration_seconds: introSeconds },
//         development_sections: developmentSections,
//         conclusion: {
//             section_number: 1 + developmentSections.length + 1,
//             duration_seconds: conclusionSeconds
//         },
//         total_sections: 2 + developmentSections.length
//     };
// }

// // Fonction pour cr√©er le prompt de g√©n√©ration du plan
// function createStyledPrompt({ topic, capsuleType, settings, resources }) {
//     const { level, duration, style } = settings;
//     const timeDistribution = calculateTimeDistribution(duration);

//     // Adaptation du style p√©dagogique
//     const stylePrompts = {
//         practical: "Focus sur l'application concr√®te et imm√©diate. Privil√©gier les exemples pratiques et les cas d'usage r√©els.",
//         corporate: "Adopter un ton professionnel et formel. Mettre l'accent sur la productivit√© et l'efficacit√© en entreprise.",
//         academic: "Approche th√©orique et structur√©e. Inclure les concepts fondamentaux et les r√©f√©rences.",
//         general: "Ton accessible et p√©dagogique pour le grand public. Vulgariser les concepts complexes."
//     };

//     const levelDescriptions = {
//         beginner: "d√©butant (aucune exp√©rience pr√©alable)",
//         intermediate: "interm√©diaire (quelques connaissances de base)",
//         advanced: "avanc√© (exp√©rience confirm√©e)"
//     };

//     const typeDescriptions = {
//         conceptual: "Capsule vid√©o explicative sur des concepts, th√©ories ou soft-skills",
//         demonstrative: "Capsule vid√©o tutoriel montrant des √©tapes pratiques et des manipulations"
//     };

//     const resourcesContext = resources && resources.length > 0
//         ? `Ressources disponibles: ${resources.map(r => `${r.name} (${r.type})`).join(', ')}`
//         : 'Aucune ressource fournie - g√©n√©ration bas√©e sur le sujet uniquement';

//     return `Tu es un expert en cr√©ation de contenu vid√©o √©ducatif. Tu dois cr√©er UNIQUEMENT le PLAN STRUCTUR√â d'une capsule vid√©o (pas le script d√©taill√©).

// CONTEXTE DE LA CAPSULE VID√âO:
// - Sujet: ${topic}
// - Type: ${typeDescriptions[capsuleType]}
// - Niveau: ${levelDescriptions[level]}
// - Dur√©e EXACTE: ${duration} minutes (${timeDistribution.total_seconds} secondes)
// - Style: ${style} - ${stylePrompts[style]}
// - ${resourcesContext}

// üé¨ STRUCTURE VID√âO OBLIGATOIRE - ${timeDistribution.total_sections} PARTIES:
// 1. INTRODUCTION (${timeDistribution.introduction.duration_seconds}s) - Accroche et pr√©sentation
// ${timeDistribution.development_sections.map((dev, index) =>
//         `${index + 2}. D√âVELOPPEMENT ${timeDistribution.development_sections.length > 1 ? `PARTIE ${index + 1}` : ''} (${dev.duration_seconds}s) - Contenu principal`
//     ).join('\n')}
// ${timeDistribution.total_sections}. CONCLUSION (${timeDistribution.conclusion.duration_seconds}s) - R√©cap et action

// ‚è±Ô∏è CONTRAINTES TEMPORELLES STRICTES:
// - Dur√©e totale EXACTE: ${duration} minutes = ${timeDistribution.total_seconds} secondes
// - La somme des dur√©es DOIT √©galer ${timeDistribution.total_seconds}s exactement
// - Structure fixe: Introduction ‚Üí D√©veloppement ‚Üí Conclusion

// OBJECTIF DU PLAN:
// D√©finir clairement ce qui sera abord√© dans chaque partie de la capsule vid√©o, les points cl√©s √† traiter.
// IMPORTANT: Ne pas g√©n√©rer de script d√©taill√©, juste la structure et les points √† aborder.

// FORMAT JSON STRICT - PLAN VID√âO SIMPLIFI√â:
// {
//   "topic": "${topic}",
//   "capsule_type": "${capsuleType}",
//   "level": "${level}",
//   "duration_minutes": ${duration},
//   "style": "${style}",
//   "estimated_total_seconds": ${timeDistribution.total_seconds},
//   "plan_sections": [
//     {
//       "section_number": 1,
//       "title": "Introduction",
//       "type": "introduction",
//       "duration_seconds": ${timeDistribution.introduction.duration_seconds},
//       "what_to_cover": [
//         "Ce qu'il faut dire dans l'intro",
//         "Points √† aborder pour accrocher"
//       ],
//       "content_summary": "R√©sum√© de ce qui sera dit dans cette introduction"
//     },
//     ${timeDistribution.development_sections.map((dev, index) => `{
//       "section_number": ${dev.section_number},
//       "title": "D√©veloppement${timeDistribution.development_sections.length > 1 ? ` - Partie ${index + 1}` : ''}",
//       "type": "development",
//       "duration_seconds": ${dev.duration_seconds},
//       "what_to_cover": [
//         "Point principal 1 √† expliquer",
//         "Point principal 2 √† expliquer",
//         "Exemple concret √† donner"
//       ],
//       "content_summary": "R√©sum√© du contenu principal de cette partie"
//     }`).join(',\n    ')},
//     {
//       "section_number": ${timeDistribution.conclusion.section_number},
//       "title": "Conclusion",
//       "type": "conclusion",
//       "duration_seconds": ${timeDistribution.conclusion.duration_seconds},
//       "what_to_cover": [
//         "R√©cap rapide des points essentiels",
//         "Action √† faire maintenant"
//       ],
//       "content_summary": "Ce qui sera dit en conclusion"
//     }
//   ],
//   "video_goal": "Ce que la personne saura/pourra faire apr√®s avoir vu la vid√©o"
// }

// ADAPTATION NIVEAU ${level.toUpperCase()}:
// ${level === 'beginner'
//             ? '- Partir des bases absolues\n- D√©finir tous les termes techniques\n- Multiplier les exemples simples'
//             : level === 'intermediate'
//                 ? '- Supposer des connaissances de base\n- Introduire des concepts plus avanc√©s\n- Faire des liens avec l\'exp√©rience existante'
//                 : '- Approche experte et concise\n- Concepts avanc√©s et nuances\n- Focus sur l\'optimisation et les bonnes pratiques'
//         }

// STYLE ${style.toUpperCase()} SP√âCIFIQUE:
// ${style === 'practical'
//             ? 'Plan orient√© action. Points concrets et applicables imm√©diatement.'
//             : style === 'corporate'
//                 ? 'Plan professionnel. Focus sur ROI et efficacit√© business.'
//                 : style === 'academic'
//                     ? 'Plan structur√© avec progression logique et m√©thodique.'
//                     : 'Plan accessible avec vulgarisation et exemples parlants.'
//         }

// V√âRIFICATION OBLIGATOIRE:
// - La somme des duration_seconds DOIT √™tre exactement ${timeDistribution.total_seconds}
// - ${timeDistribution.total_sections} sections exactement
// - Chaque section doit avoir des points clairs √† couvrir
// - Focus sur CE QUI SERA DIT, pas sur la th√©orie p√©dagogique

// G√©n√®re le plan JSON simplifi√© pour cette capsule vid√©o:`;
// }

// // API POST /ai/groq-plan - G√©n√©ration de plan de capsule vid√©o
// router.post('/groq-plan', async (req, res) => {
//     const startTime = Date.now();

//     try {
//         // Validation du payload
//         const validationErrors = validatePayload(req.body);
//         if (validationErrors.length > 0) {
//             return res.status(400).json({
//                 error: 'Erreurs de validation',
//                 details: validationErrors,
//                 expected_format: {
//                     topic: "string (10-500 caract√®res)",
//                     capsuleType: "conceptual|demonstrative",
//                     settings: {
//                         level: "beginner|intermediate|advanced",
//                         duration: "3|5",
//                         style: "practical|corporate|academic|general"
//                     },
//                     resources: "[optionnel] array of {name, type, size}"
//                 }
//             });
//         }

//         const { topic, capsuleType, settings, resources = [] } = req.body;

//         // Calcul de la r√©partition temporelle
//         const timeDistribution = calculateTimeDistribution(settings.duration);

//         // V√©rifier cache
//         const cacheKey = `groq-v2-${topic}-${capsuleType}-${settings.level}-${settings.duration}-${settings.style}`;
//         if (planCache.has(cacheKey)) {
//             console.log(`üí® Plan r√©cup√©r√© du cache: ${topic.substring(0, 50)}...`);
//             const cached = planCache.get(cacheKey);
//             cached.cached = true;
//             cached.generation_time_ms = 0;
//             cached.timestamp = new Date().toISOString();
//             return res.json(cached);
//         }

//         console.log(`‚ö° G√©n√©ration Groq v2: ${topic.substring(0, 50)}... (${capsuleType}, ${settings.level}, ${settings.style})`);

//         const planId = uuidv4();
//         const prompt = createStyledPrompt({ topic, capsuleType, settings, resources });

//         // G√©n√©ration avec Groq
//         const generation = await llmFactory.generateText(prompt, {
//             temperature: 0.6,
//             max_tokens: 2000
//         });

//         // Parse JSON avec gestion d'erreurs robuste
//         let planData;
//         try {
//             const jsonMatch = generation.text.match(/\{[\s\S]*\}/);
//             planData = jsonMatch ? JSON.parse(jsonMatch[0]) : null;
//         } catch (e) {
//             console.warn('Erreur parsing JSON, g√©n√©ration fallback');
//             planData = null;
//         }

//         // Fallback si parsing √©choue
//         if (!planData || !planData.plan_sections) {
//             planData = createFallbackPlan({ topic, capsuleType, settings, timeDistribution });
//         }

//         // V√©rification dur√©e totale
//         const actualTotal = planData.plan_sections.reduce((sum, s) => sum + s.duration_seconds, 0);
//         const expectedTotal = timeDistribution.total_seconds;

//         if (Math.abs(actualTotal - expectedTotal) > 5) {
//             console.warn(`‚ö†Ô∏è Correction dur√©e: ${actualTotal}s -> ${expectedTotal}s`);
//             planData = adjustPlanTimings(planData, expectedTotal);
//         }

//         const totalTime = Date.now() - startTime;

//         const result = {
//             plan_id: planId,
//             topic,
//             capsule_type: capsuleType,
//             settings: {
//                 level: settings.level,
//                 duration: settings.duration,
//                 style: settings.style
//             },
//             resources_count: resources.length,
//             plan_sections: planData.plan_sections,
//             video_goal: planData.video_goal || `Comprendre et appliquer ${topic}`,
//             estimated_total_seconds: expectedTotal,
//             actual_total_seconds: planData.plan_sections.reduce((sum, s) => sum + s.duration_seconds, 0),
//             sections_count: planData.plan_sections.length,
//             time_distribution: timeDistribution,
//             generation_time_ms: totalTime,
//             llm_generation_time_ms: generation.duration_ms,
//             provider: generation.provider,
//             cached: false,
//             generated_at: new Date().toISOString(),
//             status: 'completed'
//         };

//         // Cache pendant 1 heure
//         planCache.set(cacheKey, { ...result });
//         setTimeout(() => planCache.delete(cacheKey), 3600000);

//         console.log(`‚úÖ Plan Groq v2 g√©n√©r√©: ${planData.plan_sections?.length || 0} sections en ${totalTime}ms`);
//         res.json(result);

//     } catch (error) {
//         const totalTime = Date.now() - startTime;
//         console.error(`‚ùå Erreur g√©n√©ration Groq v2 apr√®s ${totalTime}ms:`, error);
//         res.status(500).json({
//             error: 'Erreur lors de la g√©n√©ration du plan',
//             generation_time_ms: totalTime,
//             details: error.message
//         });
//     }
// });

// // Fallback plan si parsing JSON √©choue
// function createFallbackPlan({ topic, capsuleType, settings, timeDistribution }) {
//     const { level, duration, style } = settings;

//     const planSections = [
//         {
//             section_number: 1,
//             title: "Introduction",
//             type: "introduction",
//             duration_seconds: timeDistribution.introduction.duration_seconds,
//             what_to_cover: [
//                 `Saluer et pr√©senter le sujet: ${topic}`,
//                 "Expliquer pourquoi c'est utile",
//                 "Annoncer ce qu'on va voir"
//             ],
//             content_summary: `Accroche simple sur ${topic} et annonce du contenu`
//         }
//     ];

//     // Ajouter les sections de d√©veloppement
//     timeDistribution.development_sections.forEach((dev, index) => {
//         planSections.push({
//             section_number: dev.section_number,
//             title: timeDistribution.development_sections.length > 1
//                 ? `D√©veloppement - Partie ${index + 1}`
//                 : "D√©veloppement",
//             type: "development",
//             duration_seconds: dev.duration_seconds,
//             what_to_cover: [
//                 "Point principal √† expliquer",
//                 "Exemple concret √† montrer",
//                 "Astuce ou conseil pratique"
//             ],
//             content_summary: `Explication claire et simple de ${topic}`
//         });
//     });

//     // Ajouter la conclusion
//     planSections.push({
//         section_number: timeDistribution.conclusion.section_number,
//         title: "Conclusion",
//         type: "conclusion",
//         duration_seconds: timeDistribution.conclusion.duration_seconds,
//         what_to_cover: [
//             `R√©cap rapide de ${topic}`,
//             "Encourager √† mettre en pratique",
//             "Remercier et dire au revoir"
//         ],
//         content_summary: "R√©sum√© rapide et motivation"
//     });

//     return {
//         topic,
//         capsule_type: capsuleType,
//         level,
//         duration_minutes: duration,
//         style,
//         estimated_total_seconds: timeDistribution.total_seconds,
//         plan_sections: planSections,
//         video_goal: `Savoir appliquer ${topic} dans son quotidien`
//     };
// }

// // Fonction pour ajuster les timings si n√©cessaire
// function adjustPlanTimings(planData, expectedTotalSeconds) {
//     const sections = planData.plan_sections;
//     const actualTotal = sections.reduce((sum, s) => sum + s.duration_seconds, 0);
//     const ratio = expectedTotalSeconds / actualTotal;

//     // Ajuster proportionnellement
//     sections.forEach(section => {
//         section.duration_seconds = Math.round(section.duration_seconds * ratio);
//     });

//     // Corriger les arrondis pour que le total soit exact
//     const newTotal = sections.reduce((sum, s) => sum + s.duration_seconds, 0);
//     const difference = expectedTotalSeconds - newTotal;

//     if (difference !== 0) {
//         // Ajouter/retirer la diff√©rence sur la section de d√©veloppement la plus longue
//         const longestDevSection = sections
//             .filter(s => s.type === 'development')
//             .sort((a, b) => b.duration_seconds - a.duration_seconds)[0];

//         if (longestDevSection) {
//             longestDevSection.duration_seconds += difference;
//         }
//     }

//     return planData;
// }

// // API GET pour tester les diff√©rents styles
// router.get('/groq-plan/styles', (req, res) => {
//     res.json({
//         available_styles: {
//             practical: {
//                 name: "Pratique",
//                 description: "Focus sur l'application concr√®te et imm√©diate",
//                 best_for: ["Formations techniques", "Proc√©dures", "Outils"]
//             },
//             corporate: {
//                 name: "Corporate",
//                 description: "Ton professionnel ax√© productivit√©",
//                 best_for: ["Formation entreprise", "Management", "Processus"]
//             },
//             academic: {
//                 name: "Acad√©mique",
//                 description: "Approche th√©orique et structur√©e",
//                 best_for: ["Concepts complexes", "Fondamentaux", "Recherche"]
//             },
//             general: {
//                 name: "G√©n√©ral",
//                 description: "Accessible au grand public",
//                 best_for: ["Vulgarisation", "Sensibilisation", "Culture g√©n√©rale"]
//             }
//         },
//         levels: ["beginner", "intermediate", "advanced"],
//         durations: [3, 5], // ‚úÖ EXACTEMENT comme sp√©cifi√©
//         capsule_types: ["conceptual", "demonstrative"],
//         structure: "Fixe: Introduction -> D√©veloppement -> Conclusion",
//         output: "PLAN UNIQUEMENT (pas de script d√©taill√©)"
//     });
// });

// module.exports = router;











// Un peu de soucis pour la gestion des documents 
// meme code mais avec script de narration par slide et ressource externe
// groq-fast-plan.js - Version Enhanced avec Ressources Documentaires

// groq-fast-plan.js - UN SEUL ENDPOINT POUR TOUT (JSON + Upload)

// const express = require('express');
// const axios = require('axios');
// const { v4: uuidv4 } = require('uuid');
// const multer = require('multer');
// const fs = require('fs');
// const path = require('path');
// const crypto = require('crypto');

// const router = express.Router();

// // Configuration du cache
// const planCache = new Map();
// const CACHE_DURATION = 1000 * 60 * 15; // 15 minutes

// // Configuration multer pour upload de fichiers
// const upload = multer({
//     dest: 'temp-uploads/',
//     fileFilter: (req, file, cb) => {
//         const allowedTypes = ['.pdf', '.txt', '.docx', '.md', '.csv'];
//         const ext = path.extname(file.originalname).toLowerCase();
//         cb(null, allowedTypes.includes(ext));
//     },
//     limits: {
//         fileSize: 10 * 1024 * 1024, // 10MB max
//         files: 5 // Maximum 5 fichiers
//     }
// });

// // Cr√©er le dossier temp-uploads s'il n'existe pas
// const tempDir = path.join(__dirname, '..', '..', 'temp-uploads');
// if (!fs.existsSync(tempDir)) {
//     fs.mkdirSync(tempDir, { recursive: true });
//     console.log('üìÅ Dossier temp-uploads cr√©√©');
// }

// // üéØ UN SEUL ENDPOINT POUR TOUT (JSON + Upload)
// router.post('/groq-plan', upload.array('files', 5), async (req, res) => {
//     const startTime = Date.now();

//     try {
//         // üîç D√âTECTION AUTOMATIQUE DU FORMAT
//         const isFormData = req.is('multipart/form-data');
//         const isJSON = req.is('application/json');

//         console.log(`üéØ Endpoint unique - Format d√©tect√©: ${isFormData ? 'Form-Data (avec fichiers)' : 'JSON'}`);

//         let topic, capsuleType, settings, resources, reference_materials, company_context, specific_requirements;

//         if (isFormData) {
//             // üìÅ FORMAT FORM-DATA (avec fichiers)
//             topic = req.body.topic;
//             capsuleType = req.body.capsuleType || 'demonstrative';

//             // Parse settings JSON si fourni
//             try {
//                 settings = req.body.settings ? JSON.parse(req.body.settings) : {};
//             } catch (e) {
//                 settings = {};
//                 console.warn('‚ö†Ô∏è Settings JSON invalides, utilisation par d√©faut');
//             }

//             // Parse resources JSON si fourni
//             try {
//                 resources = req.body.resources ? JSON.parse(req.body.resources) : {};
//             } catch (e) {
//                 resources = {};
//                 console.warn('‚ö†Ô∏è Ressources JSON invalides, ignor√©es');
//             }

//             // Parse reference_materials JSON si fourni
//             try {
//                 reference_materials = req.body.reference_materials ? JSON.parse(req.body.reference_materials) : [];
//             } catch (e) {
//                 reference_materials = [];
//             }

//             company_context = req.body.company_context || null;
//             specific_requirements = req.body.specific_requirements || null;

//         } else {
//             // üìù FORMAT JSON (sans fichiers)
//             topic = req.body.topic;
//             capsuleType = req.body.capsuleType || 'demonstrative';
//             settings = req.body.settings || {};
//             resources = req.body.resources || {};
//             reference_materials = req.body.reference_materials || [];
//             company_context = req.body.company_context || null;
//             specific_requirements = req.body.specific_requirements || null;
//         }

//         // Validation de base
//         if (!topic || topic.length < 5) {
//             // Nettoyer les fichiers upload√©s si pr√©sents
//             cleanupUploadedFiles(req.files);
//             return res.status(400).json({
//                 error: 'Topic requis (minimum 5 caract√®res)',
//                 format_detected: isFormData ? 'form-data' : 'json',
//                 files_uploaded: req.files?.length || 0,
//                 example: 'Les 3 erreurs Excel √† √©viter'
//             });
//         }

//         // Settings par d√©faut
//         const finalSettings = {
//             level: 'beginner',
//             duration: 5,
//             style: 'practical',
//             ...settings
//         };

//         console.log(`‚ö° G√©n√©ration Groq v3 UNIFIED: "${topic.substring(0, 50)}..." (${capsuleType}, ${finalSettings.level}, ${isFormData ? 'avec fichiers' : 'JSON'})`);

//         // üìÑ TRAITEMENT DES FICHIERS SI PR√âSENTS
//         let filesContent = '';
//         const processedFiles = [];

//         if (req.files && req.files.length > 0) {
//             console.log(`üìÅ Traitement de ${req.files.length} fichiers upload√©s...`);

//             for (const file of req.files) {
//                 try {
//                     const content = await parseUploadedFile(file);
//                     filesContent += `\n\n=== CONTENU DE ${file.originalname} ===\n${content}\n`;
//                     processedFiles.push({
//                         name: file.originalname,
//                         size: file.size,
//                         type: path.extname(file.originalname),
//                         content_length: content.length,
//                         status: 'parsed'
//                     });
//                 } catch (error) {
//                     console.error(`‚ùå Erreur parsing ${file.originalname}:`, error.message);
//                     processedFiles.push({
//                         name: file.originalname,
//                         status: 'error',
//                         error: error.message
//                     });
//                 }
//             }
//         }

//         // üîó COMBINAISON DE TOUTES LES RESSOURCES
//         const combinedResources = {
//             ...resources,
//             files_content: filesContent // Ajout du contenu des fichiers
//         };

//         // üîç ANALYSE DES RESSOURCES COMPL√àTES
//         let resourcesContext = '';
//         let hasResources = false;

//         if (combinedResources && Object.keys(combinedResources).length > 0) {
//             hasResources = true;
//             resourcesContext = await processResourcesContext(combinedResources);
//             console.log(`üìö Contexte total: ${resourcesContext.length} caract√®res (fichiers: ${filesContent.length})`);
//         }

//         if (reference_materials && reference_materials.length > 0) {
//             hasResources = true;
//             const materialsContext = processMaterialsContext(reference_materials);
//             resourcesContext += '\n\n' + materialsContext;
//             console.log(`üìñ Mat√©riaux de r√©f√©rence: ${reference_materials.length} √©l√©ments`);
//         }

//         // Cache key avec contexte complet
//         const cacheKey = generateCacheKey(topic, capsuleType, finalSettings, resourcesContext);

//         // V√©rification cache
//         if (planCache.has(cacheKey)) {
//             const cached = planCache.get(cacheKey);
//             if (Date.now() - cached.timestamp < CACHE_DURATION) {
//                 // Nettoyer les fichiers m√™me pour le cache
//                 cleanupUploadedFiles(req.files);

//                 console.log('üíæ Plan r√©cup√©r√© du cache');
//                 return res.json({
//                     ...cached.data,
//                     generated_at: cached.timestamp,
//                     from_cache: true,
//                     format_used: isFormData ? 'form-data' : 'json',
//                     files_processed: processedFiles.length,
//                     cache_hit: true
//                 });
//             } else {
//                 planCache.delete(cacheKey);
//             }
//         }

//         // üéØ CR√âATION DU PROMPT ENRICHI
//         const enhancedPrompt = createEnhancedPrompt(
//             topic,
//             capsuleType,
//             finalSettings,
//             resourcesContext,
//             company_context,
//             specific_requirements
//         );

//         // G√©n√©ration avec Groq
//         const groqResponse = await callGroqAPI(enhancedPrompt);

//         // Parsing et validation
//         let planData;
//         try {
//             const cleanedResponse = cleanGroqResponse(groqResponse);
//             planData = JSON.parse(cleanedResponse);
//         } catch (parseError) {
//             console.error('‚ùå Erreur parsing JSON Groq:', parseError.message);
//             planData = createFallbackPlan(topic, finalSettings);
//         }

//         // Enrichissement du plan
//         const enrichedPlan = enrichPlanWithResources(planData, combinedResources, reference_materials, hasResources);

//         // Nettoyage des fichiers temporaires
//         cleanupUploadedFiles(req.files);

//         // Finalisation
//         const planId = uuidv4();
//         const totalTime = Date.now() - startTime;

//         const result = {
//             plan_id: planId,
//             topic: topic,
//             capsule_type: capsuleType,
//             settings: finalSettings,

//             // üéØ M√âTADONN√âES UNIFIED
//             input_format: {
//                 detected: isFormData ? 'multipart/form-data' : 'application/json',
//                 has_file_uploads: req.files?.length > 0,
//                 files_count: req.files?.length || 0
//             },

//             // üìÅ INFO FICHIERS (si pr√©sents)
//             ...(req.files?.length > 0 && {
//                 files_info: {
//                     uploaded_count: req.files.length,
//                     processed_successfully: processedFiles.filter(f => f.status === 'parsed').length,
//                     failed_count: processedFiles.filter(f => f.status === 'error').length,
//                     total_content_length: filesContent.length,
//                     processed_files: processedFiles
//                 }
//             }),

//             // üìö INFO RESSOURCES
//             resources_info: {
//                 has_resources: hasResources,
//                 has_files: filesContent.length > 0,
//                 has_text_resources: !!(combinedResources.text_content && combinedResources.text_content !== filesContent),
//                 resources_types: Object.keys(combinedResources).filter(k => k !== 'files_content'),
//                 reference_materials_count: reference_materials?.length || 0,
//                 context_length: resourcesContext.length,
//                 company_context: !!company_context,
//                 specific_requirements: !!specific_requirements
//             },

//             // Plan g√©n√©r√©
//             plan_sections: enrichedPlan.plan_sections,

//             // M√©tadonn√©es
//             generation_stats: {
//                 total_time_ms: totalTime,
//                 groq_model: process.env.GROQ_MODEL || 'llama-3.3-70b-versatile',
//                 with_resources: hasResources,
//                 with_file_uploads: req.files?.length > 0,
//                 prompt_length: enhancedPrompt.length,
//                 response_quality: 'enhanced_unified_endpoint'
//             },

//             generated_at: new Date().toISOString(),
//             status: 'completed',
//             cache_stored: true,
//             ready_for_slides: true,

//             // üéØ WORKFLOW SUGGESTIONS
//             next_steps: {
//                 primary: 'POST /ai/plan-to-markdown avec ce plan complet',
//                 alternative: 'POST /ai/generate-slides pour cr√©er directement les slides',
//                 with_audio: 'Puis POST /ai/generate-narration-bark pour l\'audio'
//             }
//         };

//         // Sauvegarde cache
//         planCache.set(cacheKey, {
//             data: result,
//             timestamp: Date.now()
//         });

//         console.log(`‚úÖ Plan UNIFIED g√©n√©r√©: ${enrichedPlan.plan_sections.length} sections, ${processedFiles.filter(f => f.status === 'parsed').length}/${req.files?.length || 0} fichiers, ${totalTime}ms`);
//         res.json(result);

//     } catch (error) {
//         // Nettoyer les fichiers en cas d'erreur
//         cleanupUploadedFiles(req.files);

//         const totalTime = Date.now() - startTime;
//         console.error('‚ùå Erreur g√©n√©ration plan UNIFIED:', error);

//         res.status(500).json({
//             error: 'Erreur g√©n√©ration plan',
//             details: error.message,
//             processing_time_ms: totalTime,
//             troubleshooting: {
//                 check_groq_api: 'V√©rifiez la cl√© API Groq',
//                 check_format: 'V√©rifiez le format JSON ou form-data',
//                 check_files: 'V√©rifiez les fichiers upload√©s si pr√©sents',
//                 retry: 'R√©essayez sans fichiers si probl√®me persiste'
//             }
//         });
//     }
// });

// // üîß FONCTION PARSING FICHIERS
// async function parseUploadedFile(file) {
//     const ext = path.extname(file.originalname).toLowerCase();

//     try {
//         switch (ext) {
//             case '.txt':
//             case '.md':
//                 return fs.readFileSync(file.path, 'utf8');

//             case '.csv':
//                 const csvContent = fs.readFileSync(file.path, 'utf8');
//                 return `Donn√©es CSV:\n${csvContent}`;

//             case '.pdf':
//                 // Pour activer PDF : npm install pdf-parse
//                 // const pdf = require('pdf-parse');
//                 // const pdfBuffer = fs.readFileSync(file.path);
//                 // const pdfData = await pdf(pdfBuffer);
//                 // return pdfData.text;
//                 throw new Error('Support PDF n√©cessite: npm install pdf-parse');

//             case '.docx':
//                 // Pour activer DOCX : npm install mammoth
//                 // const mammoth = require('mammoth');
//                 // const docxBuffer = fs.readFileSync(file.path);
//                 // const result = await mammoth.extractRawText({ buffer: docxBuffer });
//                 // return result.value;
//                 throw new Error('Support DOCX n√©cessite: npm install mammoth');

//             default:
//                 throw new Error(`Type de fichier non support√©: ${ext}`);
//         }
//     } catch (error) {
//         throw new Error(`Erreur parsing ${file.originalname}: ${error.message}`);
//     }
// }

// // üîß NETTOYAGE FICHIERS TEMPORAIRES
// function cleanupUploadedFiles(files) {
//     if (files && files.length > 0) {
//         files.forEach(file => {
//             try {
//                 if (fs.existsSync(file.path)) {
//                     fs.unlinkSync(file.path);
//                 }
//             } catch (error) {
//                 console.warn(`‚ö†Ô∏è Impossible de supprimer ${file.path}:`, error.message);
//             }
//         });
//     }
// }

// // üîß TRAITEMENT DES RESSOURCES
// async function processResourcesContext(resources) {
//     let context = '';

//     try {
//         // Contenu des fichiers upload√©s
//         if (resources.files_content && resources.files_content.trim()) {
//             context += `CONTENU DES FICHIERS FOURNIS:\n${resources.files_content}\n\n`;
//         }

//         // Texte direct
//         if (resources.text_content && resources.text_content !== resources.files_content) {
//             context += `CONTENU SP√âCIFIQUE ADDITIONNEL:\n${resources.text_content}\n\n`;
//         }

//         // URLs
//         if (resources.urls && resources.urls.length > 0) {
//             context += `RESSOURCES WEB MENTIONN√âES:\n`;
//             resources.urls.forEach(url => context += `- ${url}\n`);
//             context += '\n';
//         }

//         // Documents r√©f√©renc√©s
//         if (resources.documents && resources.documents.length > 0) {
//             context += `DOCUMENTS DE R√âF√âRENCE:\n`;
//             resources.documents.forEach(doc => context += `- ${doc}\n`);
//             context += '\n';
//         }

//         // Mots-cl√©s
//         if (resources.keywords && resources.keywords.length > 0) {
//             context += `MOTS-CL√âS IMPORTANTS: ${resources.keywords.join(', ')}\n\n`;
//         }

//         // Proc√©dures
//         if (resources.procedures) {
//             context += `PROC√âDURES SP√âCIFIQUES:\n${resources.procedures}\n\n`;
//         }

//     } catch (error) {
//         console.error('‚ùå Erreur traitement ressources:', error.message);
//         context = 'ERREUR TRAITEMENT RESSOURCES\n';
//     }

//     return context;
// }

// // üîß TRAITEMENT MAT√âRIAUX DE R√âF√âRENCE
// function processMaterialsContext(materials) {
//     let context = 'MAT√âRIAUX DE R√âF√âRENCE:\n';

//     materials.forEach((material, index) => {
//         context += `${index + 1}. `;
//         if (material.title) context += `Titre: ${material.title}\n`;
//         if (material.type) context += `   Type: ${material.type}\n`;
//         if (material.content) context += `   Contenu: ${material.content}\n`;
//         if (material.source) context += `   Source: ${material.source}\n`;
//         context += '\n';
//     });

//     return context;
// }

// // üéØ CR√âATION DU PROMPT ENRICHI
// function createEnhancedPrompt(topic, capsuleType, settings, resourcesContext, companyContext, specificRequirements) {
//     const { level, duration, style } = settings;

//     let prompt = `Tu es un expert en p√©dagogie et conception de formations. Cr√©e un plan de formation d√©taill√© et structur√©.

// INFORMATIONS DE BASE:
// - Sujet: ${topic}
// - Type: ${capsuleType}
// - Niveau: ${level}
// - Dur√©e: ${duration} minutes
// - Style: ${style}`;

//     // Ajout du contexte ressources
//     if (resourcesContext && resourcesContext.length > 0) {
//         prompt += `

// RESSOURCES ET CONTEXTE SP√âCIFIQUES √Ä UTILISER:
// ${resourcesContext}

// INSTRUCTIONS IMPORTANTES:
// - Utilise OBLIGATOIREMENT le contenu et les informations des ressources fournies
// - Adapte le vocabulaire et les exemples au contexte donn√©
// - Int√®gre les proc√©dures et m√©thodes mentionn√©es dans les ressources
// - Respecte la terminologie sp√©cifique fournie`;
//     }

//     // Contexte entreprise
//     if (companyContext) {
//         prompt += `

// CONTEXTE ENTREPRISE:
// ${companyContext}`;
//     }

//     // Exigences sp√©cifiques
//     if (specificRequirements) {
//         prompt += `

// EXIGENCES SP√âCIFIQUES:
// ${specificRequirements}`;
//     }

//     prompt += `

// G√âN√àRE un plan JSON avec cette structure EXACTE:

// {
//   "plan_sections": [
//     {
//       "section_number": 1,
//       "title": "Introduction",
//       "type": "introduction",
//       "duration_seconds": 30,
//       "what_to_cover": [
//         "Point d'accroche bas√© sur les ressources fournies",
//         "Objectifs align√©s avec le contexte sp√©cifique"
//       ],
//       "content_summary": "R√©sum√© int√©grant les √©l√©ments des ressources"
//     }
//   ]
// }

// R√àGLES STRICTES:
// - ${duration} minutes maximum (${duration * 60} secondes total)
// - Sections √©quilibr√©es en dur√©e
// - Int√©gration OBLIGATOIRE des ressources dans le contenu
// - Vocabulaire et exemples adapt√©s au contexte fourni
// - JSON valide uniquement, pas de texte avant/apr√®s`;

//     return prompt;
// }

// // üîß ENRICHISSEMENT DU PLAN
// function enrichPlanWithResources(planData, resources, materials, hasResources) {
//     if (!hasResources || !planData.plan_sections) {
//         return planData;
//     }

//     planData.plan_sections = planData.plan_sections.map(section => ({
//         ...section,
//         enhanced_with_resources: hasResources,
//         resource_integration: {
//             uses_company_content: !!(resources.text_content || resources.files_content),
//             uses_uploaded_files: !!resources.files_content,
//             references_documents: !!(resources.documents?.length),
//             includes_procedures: !!resources.procedures,
//             follows_company_style: true
//         }
//     }));

//     return planData;
// }

// // üîß APPEL API GROQ
// async function callGroqAPI(prompt) {
//     try {
//         const response = await axios.post('https://api.groq.com/openai/v1/chat/completions', {
//             model: process.env.GROQ_MODEL || 'llama-3.3-70b-versatile',
//             messages: [
//                 {
//                     role: 'system',
//                     content: 'Tu es un expert en conception p√©dagogique. Tu int√®gres parfaitement les ressources fournies dans tes plans de formation. R√©ponds UNIQUEMENT en JSON valide.'
//                 },
//                 {
//                     role: 'user',
//                     content: prompt
//                 }
//             ],
//             temperature: 0.7,
//             max_tokens: 4000
//         }, {
//             headers: {
//                 'Authorization': `Bearer ${process.env.GROQ_API_KEY}`,
//                 'Content-Type': 'application/json'
//             }
//         });

//         return response.data.choices[0].message.content;
//     } catch (error) {
//         console.error('‚ùå Erreur API Groq:', error.message);
//         throw error;
//     }
// }

// // üîß NETTOYAGE R√âPONSE GROQ
// function cleanGroqResponse(response) {
//     return response
//         .replace(/```json\n/g, '')
//         .replace(/\n```/g, '')
//         .replace(/```/g, '')
//         .replace(/^[^{]*/, '')
//         .replace(/[^}]*$/, '')
//         .trim();
// }

// // üîß PLAN FALLBACK
// function createFallbackPlan(topic, settings) {
//     const { duration } = settings;
//     const totalSeconds = duration * 60;

//     return {
//         plan_sections: [
//             {
//                 section_number: 1,
//                 title: "Introduction",
//                 type: "introduction",
//                 duration_seconds: Math.round(totalSeconds * 0.15),
//                 what_to_cover: [
//                     `Pr√©sentation du sujet: ${topic}`,
//                     "Objectifs de cette formation"
//                 ],
//                 content_summary: `Introduction √† ${topic}`
//             },
//             {
//                 section_number: 2,
//                 title: "D√©veloppement principal",
//                 type: "development",
//                 duration_seconds: Math.round(totalSeconds * 0.70),
//                 what_to_cover: [
//                     "Points cl√©s du sujet",
//                     "Exemples pratiques",
//                     "M√©thodes recommand√©es"
//                 ],
//                 content_summary: `Contenu principal sur ${topic}`
//             },
//             {
//                 section_number: 3,
//                 title: "Conclusion",
//                 type: "conclusion",
//                 duration_seconds: Math.round(totalSeconds * 0.15),
//                 what_to_cover: [
//                     "R√©capitulatif des points essentiels",
//                     "Prochaines √©tapes recommand√©es"
//                 ],
//                 content_summary: `Synth√®se et conclusion de ${topic}`
//             }
//         ]
//     };
// }

// // üîß G√âN√âRATION CL√â CACHE
// function generateCacheKey(topic, capsuleType, settings, resourcesContext) {
//     const baseKey = `${topic}_${capsuleType}_${settings.level}_${settings.duration}_${settings.style}`;
//     const resourcesHash = resourcesContext ?
//         crypto.createHash('md5').update(resourcesContext).digest('hex').substring(0, 8) :
//         'no_resources';
//     return `${baseKey}_${resourcesHash}`;
// }

// // üîß INFO ENDPOINT
// router.get('/groq-plan/info', (req, res) => {
//     res.json({
//         endpoint: 'POST /ai/groq-plan',
//         description: 'üéØ ENDPOINT UNIQUE - G√®re JSON ET upload de fichiers automatiquement',
//         version: '4.0 - Unified Endpoint',

//         auto_detection: {
//             'Content-Type: application/json': 'Format JSON classique avec ressources textuelles',
//             'Content-Type: multipart/form-data': 'Upload de fichiers + donn√©es JSON dans form-data'
//         },

//         usage_json: {
//             content_type: 'application/json',
//             example: {
//                 topic: 'Formation Excel',
//                 resources: {
//                     text_content: 'Notre entreprise...',
//                     keywords: ['Excel', 'TCD']
//                 }
//             }
//         },

//         usage_files: {
//             content_type: 'multipart/form-data',
//             form_fields: {
//                 topic: 'Formation Excel avec nos docs',
//                 settings: '{"level":"intermediate","duration":10}',
//                 resources: '{"keywords":["Excel","formation"]}',
//                 files: ['guide.txt', 'procedures.csv']
//             }
//         },

//         supported_files: {
//             ready_now: ['.txt', '.md', '.csv'],
//             requires_install: ['.pdf (npm install pdf-parse)', '.docx (npm install mammoth)']
//         },

//         benefits: [
//             'üéØ UN SEUL endpoint pour tout',
//             'üîÑ D√©tection automatique JSON/Files',
//             'üìÅ Upload direct de fichiers',
//             'üìö Ressources textuelles ET fichiers',
//             'üíæ Cache intelligent unifi√©',
//             'üîí Nettoyage auto fichiers temporaires',
//             '‚úÖ 100% backward compatible'
//         ],

//         examples: {
//             postman_json: {
//                 method: 'POST',
//                 url: '/ai/groq-plan',
//                 headers: { 'Content-Type': 'application/json' },
//                 body: '{"topic":"Test JSON","resources":{"text_content":"..."}}'
//             },
//             postman_files: {
//                 method: 'POST',
//                 url: '/ai/groq-plan',
//                 type: 'form-data',
//                 fields: {
//                     topic: 'Test Files',
//                     files: 'Select files...'
//                 }
//             }
//         }
//     });
// });

// module.exports = router;




















// // groq-fast-plan.js - VERSION CORRIG√âE avec gestion ressources robuste avec un petit soucis avec le plan simple


// const express = require('express');
// const axios = require('axios');
// const { v4: uuidv4 } = require('uuid');
// const multer = require('multer');
// const fs = require('fs');
// const path = require('path');
// const crypto = require('crypto');

// const router = express.Router();

// // Configuration du cache
// const planCache = new Map();
// const CACHE_DURATION = 1000 * 60 * 15; // 15 minutes

// // Configuration multer pour upload de fichiers
// const upload = multer({
//     dest: 'temp-uploads/',
//     fileFilter: (req, file, cb) => {
//         const allowedTypes = ['.pdf', '.txt', '.docx', '.md', '.csv', '.json'];
//         const ext = path.extname(file.originalname).toLowerCase();
//         cb(null, allowedTypes.includes(ext));
//     },
//     limits: {
//         fileSize: 10 * 1024 * 1024, // 10MB max
//         files: 10 // Maximum 10 fichiers
//     }
// });

// // Cr√©er le dossier temp-uploads s'il n'existe pas
// const tempDir = path.join(__dirname, '..', 'temp-uploads');
// if (!fs.existsSync(tempDir)) {
//     fs.mkdirSync(tempDir, { recursive: true });
//     console.log('üìÅ Dossier temp-uploads cr√©√©');
// }

// // üîß MIDDLEWARE CONDITIONNEL CORRIG√â - √âvite l'erreur boundary
// const conditionalMulter = (req, res, next) => {
//     const contentType = req.headers['content-type'] || '';

//     console.log(`üîç Content-Type d√©tect√©: ${contentType.substring(0, 50)}...`);

//     if (contentType.includes('multipart/form-data')) {
//         console.log('üìÅ Mode multipart/form-data - Activation multer');
//         upload.array('files', 10)(req, res, (err) => {
//             if (err) {
//                 console.error('‚ùå Erreur multer:', err.message);
//                 return res.status(400).json({
//                     error: 'Erreur upload fichiers',
//                     details: err.message,
//                     solution: 'V√©rifiez la taille (<10MB) et le type des fichiers'
//                 });
//             }
//             next();
//         });
//     } else {
//         console.log('üìù Mode JSON standard - Bypass multer');
//         next(); // Passer directement au handler
//     }
// };

// // üéØ ENDPOINT UNIFI√â CORRIG√â
// router.post('/groq-plan', conditionalMulter, async (req, res) => {
//     const startTime = Date.now();

//     try {
//         // üîç D√âTECTION DU FORMAT ET VALIDATION
//         const contentType = req.headers['content-type'] || '';
//         const isFormData = contentType.includes('multipart/form-data');
//         const isJSON = contentType.includes('application/json');

//         console.log(`üéØ G√©n√©ration plan - Format: ${isFormData ? 'multipart/form-data' : isJSON ? 'JSON' : 'autre'}`);

//         let topic, capsuleType, settings, resources, reference_materials, company_context, specific_requirements;

//         if (isFormData) {
//             // üìÅ FORMAT MULTIPART/FORM-DATA (avec fichiers)
//             console.log(`üìÅ Traitement form-data avec ${req.files?.length || 0} fichiers`);

//             topic = req.body.topic;
//             capsuleType = req.body.capsuleType || 'demonstrative';

//             // Parse JSON fields depuis form-data
//             try {
//                 settings = req.body.settings ? JSON.parse(req.body.settings) : {};
//                 resources = req.body.resources ? JSON.parse(req.body.resources) : {};
//                 reference_materials = req.body.reference_materials ? JSON.parse(req.body.reference_materials) : [];
//             } catch (e) {
//                 console.warn('‚ö†Ô∏è Erreur parsing JSON depuis form-data, utilisation valeurs par d√©faut');
//                 settings = {};
//                 resources = {};
//                 reference_materials = [];
//             }

//             company_context = req.body.company_context || null;
//             specific_requirements = req.body.specific_requirements || null;

//         } else if (isJSON) {
//             // üìù FORMAT JSON STANDARD
//             console.log('üìù Traitement JSON standard');

//             topic = req.body.topic;
//             capsuleType = req.body.capsuleType || 'demonstrative';
//             settings = req.body.settings || {};
//             resources = req.body.resources || {};
//             reference_materials = req.body.reference_materials || [];
//             company_context = req.body.company_context || null;
//             specific_requirements = req.body.specific_requirements || null;

//         } else {
//             return res.status(400).json({
//                 error: 'Content-Type non support√©',
//                 received: contentType,
//                 supported: ['application/json', 'multipart/form-data'],
//                 solution: 'Utilisez JSON pour les donn√©es simples ou multipart/form-data pour les fichiers'
//             });
//         }

//         // Validation de base
//         if (!topic || topic.length < 5) {
//             cleanupUploadedFiles(req.files);
//             return res.status(400).json({
//                 error: 'Topic requis (minimum 5 caract√®res)',
//                 format_detected: isFormData ? 'multipart/form-data' : 'JSON',
//                 files_uploaded: req.files?.length || 0,
//                 example: 'Les 3 erreurs Excel √† √©viter absolument'
//             });
//         }

//         // Settings par d√©faut enrichis
//         const finalSettings = {
//             level: 'beginner',
//             duration: 5,
//             style: 'practical',
//             enhancement_level: 'standard', // standard, advanced, maximum
//             adapt_to_resources: true,
//             include_examples: true,
//             ...settings
//         };

//         console.log(`‚ö° G√©n√©ration enrichie: "${topic.substring(0, 50)}..." (${capsuleType}, niveau: ${finalSettings.level})`);

//         // üìÑ TRAITEMENT DES FICHIERS UPLOAD√âS
//         let filesContent = '';
//         let processedFiles = [];
//         let totalFilesSize = 0;

//         if (req.files && req.files.length > 0) {
//             console.log(`üìÅ Traitement de ${req.files.length} fichiers upload√©s...`);

//             for (const file of req.files) {
//                 try {
//                     const content = await parseUploadedFile(file);
//                     const analysis = analyzeFileContent(content, file.originalname);

//                     filesContent += `\n\n=== DOCUMENT: ${file.originalname.toUpperCase()} ===\n`;
//                     filesContent += `Type: ${analysis.content_type}\n`;
//                     filesContent += `Sujets d√©tect√©s: ${analysis.key_topics.join(', ')}\n`;
//                     filesContent += `Contenu:\n${content}\n`;

//                     processedFiles.push({
//                         name: file.originalname,
//                         size: file.size,
//                         type: path.extname(file.originalname),
//                         content_length: content.length,
//                         content_type: analysis.content_type,
//                         key_topics: analysis.key_topics,
//                         procedures_detected: analysis.has_procedures,
//                         status: 'parsed'
//                     });

//                     totalFilesSize += file.size;

//                 } catch (error) {
//                     console.error(`‚ùå Erreur parsing ${file.originalname}:`, error.message);
//                     processedFiles.push({
//                         name: file.originalname,
//                         size: file.size,
//                         status: 'error',
//                         error: error.message
//                     });
//                 }
//             }
//         }

//         // üîó ENRICHISSEMENT DES RESSOURCES
//         const enrichedResources = {
//             ...resources,
//             // Contenu des fichiers upload√©s
//             files_content: filesContent,
//             // M√©tadonn√©es des fichiers
//             files_metadata: processedFiles.filter(f => f.status === 'parsed'),
//             // Analyse globale
//             content_analysis: analyzeGlobalContent(filesContent, resources.text_content),
//             // Contexte enrichi
//             enhanced_context: company_context ? enhanceCompanyContext(company_context, filesContent) : null
//         };

//         // üîç CONSTRUCTION DU CONTEXTE COMPLET
//         let fullResourcesContext = '';
//         let hasResources = false;

//         if (Object.keys(enrichedResources).length > 1) { // Plus que juste files_content vide
//             hasResources = true;
//             fullResourcesContext = await buildEnhancedResourcesContext(enrichedResources, reference_materials);
//             console.log(`üìö Contexte enrichi total: ${fullResourcesContext.length} caract√®res`);
//         }

//         // Cache key avec hash du contexte complet
//         const cacheKey = generateAdvancedCacheKey(topic, capsuleType, finalSettings, fullResourcesContext, company_context);

//         // V√©rification cache
//         if (planCache.has(cacheKey)) {
//             const cached = planCache.get(cacheKey);
//             if (Date.now() - cached.timestamp < CACHE_DURATION) {
//                 cleanupUploadedFiles(req.files);

//                 console.log('üíæ Plan enrichi r√©cup√©r√© du cache');
//                 return res.json({
//                     ...cached.data,
//                     generated_at: cached.timestamp,
//                     from_cache: true,
//                     cache_hit: true
//                 });
//             } else {
//                 planCache.delete(cacheKey);
//             }
//         }

//         // üéØ CR√âATION DU PROMPT ENRICHI AVANC√â
//         const superEnhancedPrompt = createSuperEnhancedPrompt(
//             topic,
//             capsuleType,
//             finalSettings,
//             fullResourcesContext,
//             company_context,
//             specific_requirements,
//             processedFiles.filter(f => f.status === 'parsed')
//         );

//         console.log(`ü§ñ Prompt enrichi: ${superEnhancedPrompt.length} caract√®res`);

//         // G√©n√©ration avec Groq
//         const groqResponse = await callGroqAPI(superEnhancedPrompt, finalSettings.enhancement_level);

//         // Parsing et validation am√©lior√©s
//         let planData;
//         try {
//             const cleanedResponse = cleanGroqResponse(groqResponse);
//             planData = JSON.parse(cleanedResponse);

//             // Validation de la structure
//             if (!planData.plan_sections || !Array.isArray(planData.plan_sections)) {
//                 throw new Error('Structure plan_sections invalide');
//             }

//         } catch (parseError) {
//             console.error('‚ùå Erreur parsing JSON Groq:', parseError.message);
//             console.log('üîÑ G√©n√©ration plan fallback enrichi...');
//             planData = createEnhancedFallbackPlan(topic, finalSettings, hasResources);
//         }

//         // Enrichissement avanc√© du plan
//         const superEnrichedPlan = enrichPlanWithAdvancedResources(
//             planData,
//             enrichedResources,
//             reference_materials,
//             processedFiles,
//             hasResources
//         );

//         // Nettoyage des fichiers temporaires
//         cleanupUploadedFiles(req.files);

//         // üìä STATISTIQUES AVANC√âES
//         const successfulFiles = processedFiles.filter(f => f.status === 'parsed');
//         const keyTopics = extractGlobalKeyTopics(successfulFiles);
//         const totalTime = Date.now() - startTime;

//         // üéØ R√âSULTAT FINAL ENRICHI
//         const result = {
//             plan_id: uuidv4(),
//             topic: topic,
//             capsule_type: capsuleType,
//             settings: finalSettings,

//             // üéØ M√âTADONN√âES FORMAT
//             input_format: {
//                 detected: isFormData ? 'multipart/form-data' : 'application/json',
//                 has_file_uploads: req.files?.length > 0,
//                 files_count: req.files?.length || 0,
//                 total_files_size_kb: Math.round(totalFilesSize / 1024)
//             },

//             // üìÅ INFORMATIONS FICHIERS D√âTAILL√âES
//             ...(req.files?.length > 0 && {
//                 files_processing: {
//                     uploaded_count: req.files.length,
//                     processed_successfully: successfulFiles.length,
//                     failed_count: processedFiles.filter(f => f.status === 'error').length,
//                     total_content_length: filesContent.length,
//                     content_analysis: {
//                         procedures_detected: successfulFiles.filter(f => f.procedures_detected).length,
//                         key_topics_extracted: keyTopics.length,
//                         content_types: [...new Set(successfulFiles.map(f => f.content_type))]
//                     },
//                     processed_files: processedFiles
//                 }
//             }),

//             // üìö INFORMATIONS RESSOURCES ENRICHIES
//             resources_enrichment: {
//                 has_any_resources: hasResources,
//                 has_uploaded_files: filesContent.length > 0,
//                 has_text_resources: !!(enrichedResources.text_content && enrichedResources.text_content !== filesContent),
//                 has_company_context: !!company_context,
//                 has_specific_requirements: !!specific_requirements,
//                 resource_types: Object.keys(enrichedResources).filter(k =>
//                     enrichedResources[k] && k !== 'files_content'
//                 ),
//                 reference_materials_count: reference_materials?.length || 0,
//                 total_context_length: fullResourcesContext.length,
//                 enhancement_level: finalSettings.enhancement_level,
//                 adaptation_applied: {
//                     vocabulary_adapted: hasResources && finalSettings.adapt_to_resources,
//                     examples_included: hasResources && finalSettings.include_examples,
//                     company_terminology: !!company_context,
//                     procedures_integrated: successfulFiles.some(f => f.procedures_detected)
//                 }
//             },

//             // üéØ PLAN ENRICHI
//             plan_sections: superEnrichedPlan.plan_sections,

//             // üìä M√âTADONN√âES G√âN√âRATION
//             generation_stats: {
//                 total_time_ms: totalTime,
//                 groq_model: process.env.GROQ_MODEL || 'llama-3.3-70b-versatile',
//                 prompt_length: superEnhancedPrompt.length,
//                 enhancement_level: finalSettings.enhancement_level,
//                 resources_integrated: hasResources,
//                 files_processed: successfulFiles.length,
//                 response_quality: 'super_enhanced',
//                 key_topics_detected: keyTopics
//             },

//             generated_at: new Date().toISOString(),
//             status: 'completed',
//             cache_stored: true,
//             ready_for_enhanced_slides: true,

//             // üéØ WORKFLOW SUGGESTIONS ENRICHIES
//             next_steps: {
//                 recommended: 'POST /ai/plan-to-markdown pour slides enrichies',
//                 alternative: 'POST /ai/enhance-plan-to-markdown pour version super sophistiqu√©e',
//                 with_resources: hasResources ? 'Le contenu sera adapt√© √† vos ressources' : null,
//                 audio_generation: 'POST /ai/generate-narration-bark avec adaptation entreprise'
//             },

//             // üîß INFORMATIONS D√âBOGAGE
//             debug_info: {
//                 content_type_received: contentType,
//                 files_uploaded: req.files?.length || 0,
//                 cache_key_generated: !!cacheKey,
//                 fallback_used: planData.fallback_generated || false
//             }
//         };

//         // Sauvegarde cache
//         planCache.set(cacheKey, {
//             data: result,
//             timestamp: Date.now()
//         });

//         console.log(`‚úÖ Plan SUPER-ENRICHI g√©n√©r√©: ${superEnrichedPlan.plan_sections.length} sections, ${successfulFiles.length}/${req.files?.length || 0} fichiers, ${totalTime}ms`);
//         res.json(result);

//     } catch (error) {
//         // Nettoyage en cas d'erreur
//         cleanupUploadedFiles(req.files);

//         const totalTime = Date.now() - startTime;
//         console.error('‚ùå Erreur g√©n√©ration plan enrichi:', error);

//         res.status(500).json({
//             error: 'Erreur g√©n√©ration plan enrichi',
//             details: error.message,
//             processing_time_ms: totalTime,
//             files_uploaded: req.files?.length || 0,
//             troubleshooting: {
//                 check_content_type: 'V√©rifiez le Content-Type (JSON ou multipart/form-data)',
//                 check_groq_api: 'V√©rifiez la cl√© API Groq',
//                 check_files: 'V√©rifiez les fichiers upload√©s (taille <10MB)',
//                 check_topic: 'V√©rifiez que le topic fait au moins 5 caract√®res',
//                 retry_json: 'R√©essayez en mode JSON sans fichiers'
//             }
//         });
//     }
// });

// // üîß FONCTION PARSING FICHIERS AM√âLIOR√âE
// async function parseUploadedFile(file) {
//     const ext = path.extname(file.originalname).toLowerCase();

//     try {
//         switch (ext) {
//             case '.txt':
//             case '.md':
//                 return fs.readFileSync(file.path, 'utf8');

//             case '.csv':
//                 const csvContent = fs.readFileSync(file.path, 'utf8');
//                 return convertCSVToStructuredText(csvContent);

//             case '.json':
//                 const jsonContent = fs.readFileSync(file.path, 'utf8');
//                 const jsonData = JSON.parse(jsonContent);
//                 return convertJSONToStructuredText(jsonData);

//             case '.pdf':
//                 // Pour PDF : npm install pdf-parse
//                 throw new Error('Support PDF: Ex√©cutez "npm install pdf-parse"');

//             case '.docx':
//                 // Pour DOCX : npm install mammoth
//                 throw new Error('Support DOCX: Ex√©cutez "npm install mammoth"');

//             default:
//                 throw new Error(`Type de fichier non support√©: ${ext}`);
//         }
//     } catch (error) {
//         throw new Error(`Erreur parsing ${file.originalname}: ${error.message}`);
//     }
// }

// // üîç ANALYSE CONTENU FICHIER
// function analyzeFileContent(content, filename) {
//     const analysis = {
//         content_type: 'general',
//         key_topics: [],
//         has_procedures: false,
//         has_examples: false,
//         confidence_score: 0
//     };

//     const lowerContent = content.toLowerCase();
//     const words = lowerContent.split(/\W+/).filter(w => w.length > 3);

//     // D√©tecter le type de contenu
//     if (lowerContent.includes('proc√©dure') || lowerContent.includes('√©tape') || /\d+\.\s/.test(content)) {
//         analysis.content_type = 'procedure';
//         analysis.has_procedures = true;
//         analysis.confidence_score += 0.3;
//     }

//     if (lowerContent.includes('formation') || lowerContent.includes('cours') || lowerContent.includes('apprentissage')) {
//         analysis.content_type = 'training_material';
//         analysis.confidence_score += 0.2;
//     }

//     if (filename.toLowerCase().includes('guide') || filename.toLowerCase().includes('manuel')) {
//         analysis.content_type = 'manual';
//         analysis.confidence_score += 0.2;
//     }

//     if (lowerContent.includes('exemple') || lowerContent.includes('par exemple') || lowerContent.includes('illustration')) {
//         analysis.has_examples = true;
//         analysis.confidence_score += 0.1;
//     }

//     // Extraire mots-cl√©s fr√©quents
//     const wordFreq = {};
//     words.forEach(word => {
//         if (word.length > 4) {
//             wordFreq[word] = (wordFreq[word] || 0) + 1;
//         }
//     });

//     analysis.key_topics = Object.entries(wordFreq)
//         .sort(([, a], [, b]) => b - a)
//         .slice(0, 8)
//         .map(([word]) => word);

//     return analysis;
// }

// // üîó CONSTRUCTION CONTEXTE ENRICHI
// async function buildEnhancedResourcesContext(enrichedResources, referenceMaterials) {
//     let context = '';

//     try {
//         // Analyse globale du contenu
//         if (enrichedResources.content_analysis) {
//             context += `ANALYSE GLOBALE DU CONTENU:\n${JSON.stringify(enrichedResources.content_analysis, null, 2)}\n\n`;
//         }

//         // Contenu des fichiers avec m√©tadonn√©es
//         if (enrichedResources.files_content && enrichedResources.files_content.trim()) {
//             context += `DOCUMENTS FOURNIS AVEC M√âTADONN√âES:\n${enrichedResources.files_content}\n\n`;
//         }

//         // M√©tadonn√©es des fichiers
//         if (enrichedResources.files_metadata && enrichedResources.files_metadata.length > 0) {
//             context += `M√âTADONN√âES DES DOCUMENTS:\n`;
//             enrichedResources.files_metadata.forEach(file => {
//                 context += `- ${file.name}: ${file.content_type}, sujets: ${file.key_topics.join(', ')}\n`;
//             });
//             context += '\n';
//         }

//         // Texte additionnel
//         if (enrichedResources.text_content && enrichedResources.text_content !== enrichedResources.files_content) {
//             context += `CONTENU TEXTUEL ADDITIONNEL:\n${enrichedResources.text_content}\n\n`;
//         }

//         // Contexte entreprise enrichi
//         if (enrichedResources.enhanced_context) {
//             context += `CONTEXTE ENTREPRISE ENRICHI:\n${enrichedResources.enhanced_context}\n\n`;
//         }

//         // Ressources diverses
//         if (enrichedResources.urls && enrichedResources.urls.length > 0) {
//             context += `RESSOURCES WEB:\n${enrichedResources.urls.map(url => `- ${url}`).join('\n')}\n\n`;
//         }

//         if (enrichedResources.keywords && enrichedResources.keywords.length > 0) {
//             context += `MOTS-CL√âS PRIORITAIRES: ${enrichedResources.keywords.join(', ')}\n\n`;
//         }

//         if (enrichedResources.procedures) {
//             context += `PROC√âDURES SP√âCIFIQUES:\n${enrichedResources.procedures}\n\n`;
//         }

//         // Mat√©riaux de r√©f√©rence
//         if (referenceMaterials && referenceMaterials.length > 0) {
//             context += buildReferenceMaterialsContext(referenceMaterials);
//         }

//     } catch (error) {
//         console.error('‚ùå Erreur construction contexte enrichi:', error.message);
//         context = 'ERREUR TRAITEMENT RESSOURCES ENRICHIES\n';
//     }

//     return context;
// }

// // üéØ PROMPT SUPER ENRICHI
// function createSuperEnhancedPrompt(topic, capsuleType, settings, resourcesContext, companyContext, specificRequirements, processedFiles) {
//     const { level, duration, style, enhancement_level } = settings;

//     let prompt = `Tu es un expert en p√©dagogie et conception de formations professionnelles. Tu dois cr√©er un plan de formation exceptionnel, parfaitement adapt√© aux ressources fournies.

// INFORMATIONS DE BASE:
// - Sujet: ${topic}
// - Type: ${capsuleType}
// - Niveau: ${level}
// - Dur√©e: ${duration} minutes
// - Style: ${style}
// - Niveau d'enrichissement: ${enhancement_level}`;

//     // Contexte ressources d√©taill√©
//     if (resourcesContext && resourcesContext.length > 0) {
//         prompt += `

// RESSOURCES ET CONTEXTE D√âTAILL√â √Ä INT√âGRER OBLIGATOIREMENT:
// ${resourcesContext}

// DIRECTIVES D'INT√âGRATION AVANC√âES:
// - Utilise EXCLUSIVEMENT le vocabulaire et la terminologie des ressources fournies
// - Int√®gre les proc√©dures exactes mentionn√©es dans les documents
// - Adapte tous les exemples au contexte sp√©cifique fourni
// - Respecte scrupuleusement les m√©thodes et approches d√©crites
// - Assure-toi que chaque section fait r√©f√©rence aux ressources pertinentes
// - Utilise les mots-cl√©s identifi√©s dans les m√©tadonn√©es`;

//         // Instructions sp√©cifiques selon les types de fichiers
//         if (processedFiles.length > 0) {
//             const procedureFiles = processedFiles.filter(f => f.procedures_detected);
//             const manualFiles = processedFiles.filter(f => f.content_type === 'manual');

//             if (procedureFiles.length > 0) {
//                 prompt += `\n- PROC√âDURES D√âTECT√âES: Int√®gre les √©tapes exactes des fichiers ${procedureFiles.map(f => f.name).join(', ')}`;
//             }

//             if (manualFiles.length > 0) {
//                 prompt += `\n- MANUELS R√âF√âRENCE: Base-toi sur les standards des fichiers ${manualFiles.map(f => f.name).join(', ')}`;
//             }
//         }
//     }

//     // Contexte entreprise
//     if (companyContext) {
//         prompt += `

// CONTEXTE ENTREPRISE SP√âCIFIQUE:
// ${companyContext}
// - Adapte le langage et les exemples √† ce contexte pr√©cis
// - Utilise les r√©f√©rences internes et la culture d'entreprise`;
//     }

//     // Exigences sp√©cifiques
//     if (specificRequirements) {
//         prompt += `

// EXIGENCES SP√âCIFIQUES √Ä RESPECTER:
// ${specificRequirements}`;
//     }

//     // Instructions selon le niveau d'enrichissement
//     switch (enhancement_level) {
//         case 'maximum':
//             prompt += `

// NIVEAU MAXIMUM - G√âN√àRE UN PLAN EXCEPTIONNEL:
// - Sections ultra-d√©taill√©es avec sous-points sp√©cifiques
// - Int√©gration parfaite des ressources dans chaque section
// - Exemples concrets tir√©s directement des documents fournis
// - Vocabulaire technique pr√©cis et adapt√©
// - Timing optimis√© pour un apprentissage efficace`;
//             break;

//         case 'advanced':
//             prompt += `

// NIVEAU AVANC√â - G√âN√àRE UN PLAN SOPHISTIQU√â:
// - Sections d√©taill√©es avec bonne int√©gration des ressources
// - Exemples pertinents bas√©s sur les documents
// - Terminologie adapt√©e au contexte`;
//             break;

//         default:
//             prompt += `

// NIVEAU STANDARD - G√âN√àRE UN PLAN PROFESSIONNEL:
// - Sections √©quilibr√©es int√©grant les ressources principales
// - Exemples bas√©s sur le contexte fourni`;
//     }

//     prompt += `

// G√âN√àRE un plan JSON avec cette structure EXACTE et ENRICHIE:

// {
//   "plan_sections": [
//     {
//       "section_number": 1,
//       "title": "Titre adapt√© aux ressources",
//       "type": "introduction",
//       "duration_seconds": 60,
//       "what_to_cover": [
//         "Point sp√©cifique bas√© sur les ressources fournies",
//         "Objectif align√© avec les documents d'entreprise",
//         "Accroche utilisant la terminologie des ressources"
//       ],
//       "content_summary": "R√©sum√© int√©grant parfaitement les √©l√©ments des ressources",
//       "resource_references": [
//         "R√©f√©rence exacte aux documents utilis√©s"
//       ],
//       "key_terminology": [
//         "Termes cl√©s extraits des ressources"
//       ],
//       "examples_from_resources": [
//         "Exemples concrets tir√©s des documents fournis"
//       ]
//     }
//   ]
// }

// R√àGLES STRICTES ENRICHIES:
// - ${duration} minutes maximum (${duration * 60} secondes total)
// - Sections √©quilibr√©es mais d√©taill√©es selon le niveau d'enrichissement
// - Int√©gration OBLIGATOIRE et VISIBLE des ressources dans chaque section
// - Vocabulaire exclusivement adapt√© au contexte fourni
// - Exemples uniquement bas√©s sur les ressources fournies
// - JSON valide uniquement, pas de texte avant/apr√®s
// - Chaque section doit montrer clairement l'utilisation des ressources`;

//     return prompt;
// }

// // üîß ENRICHISSEMENT PLAN AVANC√â
// function enrichPlanWithAdvancedResources(planData, enrichedResources, materials, processedFiles, hasResources) {
//     if (!hasResources || !planData.plan_sections) {
//         return planData;
//     }

//     const globalKeyTopics = extractGlobalKeyTopics(processedFiles);
//     const procedureFiles = processedFiles.filter(f => f.procedures_detected);

//     planData.plan_sections = planData.plan_sections.map((section, index) => ({
//         ...section,

//         // Enrichissement avanc√©
//         enhanced_with_resources: true,
//         enhancement_level: 'advanced',

//         // Int√©gration ressources d√©taill√©e
//         resource_integration: {
//             uses_company_content: !!(enrichedResources.text_content || enrichedResources.files_content),
//             uses_uploaded_files: !!enrichedResources.files_content,
//             references_documents: !!(enrichedResources.files_metadata?.length),
//             includes_procedures: procedureFiles.length > 0,
//             follows_company_style: !!enrichedResources.enhanced_context,
//             adapted_vocabulary: true,
//             custom_examples: true
//         },

//         // M√©tadonn√©es enrichies
//         content_metadata: {
//             primary_topics: globalKeyTopics.slice(0, 3),
//             resource_files_used: processedFiles.filter(f =>
//                 f.key_topics.some(topic =>
//                     section.title?.toLowerCase().includes(topic) ||
//                     section.content_summary?.toLowerCase().includes(topic)
//                 )
//             ).map(f => f.name),
//             terminology_adapted: true,
//             examples_count: section.examples_from_resources?.length || 0
//         },

//         // Score de qualit√©
//         quality_score: calculateSectionQualityScore(section, hasResources, processedFiles)
//     }));

//     // M√©tadonn√©es globales du plan enrichi
//     planData.enrichment_metadata = {
//         total_files_integrated: processedFiles.length,
//         procedures_integrated: procedureFiles.length,
//         key_topics_coverage: globalKeyTopics.length,
//         company_adaptation: !!enrichedResources.enhanced_context,
//         vocabulary_adaptation_score: calculateVocabularyAdaptationScore(planData, globalKeyTopics),
//         overall_enhancement_score: calculateOverallEnhancementScore(planData, enrichedResources)
//     };

//     return planData;
// }

// // üîß FONCTIONS UTILITAIRES ENRICHIES

// // Conversion CSV structur√©e
// function convertCSVToStructuredText(csvContent) {
//     const lines = csvContent.split('\n').filter(line => line.trim());
//     if (lines.length < 2) return csvContent;

//     const headers = lines[0].split(',').map(h => h.trim());
//     let structured = `DONN√âES STRUCTUR√âES (CSV):\n\nColonnes: ${headers.join(' | ')}\n\n`;

//     for (let i = 1; i < Math.min(lines.length, 11); i++) { // Max 10 lignes
//         const values = lines[i].split(',').map(v => v.trim());
//         structured += `Ligne ${i}: ${headers.map((h, idx) => `${h}: ${values[idx] || 'N/A'}`).join(' | ')}\n`;
//     }

//     if (lines.length > 11) {
//         structured += `... et ${lines.length - 11} autres lignes\n`;
//     }

//     return structured;
// }

// // Conversion JSON structur√©e
// function convertJSONToStructuredText(jsonData) {
//     let structured = 'DONN√âES STRUCTUR√âES (JSON):\n\n';

//     function processObject(obj, prefix = '') {
//         for (const [key, value] of Object.entries(obj)) {
//             if (typeof value === 'object' && value !== null) {
//                 if (Array.isArray(value)) {
//                     structured += `${prefix}${key}: [${value.length} √©l√©ments]\n`;
//                     value.slice(0, 3).forEach((item, index) => {
//                         structured += `  ${index + 1}. ${typeof item === 'object' ? JSON.stringify(item).substring(0, 100) : item}\n`;
//                     });
//                 } else {
//                     structured += `${prefix}${key}:\n`;
//                     processObject(value, prefix + '  ');
//                 }
//             } else {
//                 structured += `${prefix}${key}: ${value}\n`;
//             }
//         }
//     }

//     processObject(jsonData);
//     return structured;
// }

// // Analyse contenu global
// function analyzeGlobalContent(filesContent, textContent) {
//     const allContent = [filesContent, textContent].filter(Boolean).join(' ');

//     if (!allContent.trim()) {
//         return { has_content: false };
//     }

//     const words = allContent.toLowerCase().split(/\W+/).filter(w => w.length > 3);
//     const wordFreq = {};

//     words.forEach(word => {
//         wordFreq[word] = (wordFreq[word] || 0) + 1;
//     });

//     const topWords = Object.entries(wordFreq)
//         .sort(([, a], [, b]) => b - a)
//         .slice(0, 15)
//         .map(([word]) => word);

//     return {
//         has_content: true,
//         total_words: words.length,
//         unique_words: Object.keys(wordFreq).length,
//         top_keywords: topWords,
//         has_procedures: allContent.includes('proc√©dure') || allContent.includes('√©tape'),
//         has_examples: allContent.includes('exemple') || allContent.includes('illustration'),
//         content_density: Math.round((Object.keys(wordFreq).length / words.length) * 100)
//     };
// }

// // Enrichissement contexte entreprise
// function enhanceCompanyContext(companyContext, filesContent) {
//     if (!filesContent || !companyContext) return companyContext;

//     // Extraire terminologie sp√©cifique des fichiers
//     const terminology = extractTerminology(filesContent);

//     let enhanced = companyContext + '\n\nTERMINOLOGIE SP√âCIFIQUE IDENTIFI√âE:\n';
//     enhanced += terminology.map(term => `- ${term}`).join('\n');

//     // Ajouter contexte proc√©dural si d√©tect√©
//     if (filesContent.includes('proc√©dure')) {
//         enhanced += '\n\nCONTEXTE PROC√âDURAL: Les ressources contiennent des proc√©dures sp√©cifiques √† int√©grer.';
//     }

//     return enhanced;
// }

// // Extraction terminologie
// function extractTerminology(content) {
//     const terms = [];
//     const patterns = [
//         /[A-Z][a-z]+ [A-Z][a-z]+/g, // Termes compos√©s
//         /\b[A-Z]{2,}\b/g, // Acronymes
//         /\b\w+_\w+\b/g // Termes avec underscore
//     ];

//     patterns.forEach(pattern => {
//         const matches = content.match(pattern) || [];
//         terms.push(...matches);
//     });

//     return [...new Set(terms)].slice(0, 10);
// }

// // Extraction mots-cl√©s globaux
// function extractGlobalKeyTopics(processedFiles) {
//     const allTopics = processedFiles.reduce((acc, file) => {
//         return acc.concat(file.key_topics || []);
//     }, []);

//     const topicFreq = {};
//     allTopics.forEach(topic => {
//         topicFreq[topic] = (topicFreq[topic] || 0) + 1;
//     });

//     return Object.entries(topicFreq)
//         .sort(([, a], [, b]) => b - a)
//         .slice(0, 12)
//         .map(([topic]) => topic);
// }

// // Calcul score qualit√© section
// function calculateSectionQualityScore(section, hasResources, processedFiles) {
//     let score = 50; // Score de base

//     if (hasResources) score += 20;
//     if (section.resource_references?.length > 0) score += 15;
//     if (section.examples_from_resources?.length > 0) score += 10;
//     if (section.key_terminology?.length > 0) score += 5;

//     return Math.min(score, 100);
// }

// // Calcul score adaptation vocabulaire
// function calculateVocabularyAdaptationScore(planData, globalKeyTopics) {
//     if (!globalKeyTopics.length) return 0;

//     const planText = JSON.stringify(planData).toLowerCase();
//     const topicsFound = globalKeyTopics.filter(topic =>
//         planText.includes(topic.toLowerCase())
//     );

//     return Math.round((topicsFound.length / globalKeyTopics.length) * 100);
// }

// // Calcul score enrichissement global
// function calculateOverallEnhancementScore(planData, enrichedResources) {
//     let score = 0;

//     if (enrichedResources.files_content) score += 25;
//     if (enrichedResources.enhanced_context) score += 20;
//     if (enrichedResources.content_analysis?.has_content) score += 15;
//     if (planData.plan_sections?.every(s => s.enhanced_with_resources)) score += 25;
//     if (planData.plan_sections?.some(s => s.examples_from_resources?.length > 0)) score += 15;

//     return Math.min(score, 100);
// }

// // Appel API Groq enrichi
// async function callGroqAPI(prompt, enhancementLevel = 'standard') {
//     try {
//         const modelConfig = {
//             model: process.env.GROQ_MODEL || 'llama-3.3-70b-versatile',
//             temperature: enhancementLevel === 'maximum' ? 0.8 : 0.7,
//             max_tokens: enhancementLevel === 'maximum' ? 5000 : 4000
//         };

//         const response = await axios.post('https://api.groq.com/openai/v1/chat/completions', {
//             ...modelConfig,
//             messages: [
//                 {
//                     role: 'system',
//                     content: `Tu es un expert en conception p√©dagogique et int√©gration de ressources documentaires. Tu cr√©es des plans de formation exceptionnels parfaitement adapt√©s aux ressources fournies. Niveau d'enrichissement: ${enhancementLevel}. R√©ponds UNIQUEMENT en JSON valide.`
//                 },
//                 {
//                     role: 'user',
//                     content: prompt
//                 }
//             ]
//         }, {
//             headers: {
//                 'Authorization': `Bearer ${process.env.GROQ_API_KEY}`,
//                 'Content-Type': 'application/json'
//             }
//         });

//         return response.data.choices[0].message.content;
//     } catch (error) {
//         console.error('‚ùå Erreur API Groq enrichie:', error.message);
//         throw error;
//     }
// }

// // Plan fallback enrichi
// function createEnhancedFallbackPlan(topic, settings, hasResources) {
//     const { duration, level } = settings;
//     const totalSeconds = duration * 60;

//     const sections = [
//         {
//             section_number: 1,
//             title: hasResources ? `Introduction contextuelle √† ${topic}` : `Introduction √† ${topic}`,
//             type: "introduction",
//             duration_seconds: Math.round(totalSeconds * 0.15),
//             what_to_cover: [
//                 hasResources ? `Pr√©sentation bas√©e sur vos ressources: ${topic}` : `Pr√©sentation du sujet: ${topic}`,
//                 "Objectifs de cette formation",
//                 hasResources ? "Contexte sp√©cifique √† votre organisation" : "Contexte g√©n√©ral"
//             ],
//             content_summary: hasResources ? `Introduction adapt√©e √† vos ressources sur ${topic}` : `Introduction √† ${topic}`,
//             enhanced_with_resources: hasResources,
//             fallback_generated: true
//         },
//         {
//             section_number: 2,
//             title: hasResources ? "D√©veloppement bas√© sur vos ressources" : "D√©veloppement principal",
//             type: "development",
//             duration_seconds: Math.round(totalSeconds * 0.70),
//             what_to_cover: [
//                 hasResources ? "Points cl√©s extraits de vos documents" : "Points cl√©s du sujet",
//                 hasResources ? "Exemples tir√©s de vos ressources" : "Exemples pratiques",
//                 hasResources ? "M√©thodes adapt√©es √† votre contexte" : "M√©thodes recommand√©es"
//             ],
//             content_summary: hasResources ? `Contenu enrichi par vos ressources sur ${topic}` : `Contenu principal sur ${topic}`,
//             enhanced_with_resources: hasResources,
//             fallback_generated: true
//         },
//         {
//             section_number: 3,
//             title: hasResources ? "Conclusion et application dans votre contexte" : "Conclusion",
//             type: "conclusion",
//             duration_seconds: Math.round(totalSeconds * 0.15),
//             what_to_cover: [
//                 "R√©capitulatif des points essentiels",
//                 hasResources ? "Applications sp√©cifiques √† votre organisation" : "Applications pratiques",
//                 hasResources ? "Prochaines √©tapes selon vos ressources" : "Prochaines √©tapes recommand√©es"
//             ],
//             content_summary: hasResources ? `Synth√®se adapt√©e √† votre contexte pour ${topic}` : `Synth√®se de ${topic}`,
//             enhanced_with_resources: hasResources,
//             fallback_generated: true
//         }
//     ];

//     return { plan_sections: sections, fallback_generated: true };
// }

// // G√©n√©ration cl√© cache avanc√©e
// function generateAdvancedCacheKey(topic, capsuleType, settings, resourcesContext, companyContext) {
//     const baseKey = `${topic}_${capsuleType}_${settings.level}_${settings.duration}_${settings.style}_${settings.enhancement_level}`;

//     const resourcesHash = resourcesContext ?
//         crypto.createHash('md5').update(resourcesContext).digest('hex').substring(0, 12) :
//         'no_resources';

//     const companyHash = companyContext ?
//         crypto.createHash('md5').update(companyContext).digest('hex').substring(0, 8) :
//         'no_company';

//     return `enhanced_${baseKey}_${resourcesHash}_${companyHash}`;
// }

// // Nettoyage fichiers temporaires
// function cleanupUploadedFiles(files) {
//     if (files && files.length > 0) {
//         files.forEach(file => {
//             try {
//                 if (fs.existsSync(file.path)) {
//                     fs.unlinkSync(file.path);
//                     console.log(`üóëÔ∏è Fichier temporaire supprim√©: ${file.originalname}`);
//                 }
//             } catch (error) {
//                 console.warn(`‚ö†Ô∏è Impossible de supprimer ${file.path}:`, error.message);
//             }
//         });
//     }
// }

// // Nettoyage r√©ponse Groq
// function cleanGroqResponse(response) {
//     return response
//         .replace(/```json\n/g, '')
//         .replace(/\n```/g, '')
//         .replace(/```/g, '')
//         .replace(/^[^{]*/, '')
//         .replace(/[^}]*$/, '')
//         .trim();
// }

// // üîß ROUTES D'INFORMATION ENRICHIES

// router.get('/groq-plan/info', (req, res) => {
//     res.json({
//         endpoint: 'POST /ai/groq-plan',
//         description: 'üéØ ENDPOINT UNIFI√â ENRICHI - Gestion avanc√©e des ressources documentaires',
//         version: '5.0 - Super Enhanced with Resources',
//         status: 'OP√âRATIONNEL avec correction boundary',

//         auto_detection: {
//             'Content-Type: application/json': 'Mode JSON avec ressources textuelles enrichies',
//             'Content-Type: multipart/form-data': 'Upload fichiers + donn√©es avec analyse avanc√©e'
//         },

//         enhancement_levels: {
//             'standard': 'Int√©gration de base des ressources',
//             'advanced': 'Analyse approfondie et adaptation vocabulaire',
//             'maximum': 'Int√©gration compl√®te avec exemples personnalis√©s'
//         },

//         supported_files: {
//             ready: ['.txt', '.md', '.csv', '.json'],
//             requires_install: ['.pdf (npm install pdf-parse)', '.docx (npm install mammoth)']
//         },

//         new_features: [
//             'üîß Bug multipart/form-data CORRIG√â',
//             'üìö Analyse avanc√©e du contenu des fichiers',
//             'üéØ Adaptation automatique du vocabulaire',
//             'üìä M√©tadonn√©es enrichies sur l\'int√©gration',
//             'üè¢ Contexte entreprise intelligent',
//             '‚ö° Cache avanc√© avec hash des ressources',
//             'üìà Scores de qualit√© d\'enrichissement'
//         ],

//         usage_json_enrichi: {
//             content_type: 'application/json',
//             example: {
//                 topic: 'Formation Excel avanc√©e',
//                 enhancement_level: 'maximum',
//                 resources: {
//                     text_content: 'Guide Excel de notre entreprise...',
//                     keywords: ['Excel', 'TCD', 'macros'],
//                     procedures: 'Proc√©dure validation des donn√©es...'
//                 },
//                 company_context: '√âquipe finance - utilisation quotidienne Excel',
//                 specific_requirements: 'Inclure nos standards de validation'
//             }
//         },

//         quality_indicators: {
//             vocabulary_adaptation_score: 'Pourcentage d\'adaptation du vocabulaire',
//             overall_enhancement_score: 'Score global d\'enrichissement (0-100)',
//             resource_integration_level: 'Niveau d\'int√©gration des ressources',
//             section_quality_scores: 'Scores individuels par section'
//         }
//     });
// });

// router.get('/groq-plan/test', async (req, res) => {
//     res.json({
//         status: 'ready',
//         version: '5.0-enhanced',
//         corrections: {
//             multipart_boundary: 'CORRIG√â - Middleware conditionnel',
//             resource_integration: 'AM√âLIOR√â - Analyse avanc√©e',
//             vocabulary_adaptation: 'NOUVEAU - Adaptation automatique',
//             cache_system: 'OPTIMIS√â - Hash des ressources'
//         },
//         test_endpoints: {
//             json_simple: 'POST avec Content-Type: application/json',
//             json_enrichi: 'POST avec resources et company_context',
//             multipart_files: 'POST avec Content-Type: multipart/form-data'
//         },
//         ready_for_production: true
//     });
// });

// module.exports = router;















// code optimiser qui gere tout
// groq-fast-plan.js - VERSION CORRIG√âE avec gestion ressources robuste + FIX BODY MAPPING

// groq-fast-plan.js - VERSION FINALE CORRIG√âE - Plus de r√©f√©rences fictives
const express = require('express');
const axios = require('axios');
const { v4: uuidv4 } = require('uuid');
const multer = require('multer');
const fs = require('fs');
const path = require('path');
const crypto = require('crypto');

const router = express.Router();

// Configuration du cache
const planCache = new Map();
const CACHE_DURATION = 1000 * 60 * 15; // 15 minutes

// Configuration multer pour upload de fichiers
const upload = multer({
    dest: 'temp-uploads/',
    fileFilter: (req, file, cb) => {
        const allowedTypes = ['.pdf', '.txt', '.docx', '.md', '.csv', '.json'];
        const ext = path.extname(file.originalname).toLowerCase();
        cb(null, allowedTypes.includes(ext));
    },
    limits: {
        fileSize: 10 * 1024 * 1024, // 10MB max
        files: 10 // Maximum 10 fichiers
    }
});

// Cr√©er le dossier temp-uploads s'il n'existe pas
const tempDir = path.join(__dirname, '..', 'temp-uploads');
if (!fs.existsSync(tempDir)) {
    fs.mkdirSync(tempDir, { recursive: true });
    console.log('üìÅ Dossier temp-uploads cr√©√©');
}

// üîß MIDDLEWARE CONDITIONNEL CORRIG√â - √âvite l'erreur boundary
const conditionalMulter = (req, res, next) => {
    const contentType = req.headers['content-type'] || '';

    console.log(`üîç Content-Type d√©tect√©: ${contentType.substring(0, 50)}...`);

    if (contentType.includes('multipart/form-data')) {
        console.log('üìÅ Mode multipart/form-data - Activation multer');
        upload.array('files', 10)(req, res, (err) => {
            if (err) {
                console.error('‚ùå Erreur multer:', err.message);
                return res.status(400).json({
                    error: 'Erreur upload fichiers',
                    details: err.message,
                    solution: 'V√©rifiez la taille (<10MB) et le type des fichiers'
                });
            }
            next();
        });
    } else {
        console.log('üìù Mode JSON standard - Bypass multer');
        next(); // Passer directement au handler
    }
};

// üéØ ENDPOINT UNIFI√â CORRIG√â
router.post('/groq-plan', conditionalMulter, async (req, res) => {
    const startTime = Date.now();

    try {
        // üîç D√âTECTION DU FORMAT ET VALIDATION
        const contentType = req.headers['content-type'] || '';
        const isFormData = contentType.includes('multipart/form-data');
        const isJSON = contentType.includes('application/json');

        console.log(`üéØ G√©n√©ration plan - Format: ${isFormData ? 'multipart/form-data' : isJSON ? 'JSON' : 'autre'}`);

        let topic, capsuleType, settings, resources, reference_materials, company_context, specific_requirements;

        if (isFormData) {
            // üìÅ FORMAT MULTIPART/FORM-DATA (avec fichiers)
            console.log(`üìÅ Traitement form-data avec ${req.files?.length || 0} fichiers`);

            topic = req.body.topic;
            capsuleType = req.body.capsuleType || req.body.type || 'demonstrative';

            // Parse JSON fields depuis form-data
            try {
                settings = req.body.settings ? JSON.parse(req.body.settings) : {};
                resources = req.body.resources ? JSON.parse(req.body.resources) : {};
                reference_materials = req.body.reference_materials ? JSON.parse(req.body.reference_materials) : [];
            } catch (e) {
                console.warn('‚ö†Ô∏è Erreur parsing JSON depuis form-data, utilisation valeurs par d√©faut');
                settings = {};
                resources = {};
                reference_materials = [];
            }

            company_context = req.body.company_context || null;
            specific_requirements = req.body.specific_requirements || null;

        } else if (isJSON) {
            // üìù FORMAT JSON STANDARD - MAPPING FLEXIBLE CORRIG√â
            console.log('üìù Traitement JSON standard');

            topic = req.body.topic;

            // üîß CORRECTION: Mapping flexible des param√®tres
            capsuleType = req.body.capsuleType || req.body.type || 'demonstrative';

            // Gestion flexible de la dur√©e et du niveau avec fallbacks
            const durationFromBody = req.body.duration || req.body.duration_minutes || req.body.settings?.duration || 5;
            const levelFromBody = req.body.level || req.body.settings?.level || 'beginner';
            const styleFromBody = req.body.style || req.body.settings?.style || 'practical';

            // Construction settings avec mapping flexible et validation
            settings = {
                level: levelFromBody,
                duration: parseInt(durationFromBody) || 5, // Assure un nombre
                style: styleFromBody,
                enhancement_level: req.body.enhancement_level || req.body.settings?.enhancement_level || 'standard',
                adapt_to_resources: req.body.adapt_to_resources !== undefined ? req.body.adapt_to_resources : true,
                include_examples: req.body.include_examples !== undefined ? req.body.include_examples : true,
                ...req.body.settings // √âcrase avec settings explicites si fournis
            };

            resources = req.body.resources || {};
            reference_materials = req.body.reference_materials || [];
            company_context = req.body.company_context || null;
            specific_requirements = req.body.specific_requirements || null;

            console.log(`üìã Param√®tres mapp√©s: topic="${topic}", type="${capsuleType}", level="${settings.level}", dur√©e=${settings.duration}min`);

        } else {
            return res.status(400).json({
                error: 'Content-Type non support√©',
                received: contentType,
                supported: ['application/json', 'multipart/form-data'],
                solution: 'Utilisez JSON pour les donn√©es simples ou multipart/form-data pour les fichiers'
            });
        }

        // üîß VALIDATION ENRICHIE avec messages explicites
        if (!topic || topic.length < 5) {
            cleanupUploadedFiles(req.files);
            return res.status(400).json({
                error: 'Topic requis (minimum 5 caract√®res)',
                received_parameters: {
                    topic: topic || 'non fourni',
                    type: capsuleType,
                    level: settings?.level,
                    duration: settings?.duration
                },
                format_detected: isFormData ? 'multipart/form-data' : 'JSON',
                files_uploaded: req.files?.length || 0,
                example_body: {
                    topic: 'Formation Python pour d√©butants',
                    type: 'demonstrative', // ou capsuleType
                    level: 'beginner',
                    duration_minutes: 5 // ou duration
                },
                supported_mappings: {
                    'type ou capsuleType': 'demonstrative|interactive|practical',
                    'level': 'beginner|intermediate|advanced',
                    'duration ou duration_minutes': 'nombre en minutes'
                }
            });
        }

        // üîß VALIDATION DES SETTINGS avec correction automatique
        if (!settings.duration || settings.duration < 1 || settings.duration > 60) {
            console.warn(`‚ö†Ô∏è Dur√©e invalide (${settings.duration}), correction √† 5 minutes`);
            settings.duration = 5;
        }

        if (!['beginner', 'intermediate', 'advanced'].includes(settings.level)) {
            console.warn(`‚ö†Ô∏è Niveau invalide (${settings.level}), correction √† 'beginner'`);
            settings.level = 'beginner';
        }

        if (!['demonstrative', 'interactive', 'practical'].includes(capsuleType)) {
            console.warn(`‚ö†Ô∏è Type invalide (${capsuleType}), correction √† 'demonstrative'`);
            capsuleType = 'demonstrative';
        }

        // Settings par d√©faut enrichis APR√àS validation
        const finalSettings = {
            level: settings.level,
            duration: settings.duration,
            style: settings.style,
            enhancement_level: settings.enhancement_level || 'standard',
            adapt_to_resources: settings.adapt_to_resources,
            include_examples: settings.include_examples,
            ...settings
        };

        console.log(`‚ö° G√©n√©ration enrichie: "${topic.substring(0, 50)}..." (${capsuleType}, niveau: ${finalSettings.level}, dur√©e: ${finalSettings.duration}min)`);

        // üìÑ TRAITEMENT DES FICHIERS UPLOAD√âS
        let filesContent = '';
        let processedFiles = [];
        let totalFilesSize = 0;

        if (req.files && req.files.length > 0) {
            console.log(`üìÅ Traitement de ${req.files.length} fichiers upload√©s...`);

            for (const file of req.files) {
                try {
                    const content = await parseUploadedFile(file);
                    const analysis = analyzeFileContent(content, file.originalname);

                    filesContent += `\n\n=== DOCUMENT: ${file.originalname.toUpperCase()} ===\n`;
                    filesContent += `Type: ${analysis.content_type}\n`;
                    filesContent += `Sujets d√©tect√©s: ${analysis.key_topics.join(', ')}\n`;
                    filesContent += `Contenu:\n${content}\n`;

                    processedFiles.push({
                        name: file.originalname,
                        size: file.size,
                        type: path.extname(file.originalname),
                        content_length: content.length,
                        content_type: analysis.content_type,
                        key_topics: analysis.key_topics,
                        procedures_detected: analysis.has_procedures,
                        status: 'parsed'
                    });

                    totalFilesSize += file.size;

                } catch (error) {
                    console.error(`‚ùå Erreur parsing ${file.originalname}:`, error.message);
                    processedFiles.push({
                        name: file.originalname,
                        size: file.size,
                        status: 'error',
                        error: error.message
                    });
                }
            }
        }

        // üîó ENRICHISSEMENT DES RESSOURCES
        const enrichedResources = {
            ...resources,
            // Contenu des fichiers upload√©s
            files_content: filesContent,
            // M√©tadonn√©es des fichiers
            files_metadata: processedFiles.filter(f => f.status === 'parsed'),
            // Analyse globale
            content_analysis: analyzeGlobalContent(filesContent, resources.text_content),
            // Contexte enrichi
            enhanced_context: company_context ? enhanceCompanyContext(company_context, filesContent) : null
        };

        // üîç CONSTRUCTION DU CONTEXTE COMPLET - CORRIG√â
        let fullResourcesContext = '';
        let hasResources = false;

        // üîß CORRECTION: V√©rifier si on a VRAIMENT des ressources
        const hasFileContent = enrichedResources.files_content && enrichedResources.files_content.trim() && enrichedResources.files_content.length > 100;
        const hasTextContent = enrichedResources.text_content && enrichedResources.text_content.trim() && enrichedResources.text_content.length > 10;
        const hasCompanyContext = company_context && company_context.trim();
        const hasSpecificReq = specific_requirements && specific_requirements.trim();

        // Seulement si on a du contenu r√©el (pas juste des m√©tadonn√©es vides)
        if (hasFileContent || hasTextContent || hasCompanyContext || hasSpecificReq) {
            hasResources = true;
            fullResourcesContext = await buildEnhancedResourcesContext(enrichedResources, reference_materials);
            console.log(`üìö Contexte enrichi total: ${fullResourcesContext.length} caract√®res`);
        } else {
            console.log(`üìù Mode formation standard: aucune ressource documentaire fournie`);
            hasResources = false;
            fullResourcesContext = '';
        }

        // Cache key avec hash du contexte complet
        const cacheKey = generateAdvancedCacheKey(topic, capsuleType, finalSettings, fullResourcesContext, company_context);

        // V√©rification cache
        if (planCache.has(cacheKey)) {
            const cached = planCache.get(cacheKey);
            if (Date.now() - cached.timestamp < CACHE_DURATION) {
                cleanupUploadedFiles(req.files);

                console.log('üíæ Plan enrichi r√©cup√©r√© du cache');
                return res.json({
                    ...cached.data,
                    generated_at: cached.timestamp,
                    from_cache: true,
                    cache_hit: true
                });
            } else {
                planCache.delete(cacheKey);
            }
        }

        // üéØ CR√âATION DU PROMPT ENRICHI AVANC√â - CORRIG√â
        const superEnhancedPrompt = createSuperEnhancedPrompt(
            topic,
            capsuleType,
            finalSettings,
            fullResourcesContext,
            company_context,
            specific_requirements,
            processedFiles.filter(f => f.status === 'parsed'),
            hasResources // üîß NOUVEAU: Passer le flag hasResources
        );

        console.log(`ü§ñ Prompt enrichi: ${superEnhancedPrompt.length} caract√®res, hasResources: ${hasResources}`);

        // G√©n√©ration avec Groq
        const groqResponse = await callGroqAPI(superEnhancedPrompt, finalSettings.enhancement_level);

        // Parsing et validation am√©lior√©s
        let planData;
        try {
            const cleanedResponse = cleanGroqResponse(groqResponse);
            planData = JSON.parse(cleanedResponse);

            // Validation de la structure
            if (!planData.plan_sections || !Array.isArray(planData.plan_sections)) {
                throw new Error('Structure plan_sections invalide');
            }

        } catch (parseError) {
            console.error('‚ùå Erreur parsing JSON Groq:', parseError.message);
            console.log('üîÑ G√©n√©ration plan fallback enrichi...');
            planData = createEnhancedFallbackPlan(topic, finalSettings, hasResources);
        }

        // Enrichissement avanc√© du plan
        const superEnrichedPlan = enrichPlanWithAdvancedResources(
            planData,
            enrichedResources,
            reference_materials,
            processedFiles,
            hasResources
        );

        // Nettoyage des fichiers temporaires
        cleanupUploadedFiles(req.files);

        // üìä STATISTIQUES AVANC√âES
        const successfulFiles = processedFiles.filter(f => f.status === 'parsed');
        const keyTopics = extractGlobalKeyTopics(successfulFiles);
        const totalTime = Date.now() - startTime;

        // üéØ R√âSULTAT FINAL ENRICHI
        const result = {
            plan_id: uuidv4(),
            topic: topic,
            capsule_type: capsuleType,
            settings: finalSettings,

            // üéØ M√âTADONN√âES FORMAT
            input_format: {
                detected: isFormData ? 'multipart/form-data' : 'application/json',
                has_file_uploads: req.files?.length > 0,
                files_count: req.files?.length || 0,
                total_files_size_kb: Math.round(totalFilesSize / 1024)
            },

            // üìÅ INFORMATIONS FICHIERS D√âTAILL√âES
            ...(req.files?.length > 0 && {
                files_processing: {
                    uploaded_count: req.files.length,
                    processed_successfully: successfulFiles.length,
                    failed_count: processedFiles.filter(f => f.status === 'error').length,
                    total_content_length: filesContent.length,
                    content_analysis: {
                        procedures_detected: successfulFiles.filter(f => f.procedures_detected).length,
                        key_topics_extracted: keyTopics.length,
                        content_types: [...new Set(successfulFiles.map(f => f.content_type))]
                    },
                    processed_files: processedFiles
                }
            }),

            // üìö INFORMATIONS RESSOURCES ENRICHIES - CORRIG√â
            resources_enrichment: {
                has_any_resources: hasResources, // üîß CORRECTION: Vraie valeur
                has_uploaded_files: hasFileContent,
                has_text_resources: hasTextContent,
                has_company_context: hasCompanyContext,
                has_specific_requirements: hasSpecificReq,
                resource_types: Object.keys(enrichedResources).filter(k =>
                    enrichedResources[k] && k !== 'files_content' && k !== 'content_analysis'
                ),
                reference_materials_count: reference_materials?.length || 0,
                total_context_length: fullResourcesContext.length, // üîß CORRECTION: Vraie longueur
                enhancement_level: finalSettings.enhancement_level,
                adaptation_applied: {
                    vocabulary_adapted: hasResources && finalSettings.adapt_to_resources,
                    examples_included: hasResources && finalSettings.include_examples,
                    company_terminology: hasCompanyContext,
                    procedures_integrated: successfulFiles.some(f => f.procedures_detected)
                }
            },

            // üéØ PLAN ENRICHI
            plan_sections: superEnrichedPlan.plan_sections,

            // üìä M√âTADONN√âES G√âN√âRATION
            generation_stats: {
                total_time_ms: totalTime,
                groq_model: process.env.GROQ_MODEL || 'llama-3.3-70b-versatile',
                prompt_length: superEnhancedPrompt.length,
                enhancement_level: finalSettings.enhancement_level,
                resources_integrated: hasResources,
                files_processed: successfulFiles.length,
                response_quality: hasResources ? 'super_enhanced' : 'standard_quality',
                key_topics_detected: keyTopics
            },

            generated_at: new Date().toISOString(),
            status: 'completed',
            cache_stored: true,
            ready_for_enhanced_slides: true,

            // üéØ WORKFLOW SUGGESTIONS ENRICHIES
            next_steps: {
                recommended: 'POST /ai/plan-to-markdown pour slides enrichies',
                alternative: 'POST /ai/enhance-plan-to-markdown pour version super sophistiqu√©e',
                with_resources: hasResources ? 'Le contenu sera adapt√© √† vos ressources' : null,
                audio_generation: 'POST /ai/generate-narration-bark avec adaptation entreprise'
            },

            // üîß INFORMATIONS D√âBOGAGE
            debug_info: {
                content_type_received: contentType,
                files_uploaded: req.files?.length || 0,
                cache_key_generated: !!cacheKey,
                fallback_used: planData.fallback_generated || false,
                parameter_mapping: {
                    original_type: req.body.type || req.body.capsuleType,
                    mapped_capsuleType: capsuleType,
                    original_duration: req.body.duration || req.body.duration_minutes,
                    mapped_duration: finalSettings.duration,
                    original_level: req.body.level,
                    mapped_level: finalSettings.level
                },
                resource_detection: {
                    has_file_content: hasFileContent,
                    has_text_content: hasTextContent,
                    has_company_context: hasCompanyContext,
                    has_specific_requirements: hasSpecificReq,
                    final_has_resources: hasResources
                }
            }
        };

        // Sauvegarde cache
        planCache.set(cacheKey, {
            data: result,
            timestamp: Date.now()
        });

        console.log(`‚úÖ Plan G√âN√âR√â: ${superEnrichedPlan.plan_sections.length} sections, ${successfulFiles.length}/${req.files?.length || 0} fichiers, ${totalTime}ms, hasResources: ${hasResources}`);
        res.json(result);

    } catch (error) {
        // Nettoyage en cas d'erreur
        cleanupUploadedFiles(req.files);

        const totalTime = Date.now() - startTime;
        console.error('‚ùå Erreur g√©n√©ration plan enrichi:', error);

        res.status(500).json({
            error: 'Erreur g√©n√©ration plan enrichi',
            details: error.message,
            processing_time_ms: totalTime,
            files_uploaded: req.files?.length || 0,
            troubleshooting: {
                check_content_type: 'V√©rifiez le Content-Type (JSON ou multipart/form-data)',
                check_groq_api: 'V√©rifiez la cl√© API Groq',
                check_files: 'V√©rifiez les fichiers upload√©s (taille <10MB)',
                check_topic: 'V√©rifiez que le topic fait au moins 5 caract√®res',
                check_parameters: 'V√©rifiez le mapping des param√®tres (type/capsuleType, duration/duration_minutes)',
                retry_json: 'R√©essayez en mode JSON sans fichiers'
            }
        });
    }
});

// üîß FONCTION PARSING FICHIERS AM√âLIOR√âE
async function parseUploadedFile(file) {
    const ext = path.extname(file.originalname).toLowerCase();

    try {
        switch (ext) {
            case '.txt':
            case '.md':
                return fs.readFileSync(file.path, 'utf8');

            case '.csv':
                const csvContent = fs.readFileSync(file.path, 'utf8');
                return convertCSVToStructuredText(csvContent);

            case '.json':
                const jsonContent = fs.readFileSync(file.path, 'utf8');
                const jsonData = JSON.parse(jsonContent);
                return convertJSONToStructuredText(jsonData);

            case '.pdf':
                // Pour PDF : npm install pdf-parse
                throw new Error('Support PDF: Ex√©cutez "npm install pdf-parse"');

            case '.docx':
                // Pour DOCX : npm install mammoth
                throw new Error('Support DOCX: Ex√©cutez "npm install mammoth"');

            default:
                throw new Error(`Type de fichier non support√©: ${ext}`);
        }
    } catch (error) {
        throw new Error(`Erreur parsing ${file.originalname}: ${error.message}`);
    }
}

// üîç ANALYSE CONTENU FICHIER
function analyzeFileContent(content, filename) {
    const analysis = {
        content_type: 'general',
        key_topics: [],
        has_procedures: false,
        has_examples: false,
        confidence_score: 0
    };

    const lowerContent = content.toLowerCase();
    const words = lowerContent.split(/\W+/).filter(w => w.length > 3);

    // D√©tecter le type de contenu
    if (lowerContent.includes('proc√©dure') || lowerContent.includes('√©tape') || /\d+\.\s/.test(content)) {
        analysis.content_type = 'procedure';
        analysis.has_procedures = true;
        analysis.confidence_score += 0.3;
    }

    if (lowerContent.includes('formation') || lowerContent.includes('cours') || lowerContent.includes('apprentissage')) {
        analysis.content_type = 'training_material';
        analysis.confidence_score += 0.2;
    }

    if (filename.toLowerCase().includes('guide') || filename.toLowerCase().includes('manuel')) {
        analysis.content_type = 'manual';
        analysis.confidence_score += 0.2;
    }

    if (lowerContent.includes('exemple') || lowerContent.includes('par exemple') || lowerContent.includes('illustration')) {
        analysis.has_examples = true;
        analysis.confidence_score += 0.1;
    }

    // Extraire mots-cl√©s fr√©quents
    const wordFreq = {};
    words.forEach(word => {
        if (word.length > 4) {
            wordFreq[word] = (wordFreq[word] || 0) + 1;
        }
    });

    analysis.key_topics = Object.entries(wordFreq)
        .sort(([, a], [, b]) => b - a)
        .slice(0, 8)
        .map(([word]) => word);

    return analysis;
}

// üîó CONSTRUCTION CONTEXTE ENRICHI - CORRIG√â
async function buildEnhancedResourcesContext(enrichedResources, referenceMaterials) {
    let context = '';

    try {
        // üîß CORRECTION: Ne traiter que le contenu r√©el
        let hasRealContent = false;

        // Contenu des fichiers avec m√©tadonn√©es (seulement si contenu r√©el)
        if (enrichedResources.files_content &&
            enrichedResources.files_content.trim() &&
            enrichedResources.files_content.length > 100) {
            context += `DOCUMENTS FOURNIS AVEC M√âTADONN√âES:\n${enrichedResources.files_content}\n\n`;
            hasRealContent = true;
        }

        // Texte additionnel (seulement si diff√©rent et r√©el)
        if (enrichedResources.text_content &&
            enrichedResources.text_content.trim() &&
            enrichedResources.text_content !== enrichedResources.files_content &&
            enrichedResources.text_content.length > 10) {
            context += `CONTENU TEXTUEL ADDITIONNEL:\n${enrichedResources.text_content}\n\n`;
            hasRealContent = true;
        }

        // Contexte entreprise enrichi (seulement si fourni)
        if (enrichedResources.enhanced_context && enrichedResources.enhanced_context.trim()) {
            context += `CONTEXTE ENTREPRISE ENRICHI:\n${enrichedResources.enhanced_context}\n\n`;
            hasRealContent = true;
        }

        // Ressources diverses (seulement si fournies)
        if (enrichedResources.urls && enrichedResources.urls.length > 0) {
            context += `RESSOURCES WEB:\n${enrichedResources.urls.map(url => `- ${url}`).join('\n')}\n\n`;
            hasRealContent = true;
        }

        if (enrichedResources.keywords && enrichedResources.keywords.length > 0) {
            context += `MOTS-CL√âS PRIORITAIRES: ${enrichedResources.keywords.join(', ')}\n\n`;
            hasRealContent = true;
        }

        if (enrichedResources.procedures && enrichedResources.procedures.trim()) {
            context += `PROC√âDURES SP√âCIFIQUES:\n${enrichedResources.procedures}\n\n`;
            hasRealContent = true;
        }

        // Mat√©riaux de r√©f√©rence (seulement si fournis)
        if (referenceMaterials && referenceMaterials.length > 0) {
            context += buildReferenceMaterialsContext(referenceMaterials);
            hasRealContent = true;
        }

        // üîß CORRECTION: Si pas de contenu r√©el, renvoyer vide
        if (!hasRealContent) {
            return '';
        }

        // Analyse globale SEULEMENT si on a du contenu
        if (enrichedResources.content_analysis && enrichedResources.content_analysis.has_content) {
            context = `ANALYSE GLOBALE DU CONTENU:\n${JSON.stringify(enrichedResources.content_analysis, null, 2)}\n\n` + context;
        }

    } catch (error) {
        console.error('‚ùå Erreur construction contexte enrichi:', error.message);
        return '';
    }

    return context;
}

// üéØ PROMPT SUPER ENRICHI - CORRIG√â
function createSuperEnhancedPrompt(topic, capsuleType, settings, resourcesContext, companyContext, specificRequirements, processedFiles, hasResources) {
    const { level, duration, style, enhancement_level } = settings;

    let prompt = `Tu es un expert en p√©dagogie et conception de formations professionnelles. Tu dois cr√©er un plan de formation exceptionnel.

INFORMATIONS DE BASE:
- Sujet: ${topic}
- Type: ${capsuleType}
- Niveau: ${level}
- Dur√©e: ${duration} minutes
- Style: ${style}
- Niveau d'enrichissement: ${enhancement_level}`;

    // üîß CORRECTION: Contexte ressources SEULEMENT si on en a vraiment
    if (hasResources && resourcesContext && resourcesContext.trim()) {
        prompt += `

RESSOURCES ET CONTEXTE D√âTAILL√â √Ä INT√âGRER OBLIGATOIREMENT:
${resourcesContext}

DIRECTIVES D'INT√âGRATION AVANC√âES:
- Utilise EXCLUSIVEMENT le vocabulaire et la terminologie des ressources fournies
- Int√®gre les proc√©dures exactes mentionn√©es dans les documents
- Adapte tous les exemples au contexte sp√©cifique fourni
- Respecte scrupuleusement les m√©thodes et approches d√©crites
- Assure-toi que chaque section fait r√©f√©rence aux ressources pertinentes
- Utilise les mots-cl√©s identifi√©s dans les m√©tadonn√©es`;

        // Instructions sp√©cifiques selon les types de fichiers
        if (processedFiles.length > 0) {
            const procedureFiles = processedFiles.filter(f => f.procedures_detected);
            const manualFiles = processedFiles.filter(f => f.content_type === 'manual');

            if (procedureFiles.length > 0) {
                prompt += `\n- PROC√âDURES D√âTECT√âES: Int√®gre les √©tapes exactes des fichiers ${procedureFiles.map(f => f.name).join(', ')}`;
            }

            if (manualFiles.length > 0) {
                prompt += `\n- MANUELS R√âF√âRENCE: Base-toi sur les standards des fichiers ${manualFiles.map(f => f.name).join(', ')}`;
            }
        }
    } else {
        // üîß NOUVEAU: Instructions pour formation sans ressources
        prompt += `

MODE FORMATION STANDARD (sans ressources documentaires):
- Cr√©e un contenu p√©dagogique autonome et complet
- Utilise des exemples g√©n√©riques adapt√©s au niveau ${level}
- Structure claire et progressive
- Pas de r√©f√©rences √† des documents externes
- Contenu bas√© sur les meilleures pratiques p√©dagogiques`;
    }

    // Contexte entreprise (seulement si fourni)
    if (companyContext) {
        prompt += `

CONTEXTE ENTREPRISE SP√âCIFIQUE:
${companyContext}
- Adapte le langage et les exemples √† ce contexte pr√©cis
- Utilise les r√©f√©rences internes et la culture d'entreprise`;
    }

    // Exigences sp√©cifiques (seulement si fournies)
    if (specificRequirements) {
        prompt += `

EXIGENCES SP√âCIFIQUES √Ä RESPECTER:
${specificRequirements}`;
    }

    // Instructions selon le niveau d'enrichissement
    switch (enhancement_level) {
        case 'maximum':
            prompt += hasResources ? `

NIVEAU MAXIMUM - G√âN√àRE UN PLAN EXCEPTIONNEL:
- Sections ultra-d√©taill√©es avec sous-points sp√©cifiques
- Int√©gration parfaite des ressources dans chaque section
- Exemples concrets tir√©s directement des documents fournis
- Vocabulaire technique pr√©cis et adapt√©
- Timing optimis√© pour un apprentissage efficace` : `

NIVEAU MAXIMUM - G√âN√àRE UN PLAN EXCEPTIONNEL:
- Sections ultra-d√©taill√©es avec sous-points sp√©cifiques
- Exemples concrets et vari√©s
- Vocabulaire technique pr√©cis
- Timing optimis√© pour un apprentissage efficace
- Contenu riche et approfondi`;
            break;

        case 'advanced':
            prompt += hasResources ? `

NIVEAU AVANC√â - G√âN√àRE UN PLAN SOPHISTIQU√â:
- Sections d√©taill√©es avec bonne int√©gration des ressources
- Exemples pertinents bas√©s sur les documents
- Terminologie adapt√©e au contexte` : `

NIVEAU AVANC√â - G√âN√àRE UN PLAN SOPHISTIQU√â:
- Sections d√©taill√©es et bien structur√©es
- Exemples pertinents et concrets
- Terminologie adapt√©e au niveau ${level}`;
            break;

        default:
            prompt += hasResources ? `

NIVEAU STANDARD - G√âN√àRE UN PLAN PROFESSIONNEL:
- Sections √©quilibr√©es int√©grant les ressources principales
- Exemples bas√©s sur le contexte fourni` : `

NIVEAU STANDARD - G√âN√àRE UN PLAN PROFESSIONNEL:
- Sections √©quilibr√©es et progressives
- Exemples clairs et adapt√©s au niveau`;
    }

    // üîß CORRECTION: Structure JSON adapt√©e selon les ressources
    prompt += `

G√âN√àRE un plan JSON avec cette structure EXACTE - OBLIGATOIREMENT ${Math.ceil(duration / 2)} √† ${Math.ceil(duration / 1.5)} sections pour ${duration} minutes:

{
  "plan_sections": [
    {
      "section_number": 1,
      "title": "Titre adapt√© au sujet",
      "type": "introduction",
      "duration_seconds": 60,
      "what_to_cover": [
        "Point sp√©cifique sur ${topic}",
        "Objectif d'apprentissage pour niveau ${level}",
        "Contexte d'utilisation"
      ],
      "content_summary": "R√©sum√© de la section sur ${topic}"${hasResources ? `,
      "resource_references": [
        "R√©f√©rence exacte aux documents utilis√©s"
      ],
      "key_terminology": [
        "Termes cl√©s extraits des ressources"
      ],
      "examples_from_resources": [
        "Exemples concrets tir√©s des documents fournis"
      ]` : ''}
    }
  ]
}

R√àGLES STRICTES:
- ${duration} minutes maximum (${duration * 60} secondes total)
- OBLIGATOIREMENT ${Math.ceil(duration / 2)} √† ${Math.ceil(duration / 1.5)} sections pour ${duration} minutes
- Sections √©quilibr√©es selon le niveau d'enrichissement
${hasResources ? '- Int√©gration OBLIGATOIRE et VISIBLE des ressources dans chaque section\n- Vocabulaire exclusivement adapt√© au contexte fourni\n- Exemples uniquement bas√©s sur les ressources fournies' : '- Contenu autonome sans r√©f√©rences externes\n- Exemples g√©n√©riques adapt√©s au niveau\n- Pas de champs resource_references, key_terminology ou examples_from_resources'}
- JSON valide uniquement, pas de texte avant/apr√®s`;

    return prompt;
}

// üîß ENRICHISSEMENT PLAN AVANC√â - CORRIG√â
function enrichPlanWithAdvancedResources(planData, enrichedResources, materials, processedFiles, hasResources) {
    if (!planData.plan_sections) {
        return planData;
    }

    const globalKeyTopics = extractGlobalKeyTopics(processedFiles);
    const procedureFiles = processedFiles.filter(f => f.procedures_detected);

    planData.plan_sections = planData.plan_sections.map((section, index) => ({
        ...section,

        // üîß CORRECTION: Enrichissement seulement si ressources
        ...(hasResources && {
            enhanced_with_resources: true,
            enhancement_level: 'advanced',

            // Int√©gration ressources d√©taill√©e
            resource_integration: {
                uses_company_content: !!(enrichedResources.text_content || enrichedResources.files_content),
                uses_uploaded_files: !!enrichedResources.files_content,
                references_documents: !!(enrichedResources.files_metadata?.length),
                includes_procedures: procedureFiles.length > 0,
                follows_company_style: !!enrichedResources.enhanced_context,
                adapted_vocabulary: true,
                custom_examples: true
            },

            // M√©tadonn√©es enrichies
            content_metadata: {
                primary_topics: globalKeyTopics.slice(0, 3),
                resource_files_used: processedFiles.filter(f =>
                    f.key_topics.some(topic =>
                        section.title?.toLowerCase().includes(topic) ||
                        section.content_summary?.toLowerCase().includes(topic)
                    )
                ).map(f => f.name),
                terminology_adapted: true,
                examples_count: section.examples_from_resources?.length || 0
            }
        }),

        // Score de qualit√©
        quality_score: calculateSectionQualityScore(section, hasResources, processedFiles)
    }));

    // üîß CORRECTION: M√©tadonn√©es globales seulement si ressources
    if (hasResources) {
        planData.enrichment_metadata = {
            total_files_integrated: processedFiles.length,
            procedures_integrated: procedureFiles.length,
            key_topics_coverage: globalKeyTopics.length,
            company_adaptation: !!enrichedResources.enhanced_context,
            vocabulary_adaptation_score: calculateVocabularyAdaptationScore(planData, globalKeyTopics),
            overall_enhancement_score: calculateOverallEnhancementScore(planData, enrichedResources)
        };
    }

    return planData;
}

// üîß FONCTIONS UTILITAIRES ENRICHIES

// Conversion CSV structur√©e
function convertCSVToStructuredText(csvContent) {
    const lines = csvContent.split('\n').filter(line => line.trim());
    if (lines.length < 2) return csvContent;

    const headers = lines[0].split(',').map(h => h.trim());
    let structured = `DONN√âES STRUCTUR√âES (CSV):\n\nColonnes: ${headers.join(' | ')}\n\n`;

    for (let i = 1; i < Math.min(lines.length, 11); i++) { // Max 10 lignes
        const values = lines[i].split(',').map(v => v.trim());
        structured += `Ligne ${i}: ${headers.map((h, idx) => `${h}: ${values[idx] || 'N/A'}`).join(' | ')}\n`;
    }

    if (lines.length > 11) {
        structured += `... et ${lines.length - 11} autres lignes\n`;
    }

    return structured;
}

// Conversion JSON structur√©e
function convertJSONToStructuredText(jsonData) {
    let structured = 'DONN√âES STRUCTUR√âES (JSON):\n\n';

    function processObject(obj, prefix = '') {
        for (const [key, value] of Object.entries(obj)) {
            if (typeof value === 'object' && value !== null) {
                if (Array.isArray(value)) {
                    structured += `${prefix}${key}: [${value.length} √©l√©ments]\n`;
                    value.slice(0, 3).forEach((item, index) => {
                        structured += `  ${index + 1}. ${typeof item === 'object' ? JSON.stringify(item).substring(0, 100) : item}\n`;
                    });
                } else {
                    structured += `${prefix}${key}:\n`;
                    processObject(value, prefix + '  ');
                }
            } else {
                structured += `${prefix}${key}: ${value}\n`;
            }
        }
    }

    processObject(jsonData);
    return structured;
}

// Analyse contenu global
function analyzeGlobalContent(filesContent, textContent) {
    const allContent = [filesContent, textContent].filter(Boolean).join(' ');

    if (!allContent.trim()) {
        return { has_content: false };
    }

    const words = allContent.toLowerCase().split(/\W+/).filter(w => w.length > 3);
    const wordFreq = {};

    words.forEach(word => {
        wordFreq[word] = (wordFreq[word] || 0) + 1;
    });

    const topWords = Object.entries(wordFreq)
        .sort(([, a], [, b]) => b - a)
        .slice(0, 15)
        .map(([word]) => word);

    return {
        has_content: true,
        total_words: words.length,
        unique_words: Object.keys(wordFreq).length,
        top_keywords: topWords,
        has_procedures: allContent.includes('proc√©dure') || allContent.includes('√©tape'),
        has_examples: allContent.includes('exemple') || allContent.includes('illustration'),
        content_density: Math.round((Object.keys(wordFreq).length / words.length) * 100)
    };
}

// Enrichissement contexte entreprise
function enhanceCompanyContext(companyContext, filesContent) {
    if (!filesContent || !companyContext) return companyContext;

    // Extraire terminologie sp√©cifique des fichiers
    const terminology = extractTerminology(filesContent);

    let enhanced = companyContext + '\n\nTERMINOLOGIE SP√âCIFIQUE IDENTIFI√âE:\n';
    enhanced += terminology.map(term => `- ${term}`).join('\n');

    // Ajouter contexte proc√©dural si d√©tect√©
    if (filesContent.includes('proc√©dure')) {
        enhanced += '\n\nCONTEXTE PROC√âDURAL: Les ressources contiennent des proc√©dures sp√©cifiques √† int√©grer.';
    }

    return enhanced;
}

// Extraction terminologie
function extractTerminology(content) {
    const terms = [];
    const patterns = [
        /[A-Z][a-z]+ [A-Z][a-z]+/g, // Termes compos√©s
        /\b[A-Z]{2,}\b/g, // Acronymes
        /\b\w+_\w+\b/g // Termes avec underscore
    ];

    patterns.forEach(pattern => {
        const matches = content.match(pattern) || [];
        terms.push(...matches);
    });

    return [...new Set(terms)].slice(0, 10);
}

// Extraction mots-cl√©s globaux
function extractGlobalKeyTopics(processedFiles) {
    const allTopics = processedFiles.reduce((acc, file) => {
        return acc.concat(file.key_topics || []);
    }, []);

    const topicFreq = {};
    allTopics.forEach(topic => {
        topicFreq[topic] = (topicFreq[topic] || 0) + 1;
    });

    return Object.entries(topicFreq)
        .sort(([, a], [, b]) => b - a)
        .slice(0, 12)
        .map(([topic]) => topic);
}

// Calcul score qualit√© section
function calculateSectionQualityScore(section, hasResources, processedFiles) {
    let score = 50; // Score de base

    if (hasResources) score += 20;
    if (section.resource_references?.length > 0) score += 15;
    if (section.examples_from_resources?.length > 0) score += 10;
    if (section.key_terminology?.length > 0) score += 5;

    return Math.min(score, 100);
}

// Calcul score adaptation vocabulaire
function calculateVocabularyAdaptationScore(planData, globalKeyTopics) {
    if (!globalKeyTopics.length) return 0;

    const planText = JSON.stringify(planData).toLowerCase();
    const topicsFound = globalKeyTopics.filter(topic =>
        planText.includes(topic.toLowerCase())
    );

    return Math.round((topicsFound.length / globalKeyTopics.length) * 100);
}

// Calcul score enrichissement global
function calculateOverallEnhancementScore(planData, enrichedResources) {
    let score = 0;

    if (enrichedResources.files_content) score += 25;
    if (enrichedResources.enhanced_context) score += 20;
    if (enrichedResources.content_analysis?.has_content) score += 15;
    if (planData.plan_sections?.every(s => s.enhanced_with_resources)) score += 25;
    if (planData.plan_sections?.some(s => s.examples_from_resources?.length > 0)) score += 15;

    return Math.min(score, 100);
}

// Appel API Groq enrichi
async function callGroqAPI(prompt, enhancementLevel = 'standard') {
    try {
        const modelConfig = {
            model: process.env.GROQ_MODEL || 'llama-3.3-70b-versatile',
            temperature: enhancementLevel === 'maximum' ? 0.8 : 0.7,
            max_tokens: enhancementLevel === 'maximum' ? 5000 : 4000
        };

        const response = await axios.post('https://api.groq.com/openai/v1/chat/completions', {
            ...modelConfig,
            messages: [
                {
                    role: 'system',
                    content: `Tu es un expert en conception p√©dagogique et int√©gration de ressources documentaires. Tu cr√©es des plans de formation exceptionnels parfaitement adapt√©s aux ressources fournies. Niveau d'enrichissement: ${enhancementLevel}. R√©ponds UNIQUEMENT en JSON valide.`
                },
                {
                    role: 'user',
                    content: prompt
                }
            ]
        }, {
            headers: {
                'Authorization': `Bearer ${process.env.GROQ_API_KEY}`,
                'Content-Type': 'application/json'
            }
        });

        return response.data.choices[0].message.content;
    } catch (error) {
        console.error('‚ùå Erreur API Groq enrichie:', error.message);
        throw error;
    }
}

// Plan fallback enrichi CORRIG√â - Plus de sections
function createEnhancedFallbackPlan(topic, settings, hasResources) {
    const { duration, level } = settings;
    const totalSeconds = duration * 60;

    // üîß CORRECTION: G√©n√®re plus de sections selon la dur√©e
    const sectionsCount = Math.max(3, Math.ceil(duration / 2)); // Minimum 3 sections, sinon dur√©e/2

    const sections = [];

    // Section introduction (15% du temps)
    const baseSection = {
        section_number: 1,
        title: hasResources ? `Introduction contextuelle √† ${topic}` : `Introduction √† ${topic}`,
        type: "introduction",
        duration_seconds: Math.round(totalSeconds * 0.15),
        what_to_cover: [
            hasResources ? `Pr√©sentation bas√©e sur vos ressources: ${topic}` : `Pr√©sentation du sujet: ${topic}`,
            "Objectifs de cette formation",
            hasResources ? "Contexte sp√©cifique √† votre organisation" : "Contexte g√©n√©ral"
        ],
        content_summary: hasResources ? `Introduction adapt√©e √† vos ressources sur ${topic}` : `Introduction √† ${topic}`,
        fallback_generated: true
    };

    // üîß CORRECTION: Ajouter les champs enrichis seulement si hasResources
    if (hasResources) {
        baseSection.enhanced_with_resources = true;
        baseSection.resource_references = ["Ressources fournies"];
        baseSection.key_terminology = [topic, "formation", "apprentissage"];
        baseSection.examples_from_resources = [`Exemple contextuel pour ${topic}`];
    }

    sections.push(baseSection);

    // Sections d√©veloppement (70% du temps r√©parti)
    const developmentTime = Math.round(totalSeconds * 0.70);
    const developmentSections = sectionsCount - 2; // Moins intro et conclusion
    const timePerDevelopment = Math.round(developmentTime / developmentSections);

    for (let i = 0; i < developmentSections; i++) {
        const devSection = {
            section_number: i + 2,
            title: hasResources ? `Point cl√© ${i + 1} - Bas√© sur vos ressources` : `Point cl√© ${i + 1} sur ${topic}`,
            type: "development",
            duration_seconds: timePerDevelopment,
            what_to_cover: [
                hasResources ? `Aspect ${i + 1} extrait de vos documents` : `Aspect ${i + 1} du sujet`,
                hasResources ? `Exemples tir√©s de vos ressources` : `Exemples pratiques`,
                hasResources ? `Application dans votre contexte` : `Application pratique`
            ],
            content_summary: hasResources ? `D√©veloppement ${i + 1} enrichi par vos ressources` : `D√©veloppement ${i + 1} sur ${topic}`,
            fallback_generated: true
        };

        // üîß CORRECTION: Ajouter les champs enrichis seulement si hasResources
        if (hasResources) {
            devSection.enhanced_with_resources = true;
            devSection.resource_references = ["Ressources fournies"];
            devSection.key_terminology = [topic, `aspect${i + 1}`, "pratique"];
            devSection.examples_from_resources = [`Exemple ${i + 1} contextuel pour ${topic}`];
        }

        sections.push(devSection);
    }

    // Section conclusion (15% du temps)
    const conclusionSection = {
        section_number: sectionsCount,
        title: hasResources ? "Conclusion et application dans votre contexte" : "Conclusion",
        type: "conclusion",
        duration_seconds: Math.round(totalSeconds * 0.15),
        what_to_cover: [
            "R√©capitulatif des points essentiels",
            hasResources ? "Applications sp√©cifiques √† votre organisation" : "Applications pratiques",
            hasResources ? "Prochaines √©tapes selon vos ressources" : "Prochaines √©tapes recommand√©es"
        ],
        content_summary: hasResources ? `Synth√®se adapt√©e √† votre contexte pour ${topic}` : `Synth√®se de ${topic}`,
        fallback_generated: true
    };

    // üîß CORRECTION: Ajouter les champs enrichis seulement si hasResources
    if (hasResources) {
        conclusionSection.enhanced_with_resources = true;
        conclusionSection.resource_references = ["Ressources fournies"];
        conclusionSection.key_terminology = [topic, "synth√®se", "prochaines √©tapes"];
        conclusionSection.examples_from_resources = [`Ressource compl√©mentaire pour ${topic}`];
    }

    sections.push(conclusionSection);

    console.log(`üîÑ Plan fallback g√©n√©r√©: ${sections.length} sections pour ${duration} minutes, hasResources: ${hasResources}`);
    return { plan_sections: sections, fallback_generated: true };
}

// G√©n√©ration cl√© cache avanc√©e
function generateAdvancedCacheKey(topic, capsuleType, settings, resourcesContext, companyContext) {
    const baseKey = `${topic}_${capsuleType}_${settings.level}_${settings.duration}_${settings.style}_${settings.enhancement_level}`;

    const resourcesHash = resourcesContext ?
        crypto.createHash('md5').update(resourcesContext).digest('hex').substring(0, 12) :
        'no_resources';

    const companyHash = companyContext ?
        crypto.createHash('md5').update(companyContext).digest('hex').substring(0, 8) :
        'no_company';

    return `enhanced_${baseKey}_${resourcesHash}_${companyHash}`;
}

// Nettoyage fichiers temporaires
function cleanupUploadedFiles(files) {
    if (files && files.length > 0) {
        files.forEach(file => {
            try {
                if (fs.existsSync(file.path)) {
                    fs.unlinkSync(file.path);
                    console.log(`üóëÔ∏è Fichier temporaire supprim√©: ${file.originalname}`);
                }
            } catch (error) {
                console.warn(`‚ö†Ô∏è Impossible de supprimer ${file.path}:`, error.message);
            }
        });
    }
}

// Nettoyage r√©ponse Groq
function cleanGroqResponse(response) {
    return response
        .replace(/```json\n/g, '')
        .replace(/\n```/g, '')
        .replace(/```/g, '')
        .replace(/^[^{]*/, '')
        .replace(/[^}]*$/, '')
        .trim();
}

// Fonction utilitaire pour les mat√©riaux de r√©f√©rence
function buildReferenceMaterialsContext(referenceMaterials) {
    if (!referenceMaterials || referenceMaterials.length === 0) {
        return '';
    }

    let context = 'MAT√âRIAUX DE R√âF√âRENCE:\n';
    referenceMaterials.forEach((material, index) => {
        context += `${index + 1}. ${typeof material === 'string' ? material : JSON.stringify(material)}\n`;
    });
    context += '\n';

    return context;
}

// üîß ROUTES D'INFORMATION ENRICHIES

router.get('/groq-plan/info', (req, res) => {
    res.json({
        endpoint: 'POST /ai/groq-plan',
        description: 'üéØ ENDPOINT UNIFI√â ENRICHI - Gestion avanc√©e des ressources documentaires',
        version: '5.2 - FINAL FIX - Plus de r√©f√©rences fictives',
        status: 'OP√âRATIONNEL avec correction boundary + mapping param√®tres + suppression r√©f√©rences fictives',

        auto_detection: {
            'Content-Type: application/json': 'Mode JSON avec ressources textuelles enrichies',
            'Content-Type: multipart/form-data': 'Upload fichiers + donn√©es avec analyse avanc√©e'
        },

        fixes_applied: {
            'v5.2 FINAL': [
                'üîß SUPPRESSION des r√©f√©rences fictives quand aucune ressource fournie',
                'üìä D√©tection intelligente du contenu r√©el vs m√©tadonn√©es vides',
                '‚úÖ Champs resource_references, key_terminology, examples_from_resources seulement si ressources',
                'üìã Debug info avec d√©tection des ressources r√©elles'
            ]
        },

        parameter_mapping: {
            'topic': 'Obligatoire - Sujet de formation (min 5 caract√®res)',
            'type ou capsuleType': 'demonstrative|interactive|practical (d√©faut: demonstrative)',
            'level': 'beginner|intermediate|advanced (d√©faut: beginner)',
            'duration ou duration_minutes': 'Nombre en minutes 1-60 (d√©faut: 5)',
            'style': 'practical|theoretical|mixed (d√©faut: practical)',
            'enhancement_level': 'standard|advanced|maximum (d√©faut: standard)'
        },

        resource_detection: {
            'no_resources': 'Plan standard sans champs resource_references',
            'with_resources': 'Plan enrichi avec r√©f√©rences aux documents fournis',
            'detection_logic': 'Contenu > 10 caract√®res pour text, > 100 pour files'
        },

        usage_examples: {
            simple_no_resources: {
                input: {
                    topic: 'python',
                    type: 'demonstrative',
                    level: 'beginner',
                    duration_minutes: 5
                },
                output: 'Plan 3-4 sections SANS resource_references, key_terminology, examples_from_resources'
            },
            with_resources: {
                input: {
                    topic: 'Formation Excel',
                    resources: {
                        text_content: 'Notre guide Excel interne contient...'
                    }
                },
                output: 'Plan enrichi AVEC resource_references, key_terminology, examples_from_resources'
            }
        },

        quality_indicators: {
            has_any_resources: 'true/false selon d√©tection r√©elle',
            total_context_length: '0 si pas de ressources, >0 si ressources',
            resource_detection: 'Objet d√©taill√© dans debug_info'
        }
    });
});

router.get('/groq-plan/test', async (req, res) => {
    res.json({
        status: 'ready',
        version: '5.2-final-no-fake-references',
        corrections: {
            fake_references: 'CORRIG√â - Plus de r√©f√©rences fictives',
            resource_detection: 'AM√âLIOR√â - D√©tection intelligente contenu r√©el',
            conditional_fields: 'NOUVEAU - Champs enrichis seulement si ressources',
            debug_tracking: 'NOUVEAU - Suivi d√©taill√© d√©tection ressources'
        },
        test_scenarios: {
            no_resources: {
                url: 'POST /ai/groq-plan',
                body: {
                    topic: 'python basics',
                    type: 'demonstrative',
                    duration_minutes: 5
                },
                expected: {
                    has_any_resources: false,
                    sections_without: ['resource_references', 'key_terminology', 'examples_from_resources'],
                    total_context_length: 0
                }
            },
            with_resources: {
                url: 'POST /ai/groq-plan',
                body: {
                    topic: 'Formation Excel',
                    resources: {
                        text_content: 'Notre √©quipe utilise Excel quotidiennement pour les analyses financi√®res...'
                    }
                },
                expected: {
                    has_any_resources: true,
                    sections_with: ['resource_references', 'key_terminology', 'examples_from_resources'],
                    total_context_length: '>0'
                }
            }
        },
        ready_for_production: true,
        final_fix_confirmed: 'Le probl√®me des r√©f√©rences fictives est d√©finitivement r√©solu'
    });
});

module.exports = router;